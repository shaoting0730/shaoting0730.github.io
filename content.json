{"meta":{"title":"少停","subtitle":null,"description":"ʕ•̫͡•ོʔ•̫͡•ཻʕ•̫͡•ʔ•͓͡•ʔ","author":null,"url":"https://zhoushaoting.com"},"pages":[{"title":"","date":"2023-12-03T07:50:19.388Z","updated":"2023-12-03T07:50:19.383Z","comments":true,"path":"README.html","permalink":"https://zhoushaoting.com/README.html","excerpt":"","text":"现在的博客 旧博客"},{"title":"关于我","date":"2023-11-23T00:42:59.086Z","updated":"2021-08-28T13:32:45.546Z","comments":true,"path":"about/index.html","permalink":"https://zhoushaoting.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2023-11-23T00:42:59.087Z","updated":"2018-03-18T03:30:29.000Z","comments":true,"path":"categories/index.html","permalink":"https://zhoushaoting.com/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2023-11-23T00:42:59.086Z","updated":"2018-07-09T05:40:53.000Z","comments":true,"path":"message/index.html","permalink":"https://zhoushaoting.com/message/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-11-23T00:42:59.086Z","updated":"2018-03-18T03:30:47.000Z","comments":true,"path":"tags/index.html","permalink":"https://zhoushaoting.com/tags/index.html","excerpt":"","text":""},{"title":"search","date":"2018-04-07T08:31:05.000Z","updated":"2018-04-07T08:31:05.000Z","comments":true,"path":"search/index.html","permalink":"https://zhoushaoting.com/search/index.html","excerpt":"","text":""}],"posts":[{"title":"Flutter~PlatformView的简单使用","slug":"移动端学习/Flutter~PlatformView的简单使用","date":"2023-02-07T16:00:00.000Z","updated":"2023-12-03T05:29:23.238Z","comments":true,"path":"2023/02/08/移动端学习/Flutter~PlatformView的简单使用/","link":"","permalink":"https://zhoushaoting.com/2023/02/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~PlatformView%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"PlatformView 就是AndroidView和UIKitView的总称，允许原生端的view嵌入到flutter项目 中的 Widget。","text":"PlatformView 就是AndroidView和UIKitView的总称，允许原生端的view嵌入到flutter项目 中的 Widget。 接下来简单的演示下它的基本使用规则。 1、新建一个Flutter项目，然后在main.dart中： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import &#x27;package:flutter/material.dart&#x27;;import &#x27;dart:io&#x27;;import &#x27;package:flutter/services.dart&#x27;;void main() &#123; runApp(const MyApp());&#125;class MyApp extends StatelessWidget &#123; const MyApp(&#123;super.key&#125;); @override Widget build(BuildContext context) &#123; return MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: ThemeData( primarySwatch: Colors.blue, ), home: const MyHomePage(title: &#x27;Flutter Demo Home Page&#x27;), ); &#125;&#125;class MyHomePage extends StatefulWidget &#123; const MyHomePage(&#123;super.key, required this.title&#125;); final String title; @override State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();&#125;class _MyHomePageState extends State&lt;MyHomePage&gt; &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(widget.title), ), body: Platform.isIOS ? const UiKitView( viewType: &quot;platform_text_view&quot;, creationParams: &lt;String, dynamic&gt;&#123;&quot;text&quot;: &quot;iOS Label&quot;&#125;, creationParamsCodec: StandardMessageCodec(), ) : const AndroidView( viewType: &quot;platform_text_view&quot;, creationParams: &lt;String, dynamic&gt;&#123;&quot;text&quot;: &quot;Android Text View&quot;&#125;, creationParamsCodec: StandardMessageCodec(), ), ); &#125;&#125; 其中，iOS对应的是UiKitView ，传递的参数是iOS Label，唯一标识符是：platform_text_view 。android对应的是AndroidView ，传递的参数是Android Text View，唯一标识符是platform_text_view 。iOS一侧：新建PlatformTextView.swift 1234567891011121314151617181920212223import Foundationimport Flutterclass PlatformTextView: NSObject,FlutterPlatformView &#123; let frame: CGRect; let viewId: Int64; var text:String = &quot;&quot; init(_ frame: CGRect,viewID: Int64,args :Any?) &#123; self.frame = frame self.viewId = viewID if(args is NSDictionary)&#123; let dict = args as! NSDictionary self.text = dict.value(forKey: &quot;text&quot;) as! String &#125; &#125; func view() -&gt; UIView &#123; let label = UILabel() label.text = self.text label.textColor = UIColor.red label.frame = self.frame return label &#125;&#125; 新建PlatformTextView.swift 1234567891011import Foundationimport Flutterclass PlatformTextViewFactory: NSObject,FlutterPlatformViewFactory &#123; func create(withFrame frame: CGRect, viewIdentifier viewId: Int64, arguments args: Any?) -&gt; FlutterPlatformView &#123; return PlatformTextView(frame,viewID: viewId,args: args) &#125; func createArgsCodec() -&gt; FlutterMessageCodec &amp; NSObjectProtocol &#123; return FlutterStandardMessageCodec.sharedInstance() &#125;&#125; 修改 AppDelegate.swift 1234567891011121314151617import UIKitimport Flutter@UIApplicationMain@objc class AppDelegate: FlutterAppDelegate &#123; override func application( _ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? ) -&gt; Bool &#123; GeneratedPluginRegistrant.register(with: self) let factory = PlatformTextViewFactory() let registrar = self.registrar(forPlugin: &quot;platform_text_view_plugin&quot;) registrar!.register(factory, withId: &quot;platform_text_view&quot;) return super.application(application, didFinishLaunchingWithOptions: launchOptions) &#125;&#125; 然后在info.plist中添加： 1&lt;key&gt;io.flutter.embedded_views_preview&lt;/key&gt; Android一侧：新建AndroidTextView.kt 1234567891011121314package com.example.platformviewimport android.content.Contextimport android.graphics.Colorimport android.view.Viewimport android.widget.TextViewimport io.flutter.plugin.platform.PlatformViewclass AndroidTextView(context: Context) : PlatformView &#123; val contentView: TextView = TextView(context) override fun getView(): View &#123; return contentView &#125; override fun dispose() &#123;&#125;&#125; 新建AndroidTextViewFactory.kt 1234567891011121314151617181920package com.example.platformviewimport android.content.Contextimport io.flutter.plugin.common.StandardMessageCodecimport io.flutter.plugin.platform.PlatformViewimport io.flutter.plugin.platform.PlatformViewFactoryclass AndroidTextViewFactory : PlatformViewFactory(StandardMessageCodec.INSTANCE) &#123; override fun create(context: Context, viewId: Int, args: Any?): PlatformView &#123; val androidTextView = AndroidTextView(context) androidTextView.contentView.id = viewId val params = args?.let &#123; args as Map&lt;*, *&gt; &#125; val text = params?.get(&quot;text&quot;) as CharSequence? text?.let &#123; androidTextView.contentView.text = it &#125; return androidTextView &#125;&#125; 修改MainActivity.kt: 1234567891011121314package com.example.platformviewimport androidx.annotation.NonNullimport io.flutter.embedding.android.FlutterActivityimport io.flutter.embedding.engine.FlutterEngineimport io.flutter.plugins.GeneratedPluginRegistrantclass MainActivity: FlutterActivity() &#123; override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) &#123; GeneratedPluginRegistrant.registerWith(flutterEngine) val registry = flutterEngine.platformViewsController.registry registry.registerViewFactory(&quot;platform_text_view&quot;, AndroidTextViewFactory()) &#125;&#125; OK，回到flutter工程中，重新运行即可。 本文源码 其他：Android原生工程中添加Flutter模块 iOS原生工程中添加Flutter模块","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~发布package到pub.dev图文详解","slug":"移动端学习/Flutter~发布package到pub.dev图文详解","date":"2022-09-28T16:00:00.000Z","updated":"2022-10-01T06:24:23.662Z","comments":true,"path":"2022/09/29/移动端学习/Flutter~发布package到pub.dev图文详解/","link":"","permalink":"https://zhoushaoting.com/2022/09/29/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~%E5%8F%91%E5%B8%83package%E5%88%B0pub.dev%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/","excerpt":"使用了挺久的Flutter，今天学习下发布package到pub.dev~","text":"使用了挺久的Flutter，今天学习下发布package到pub.dev~ 首先得准备的内容有：1、翻墙工具 2、如果是第一次上传的话需要一个谷歌账号。 1、首先我们先确定下合适的名字，去到pub官网上搜索下，如果没有该库，那就可以使用。 2、 flutter create --template=package qwerbbb，新建一个package，叫qwerbbb，名字随意。 如果没有example文件夹，可以执行flutter create example 3、在lib里面就可以写你的组件内容了。 途中如果出现无故报红现象可以执行下flutter packages get 4、插件内容写完之后，可以回到example中，写一下例子。 5、回到最外层的pubspec.yaml中，书写该包的name、description、version、homepage，在README.md中写一些包的描述，如： 6、接下来到最外面的这个 LICENSE 文件中，写下许可证， 我这里直接复制一个，修改顶部的title和年份、作者,当然你可以选择想用的许可证文件 123456789101112131415 qwerbbbCopyright &lt;2022&gt; &lt;zhoushaoting&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.THS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.I 7、先在开始上传，接下来需要你终端翻墙了。翻墙后，执行 flutter packages pub publish --dry-run，如果是首次发布的话，终端会告诉你需要访问一个网址，浏览器访问，使用一个谷歌账号登录即可。 8、然后，终端如果输出Package has 0 warnings那就成功. 9、执行flutter packages pub publish --server=https://pub.dartlang.org，如果有警告，根据信息改后再次执行命令即可 最后，看到Successfully uploaded …….即表示成功。我们复制上面的https://pub.dev/packages/qwebbb即可看到该库，同时稍等片刻后即可以搜索到该库。 打完，吐槽一下，为何这个库无法彻底删除，会一直挂在你的账号下，所幸可以设置为DISCONTINUED区分下。","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~常用组件源码分析概览","slug":"移动端学习/Flutter~常用组件源码分析概览","date":"2022-08-31T16:00:00.000Z","updated":"2023-12-03T05:13:47.075Z","comments":true,"path":"2022/09/01/移动端学习/Flutter~常用组件源码分析概览/","link":"","permalink":"https://zhoushaoting.com/2022/09/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%A6%82%E8%A7%88/","excerpt":"接下来这段时间，学习一下Flutter众多widget的其中几个的源码，大概了解下其基本面貌","text":"接下来这段时间，学习一下Flutter众多widget的其中几个的源码，大概了解下其基本面貌 举几个栗子: MaterialApp Scaffold StatelessWidget StatefulWidget AppBar Text Column Row Image ListView Container。其中，他们的继承关系如下所示： MaterialApp12345class MaterialApp extends StatefulWidget abstract class StatefulWidget extends Widget &#123;abstract class Widget extends DiagnosticableTree &#123;abstract class DiagnosticableTree with Diagnosticable &#123;mixin Diagnosticable &#123; Scaffold123456class Scaffold extends StatefulWidget &#123;abstract class StatefulWidget extends Widget &#123;abstract class Widget extends DiagnosticableTree &#123;abstract class DiagnosticableTree with Diagnosticable &#123;mixin Diagnosticable &#123; StatelessWidget1234abstract class StatelessWidget extends Widget abstract class Widget extends DiagnosticableTree abstract class DiagnosticableTree with Diagnosticable mixin Diagnosticable StatefulWidget1234abstract class StatefulWidget extends Widget abstract class Widget extends DiagnosticableTree abstract class DiagnosticableTree with Diagnosticable mixin Diagnosticable AppBar123456class AppBar extends StatefulWidget implements PreferredSizeWidget &#123;abstract class StatefulWidget extends Widget &#123;abstract class Widget extends DiagnosticableTree &#123;abstract class DiagnosticableTree with Diagnosticable &#123;mixin Diagnosticable &#123; Text123456class Text extends StatelessWidget &#123;abstract class StatelessWidget extends Widget &#123;abstract class Widget extends DiagnosticableTree &#123;abstract class DiagnosticableTree with Diagnosticable &#123;mixin Diagnosticable &#123; Column12345678class Column extends Flex &#123;class Flex extends MultiChildRenderObjectWidget &#123;abstract class MultiChildRenderObjectWidget extends RenderObjectWidget &#123;abstract class RenderObjectWidget extends Widget &#123;abstract class Widget extends DiagnosticableTree &#123;abstract class DiagnosticableTree with Diagnosticable &#123;mixin Diagnosticable &#123; Row12345678class Row extends Flex &#123;class Flex extends MultiChildRenderObjectWidget &#123;abstract class MultiChildRenderObjectWidget extends RenderObjectWidget &#123;abstract class RenderObjectWidget extends Widget &#123;abstract class Widget extends DiagnosticableTree &#123;abstract class DiagnosticableTree with Diagnosticable &#123;mixin Diagnosticable &#123; Image123456class Image extends StatefulWidget &#123;abstract class StatefulWidget extends Widget &#123;abstract class Widget extends DiagnosticableTree &#123;abstract class DiagnosticableTree with Diagnosticable &#123;mixin Diagnosticable &#123; ListView12345678class ListView extends BoxScrollView &#123;abstract class BoxScrollView extends ScrollView &#123;abstract class ScrollView extends StatelessWidget &#123;abstract class StatelessWidget extends Widget &#123;abstract class Widget extends DiagnosticableTree &#123;abstract class DiagnosticableTree with Diagnosticable &#123;mixin Diagnosticable &#123; Container12345class Container extends StatelessWidget &#123;abstract class StatelessWidget extends Widget &#123;abstract class Widget extends DiagnosticableTree &#123;abstract class DiagnosticableTree with Diagnosticable &#123;mixin Diagnosticable &#123; 从以上可以看出来大部分widget都有个通用的继承关系。 123456class XXXX extends StatelessWidget/StatefulWidget &#123;abstract class StatelessWidget/StatefulWidget extends Widget &#123;abstract class Widget extends DiagnosticableTree &#123;abstract class DiagnosticableTree with Diagnosticable &#123;mixin Diagnosticable &#123; ok，那我们就从这点学习：在源码中，StatelessWidget 和StatefulWidget 都继承自 Widget ，Widget 又继承自DiagnosticableTree ，而DiagnosticableTree 类会混入Diagnosticable 那我们先看Widget : 1234567891011121314151617181920212223242526272829303132333435363738394041@immutableabstract class Widget extends DiagnosticableTree &#123; const Widget(&#123; this.key &#125;); final Key? key; @protected @factory Element createElement(); @override String toStringShort() &#123; final String type = objectRuntimeType(this, &#x27;Widget&#x27;); return key == null ? type : &#x27;$type-$key&#x27;; &#125; @override void debugFillProperties(DiagnosticPropertiesBuilder properties) &#123; super.debugFillProperties(properties); properties.defaultDiagnosticsTreeStyle = DiagnosticsTreeStyle.dense; &#125; @override @nonVirtual bool operator ==(Object other) =&gt; super == other; @override @nonVirtual int get hashCode =&gt; super.hashCode; static bool canUpdate(Widget oldWidget, Widget newWidget) &#123; return oldWidget.runtimeType == newWidget.runtimeType &amp;&amp; oldWidget.key == newWidget.key; &#125; static int _debugConcreteSubtype(Widget widget) &#123; return widget is StatefulWidget ? 1 : widget is StatelessWidget ? 2 : 0; &#125;&#125; 从第一行开始：发现会有几个注解： @nonVirtual @override @immutable @protected @factory 这个注解唯一作用就是静态分析出来代码类型。 同时这个类是被关键字abstract修饰的，代表该类抽象的：1、抽象类不能被实例化，只有继承它的子类可以。2、抽象类中一般我们把没有方法体的方法称为抽象方法。3、子类继承抽象类必须实现它的抽象方法。4、如果把抽象类当做接口实现的话必须得实现抽象类里面定义的所有属性和方法。 里面有个可选参数key，通过这个key ,我们可以获取到该组件（可以获取到该组件的宽高属性、位置属性、方法、state值等），如： currentContext: 可以找到包括renderBox在内的各种element有关的东西 currentWidget: 可以得到widget的属性 currentState: 可以得到state里面的变量 key的相关使用可见该链接 接着，里面有个抽象方法createElement(): 1234@protected@factoryElement createElement(); 其子类StatelessWidget 继承并重写,返回 StatelessElement 123@overrideStatelessElement createElement() =&gt; StatelessElement(this); 其子类StatefulWidget继承并重写,返回 StatefulElement 123@overrideStatefulElement createElement() =&gt; StatefulElement(this); 接着，里面有个单纯描述的方法toStringShort ： 1234567/// A short, textual description of this widget.@overrideString toStringShort() &#123; final String type = objectRuntimeType(this, &#x27;Widget&#x27;); return key == null ? type : &#x27;$type-$key&#x27;;&#125; 然后 12345@overridevoid debugFillProperties(DiagnosticPropertiesBuilder properties) &#123; super.debugFillProperties(properties); properties.defaultDiagnosticsTreeStyle = DiagnosticsTreeStyle.dense;&#125; 主要是设置DiagnosticableTree 的一些特性，设置properties.defaultDiagnosticsTreeStyle 为DiagnosticsTreeStyle.dense,其中DiagnosticsTreeStyle为一个枚举： 123456789101112131415enum DiagnosticsTreeStyle &#123; none, sparse, offstage, dense, transition, error, whitespace, flat, singleLine, errorProperty, shallow, truncateChildren,&#125; 接下来有个canUpdate 很关键： 12345 static bool canUpdate(Widget oldWidget, Widget newWidget) &#123; return oldWidget.runtimeType == newWidget.runtimeType &amp;&amp; oldWidget.key == newWidget.key;&#125; 这个方法表示什么情况下视图可以更新，只有当 oldWidget.runtimeType == newWidget.runtimeType 和 oldWidget.key == newWidget.key的情况下，widget方可更新（一个widget可以更新的标准是runtimeType和key都相同)。同时，当在setState的本质是调用Element类的markNeedsBuild实现的。 Widget会继承自DiagnosticableTree，而DiagnosticableTree会混入Diagnosticable 。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748abstract class DiagnosticableTree with Diagnosticable &#123; const DiagnosticableTree(); String toStringShallow(&#123; String joiner = &#x27;, &#x27;, DiagnosticLevel minLevel = DiagnosticLevel.debug, &#125;) &#123; String? shallowString; assert(() &#123; final StringBuffer result = StringBuffer(); result.write(toString()); result.write(joiner); final DiagnosticPropertiesBuilder builder = DiagnosticPropertiesBuilder(); debugFillProperties(builder); result.write( builder.properties.where((DiagnosticsNode n) =&gt; !n.isFiltered(minLevel)) .join(joiner), ); shallowString = result.toString(); return true; &#125;()); return shallowString ?? toString(); &#125; String toStringDeep(&#123; String prefixLineOne = &#x27;&#x27;, String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug, &#125;) &#123; return toDiagnosticsNode().toStringDeep(prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, minLevel: minLevel); &#125; @override String toStringShort() =&gt; describeIdentity(this); @override DiagnosticsNode toDiagnosticsNode(&#123; String? name, DiagnosticsTreeStyle? style &#125;) &#123; return DiagnosticableTreeNode( name: name, value: this, style: style, ); &#125; @protected List&lt;DiagnosticsNode&gt; debugDescribeChildren() =&gt; const &lt;DiagnosticsNode&gt;[];&#125; 123456789101112131415161718192021222324252627mixin Diagnosticable &#123; String toStringShort() =&gt; describeIdentity(this); @override String toString(&#123; DiagnosticLevel minLevel = DiagnosticLevel.info &#125;) &#123; String? fullString; assert(() &#123; fullString = toDiagnosticsNode(style: DiagnosticsTreeStyle.singleLine).toString(minLevel: minLevel); return true; &#125;()); return fullString ?? toStringShort(); &#125; DiagnosticsNode toDiagnosticsNode(&#123; String? name, DiagnosticsTreeStyle? style &#125;) &#123; return DiagnosticableNode&lt;Diagnosticable&gt;( name: name, value: this, style: style, ); &#125; @protected @mustCallSuper void debugFillProperties(DiagnosticPropertiesBuilder properties) &#123; &#125;&#125; Widget是继承于DiagnosticableTree 的，关于DiagnosticableTree 这个类，它主要用于在调试时获取子类的各种属性和children信息，在flutter各个对象中你经常能看到它，目前我们不需要去关心与之相关的内容。我们可以看到，Widget 是一个抽象类；同时它被immutable 注解修饰，说明它的各个属性一定是不可变的，这就是为什么我们写各种Widget 时，所写的各个属性要加 final 的原因，否则编译器就会发出警告。 参考文献: 从源码看flutter（一）：Widget篇参考文献: abstract","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~riverpod库学习","slug":"移动端学习/Flutter~riverpod库学习","date":"2022-07-31T16:00:00.000Z","updated":"2023-12-03T05:56:36.147Z","comments":true,"path":"2022/08/01/移动端学习/Flutter~riverpod库学习/","link":"","permalink":"https://zhoushaoting.com/2022/08/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~riverpod%E5%BA%93%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter中state管理的第三方riverpod，该库的作者和provider的作者是同一人，可以说是provider的重构版本。","text":"今天学习下Flutter中state管理的第三方riverpod，该库的作者和provider的作者是同一人，可以说是provider的重构版本。 代码结构如图所示: 下面是各文件的源码.main.dart1234567891011121314151617181920212223242526272829import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:riverpod_demo/tabbar.dart&#x27;;import &#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;;void main() &#123; runApp( const ProviderScope( child: MyApp(), ), );&#125;class MyApp extends StatelessWidget &#123; const MyApp(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: ThemeData( primarySwatch: Colors.blue, ), home: const TabBarWidget(), ); &#125;&#125; tabbar.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:riverpod_demo/pages/one_page/one_page.dart&#x27;;import &#x27;package:riverpod_demo/pages/two_page/two_page.dart&#x27;;class TabBarWidget extends StatefulWidget &#123; const TabBarWidget(&#123;Key? key&#125;) : super(key: key); @override State&lt;StatefulWidget&gt; createState() &#123; return MainPageState(); &#125;&#125;class MainPageState extends State&lt;TabBarWidget&gt; &#123; @override void initState() &#123; super.initState(); initData(); &#125; int _tabIndex = 0; List tabImages = []; var appBarTitles = [&#x27;One&#x27;, &#x27;Two&#x27;]; List _pageList = []; Image getTabIcon(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return tabImages[curIndex][1]; &#125; return tabImages[curIndex][0]; &#125; String getTabTitle(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return appBarTitles[curIndex]; &#125; else &#123; return appBarTitles[curIndex]; &#125; &#125; Image getTabImage(path) &#123; return Image.asset(path, width: 24.0, height: 24.0); &#125; void initData() &#123; /* * 初始化选中和未选中的icon */ tabImages = [ [getTabImage(&#x27;images/tab/home.png&#x27;), getTabImage(&#x27;images/tab/home_select.png&#x27;)], [getTabImage(&#x27;images/tab/show.png&#x27;), getTabImage(&#x27;images/tab/show_select.png&#x27;)], ]; /* * 子界面 */ _pageList = [ const OnePage(), const TwoPage(), ]; &#125; @override Widget build(BuildContext context) &#123; return Scaffold( body: _pageList[_tabIndex], bottomNavigationBar: BottomNavigationBar( items: &lt;BottomNavigationBarItem&gt;[ BottomNavigationBarItem(icon: getTabIcon(0), label: getTabTitle(0)), BottomNavigationBarItem(icon: getTabIcon(1), label: getTabTitle(1)), ], type: BottomNavigationBarType.fixed, currentIndex: _tabIndex, iconSize: 24.0, onTap: (index) &#123; setState(() &#123; _tabIndex = index; &#125;); &#125;, ), ); &#125;&#125; color.dart1234567891011121314151617181920212223import &#x27;dart:math&#x27;;import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;;final colorProvider = StateNotifierProvider.autoDispose&lt;ColorNotifier, Color&gt;( (ref) =&gt; ColorNotifier(),);class ColorNotifier extends StateNotifier&lt;Color&gt; &#123; ColorNotifier() : super(Colors.red); static const _colors = [ Colors.red, Colors.blue, Colors.yellow, Colors.green, ]; void changeColor() =&gt; state = _colors[Random().nextInt(_colors.length)];&#125; counter_provider.dart12345678910111213import &#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;;final counterProvider = StateNotifierProvider.autoDispose&lt;CounterNotifier, int&gt;( (ref) =&gt; CounterNotifier(),);class CounterNotifier extends StateNotifier&lt;int&gt; &#123; CounterNotifier() : super(0); void addCounter() =&gt; state = state + 1; void subCounter() =&gt; state = state - 1;&#125; one_page.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:riverpod_demo/rstate/counter.dart&#x27;;import &#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;;class OnePage extends ConsumerWidget &#123; const OnePage(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context, WidgetRef ref) &#123; return Scaffold( appBar: AppBar( title: const Text(&#x27;一&#x27;), ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, crossAxisAlignment: CrossAxisAlignment.center, children: [ InkWell( onTap: () &#123; ref.read(counterProvider.notifier).addCounter(); &#125;, child: const Text( &#x27;+&#x27;, style: TextStyle(fontSize: 40), ), ), const _ColorfulCounterText(), InkWell( onTap: () &#123; ref.read(counterProvider.notifier).subCounter(); &#125;, child: const Text( &#x27;-&#x27;, style: TextStyle(fontSize: 40), ), ), ], ), ), ); &#125;&#125;class _ColorfulCounterText extends ConsumerWidget &#123; const _ColorfulCounterText(); @override Widget build(BuildContext context, WidgetRef ref) &#123; final counter = ref.watch(counterProvider); return Text( &#x27;$counter&#x27;, ); &#125;&#125; two_page.dart1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;;import &#x27;package:riverpod_demo/rstate/counter.dart&#x27;;import &#x27;package:riverpod_demo/rstate/color.dart&#x27;;class TwoPage extends ConsumerWidget &#123; const TwoPage(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context, WidgetRef ref) &#123; return Scaffold( appBar: AppBar( backgroundColor: Colors.pink, title: const Text(&#x27;二&#x27;), ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, crossAxisAlignment: CrossAxisAlignment.center, children: [ InkWell( onTap: () &#123; ref.read(counterProvider.notifier).addCounter(); ref.read(colorProvider.notifier).changeColor(); &#125;, child: const Text( &#x27;+&#x27;, style: TextStyle(fontSize: 40), ), ), const _ColorfulCounterText(), InkWell( onTap: () &#123; ref.read(counterProvider.notifier).subCounter(); ref.read(colorProvider.notifier).changeColor(); &#125;, child: const Text( &#x27;-&#x27;, style: TextStyle(fontSize: 40), ), ), ], ), ), ); &#125;&#125;class _ColorfulCounterText extends ConsumerWidget &#123; const _ColorfulCounterText(); @override Widget build(BuildContext context, WidgetRef ref) &#123; final counter = ref.watch(counterProvider); final color = ref.watch(colorProvider); return Text( &#x27;$counter&#x27;, style: TextStyle( color: color, ), ); &#125;&#125; 效果图: 文章源码 另外:其他管理库学习 另外:Flutter学习demo","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"React学习:React_Hooks学习","slug":"前端学习/React学习~React-Hooks学习","date":"2021-08-21T16:00:00.000Z","updated":"2023-12-03T06:56:36.211Z","comments":true,"path":"2021/08/22/前端学习/React学习~React-Hooks学习/","link":"","permalink":"https://zhoushaoting.com/2021/08/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A0~React-Hooks%E5%AD%A6%E4%B9%A0/","excerpt":"今天尝试下React Hooks的学习.","text":"今天尝试下React Hooks的学习. 什么是React Hooks?React Hooks和传统的开发模式有何不同?使用React Hooks有哪些好处? 什么是React Hooks? 官方解释:Hook 是 React 16.8 的新增特性,它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性,如:保存状态、保存上下文、保存引用等.Hook 本质就是 JavaScript 函数.说白了就是对于函数组件的加强，增加了对于函数组件的一些特性，像class组件那样使用,是一套全新的API或者设计思想. 它和传统开发模式有何异同? &emsp; &emsp; 官方推荐使用钩子（函数），而不是类。因为钩子更简洁，代码量少，用起来比较\"轻\"，而类比较\"重\"。而且，钩子是函数，更符合 React 函数式的本质。 类（class）是数据和逻辑的封装。 也就是说，组件的状态和操作方法是封装在一起的。如果选择了类的写法，就应该把相关的数据和操作，都写在同一个 class 里面。 &emsp; &emsp; Hook 这个单词的意思是\"钩子\"。React Hooks 的意思是，组件尽量写成纯函数，如果需要外部功能和副作用，就用钩子把外部代码\"钩\"进来。 React Hooks 就是那些钩子。你需要什么功能，就使用什么钩子。React 默认提供了一些常用钩子，你也可以封装自己的钩子。所有的钩子都是为函数引入外部功能，所以 React 约定，钩子一律使用use前缀命名，便于识别。你要使用 xxx 功能，钩子就命名为 usexxx。 &emsp; &emsp; Redux 的作者 Dan Abramov 总结了组件类的几个缺点。 12345大型组件很难拆分和重构，也很难测试。业务逻辑分散在组件的各个方法之中，导致重复逻辑或关联逻辑。组件类引入了复杂的编程模式，比如 render props 和高阶组件。 &emsp; &emsp; 吹得都上天了,其实 御姐小萝莉,各有所爱,各有所长.据官方资料来说: 1234567完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。100% 向后兼容的。 Hook 不包含任何破坏性改动。现在可用。 Hook 已发布于 v16.8.0。没有计划从 React 中移除 class。Hook 不会影响你对 React 概念的理解。 恰恰相反，Hook 为已知的 React 概念提供了更直接的 API：props， state，context，refs 以及生命周期。 实操一把 准备工作: 1、react版本需 16.8.0以上. 2、使用 create-react-app或 npm 或yarn等方式新建一个最基本的项目即可,如:npx create-react-app my-app 传统模式--&gt;Example-class.js: 123456789101112131415161718192021222324import React,&#123;Component&#125; from &#x27;react&#x27;// class的基本演示class ExampleClass extends Component &#123; constructor(props)&#123; super(props); this.state = &#123;count:0&#125; &#125; // 组件第一次执行 componentDidMount()&#123; console.log(&#x27;ExampleClass执行了&#x27;) &#125; render()&#123; return ( &lt;div&gt; &lt;p&gt;class简单使用&lt;/p&gt; &lt;p&gt;&#123;this.state.count&#125;&lt;/p&gt; &lt;button onClick=&#123;()=&gt; &#123;this.setState(&#123;count:this.state.count+1&#125;)&#125;&#125;&gt;+1&lt;/button&gt; &lt;button onClick=&#123;()=&gt; &#123;this.setState(&#123;count:this.state.count-1&#125;)&#125;&#125;&gt;-1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export default ExampleClass; useState事例: 12345678910111213141516171819202122import React, &#123; useState,useEffect &#125; from &#x27;react&#x27;// useState 简单使用function Example1() &#123; const [count, setCount] = useState(0); // 此处的useEffect相当于componentDidMount 和 componentDidUpdate useEffect(()=&gt;&#123; console.log(&#x27;Example1下 useEffect执行了&#x27;); &#125;) return &lt;div&gt; &lt;p&gt;useState的简单使用&lt;/p&gt; &lt;p&gt; &#123;count&#125;&lt;/p&gt; &lt;button onClick=&#123;() =&gt; &#123; setCount(count + 1) &#125;&#125;&gt;+1&lt;/button&gt; &lt;button onClick=&#123;() =&gt; &#123; setCount(count - 1) &#125;&#125;&gt;-1&lt;/button&gt; &lt;/div&gt;&#125;export default Example1; useEffect: 123456789101112131415161718192021222324252627282930313233343536import React, &#123; useState ,useEffect&#125; from &#x27;react&#x27;function Example2() &#123; const [count, setCount] = useState(0); const [color, setColor] = useState(&#x27;red&#x27;); // 此处的useEffect相当于componentDidMount 和 color的componentDidUpdate useEffect(()=&gt;&#123; console.log(&#x27;------切换color--------&#x27;); &#125;,[color]) // 此处的useEffect相当于componentDidMount 和 count的componentDidUpdate useEffect(()=&gt;&#123; console.log(&#x27;点击count&#x27;); &#125;,[count]) function changeColor()&#123; if(color === &#x27;yellow&#x27;)&#123; setColor(&#x27;red&#x27;); &#125;else&#123; setColor(&#x27;yellow&#x27;); &#125; &#125; return &lt;div style=&#123;&#123;background:color&#125;&#125;&gt; &lt;p&gt;useEffect简单使用&lt;/p&gt; &lt;p&gt; &#123;count&#125;&lt;/p&gt; &lt;button onClick=&#123;() =&gt; &#123; setCount(count + 1) &#125;&#125;&gt;+1&lt;/button&gt; &lt;button onClick=&#123;() =&gt; &#123; setCount(count - 1) &#125;&#125;&gt;-1&lt;/button&gt; &lt;button onClick=&#123;() =&gt; changeColor()&#125;&gt;切换颜色&lt;/button&gt; &lt;/div&gt; &#125;export default Example2; useEffect代替componentWillUnmount使用(需要安装react-router-dom): 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import React, &#123; useEffect &#125; from &#x27;react&#x27;import &#123; BrowserRouter as Router, Route, Link &#125; from &#x27;react-router-dom&#x27;;function Index1() &#123; useEffect(() =&gt; &#123; console.log(&#x27;组件1componentDidMount &#x27;); return () =&gt; &#123; console.log(&#x27;组件1componentWillUnmount&#x27;); &#125; &#125;) return &lt;div&gt; &lt;h2&gt;组件1&lt;/h2&gt; &lt;/div&gt;&#125;function Index2() &#123; useEffect(() =&gt; &#123; console.log(&#x27;组件2componentDidMount &#x27;); return () =&gt; &#123; console.log(&#x27;组件2componentWillUnmount&#x27;); &#125; &#125;) return &lt;div&gt; &lt;h2&gt;组件2&lt;/h2&gt; &lt;/div&gt;&#125;function Example3() &#123; return &lt;div&gt; &lt;p&gt;useEffect代替componentWillUnmount使用&lt;/p&gt; &lt;Router&gt; &lt;ul&gt; &lt;li&gt;&lt;Link to=&quot;/&quot;&gt;组件1&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=&quot;/two/&quot;&gt;组件2&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; &lt;Route path=&quot;/&quot; exact component=&#123;Index1&#125; /&gt; &lt;Route path=&quot;/two/&quot; component=&#123;Index2&#125; /&gt; &lt;/Router&gt; &lt;/div&gt;&#125;export default Example3; useContext的简单使用:父子之间传递数据: 12345678910111213141516171819202122232425262728import React, &#123; useState,createContext,useContext &#125; from &#x27;react&#x27;// useState 简单使用function Example4() &#123; const [count, setCount] = useState(0); const CountContext = createContext(); function Child()&#123; let count = useContext(CountContext); return ( &lt;h1&gt;我是子组件&#123;count&#125;&lt;/h1&gt; ) &#125; return &lt;div&gt; &lt;p&gt;useContext的简单使用:父子之间传递数据&lt;/p&gt; &lt;p&gt;我是父组件: &#123;count&#125;&lt;/p&gt; &lt;button onClick=&#123;() =&gt; &#123; setCount(count + 1) &#125;&#125;&gt;+1&lt;/button&gt; &lt;button onClick=&#123;() =&gt; &#123; setCount(count - 1) &#125;&#125;&gt;-1&lt;/button&gt; &lt;CountContext.Provider value=&#123;count&#125;&gt; &lt;Child /&gt; &lt;/CountContext.Provider&gt; &lt;/div&gt;&#125;export default Example4; useRef使用: 12345678910111213141516171819import React, &#123; useState,useRef &#125; from &#x27;react&#x27;// useRef 简单使用function Example5() &#123; const [inputVal,setInputVal] = useState(&#x27;&#x27;) const ref = useRef(); function inputAction ()&#123; console.log(ref.current.value); setInputVal(ref.current.value); &#125; return &lt;div&gt; &lt;p&gt;useRef使用:&#123;inputVal&#125;&lt;/p&gt; &lt;input onChange=&#123;inputAction&#125; ref=&#123;ref&#125; /&gt; &lt;/div&gt;&#125;export default Example5; useReducer的简单使用: 12345678910111213141516171819202122232425262728import React, &#123; useReducer &#125; from &#x27;react&#x27;; const initialState = 0;const reducer = (state, action) =&gt; &#123; switch (action) &#123; case &#x27;increment&#x27;: return state + 1; case &#x27;decrement&#x27;: return state - 1; case &#x27;reset&#x27;: return 0; default: throw new Error(&#x27;Unexpected action&#x27;); &#125;&#125;; const Example6 = () =&gt; &#123; const [count, dispatch] = useReducer(reducer, initialState); return ( &lt;div&gt; &lt;p&gt;useReducer的简单使用&lt;/p&gt; &#123;count&#125; &lt;button onClick=&#123;() =&gt; dispatch(&#x27;increment&#x27;)&#125;&gt;+1&lt;/button&gt; &lt;button onClick=&#123;() =&gt; dispatch(&#x27;decrement&#x27;)&#125;&gt;-1&lt;/button&gt; &lt;button onClick=&#123;() =&gt; dispatch(&#x27;reset&#x27;)&#125;&gt;reset&lt;/button&gt; &lt;/div&gt; );&#125;; export default Example6; useMemo提升性能: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import React, &#123; useState, useMemo &#125; from &#x27;react&#x27;// useState 简单使用function Example7() &#123; const [name, setName] = useState(&#x27;name&#x27;); const [content, setContent] = useState(&#x27;content&#x27;); return ( &lt;div&gt; &lt;div&gt;useMemo提升性能&lt;/div&gt; &lt;button onClick=&#123;() =&gt; setName(new Date().getTime())&#125;&gt;&#123;name&#125;&lt;/button&gt; &lt;button onClick=&#123;() =&gt; setContent(new Date().getTime())&#125;&gt;&#123;content&#125;&lt;/button&gt; &lt;Child name=&#123;name&#125;&gt;&#123;content&#125;&lt;/Child&gt; &lt;/div&gt; )&#125;// 不使用useMemo,会造成不必要的性能开销// function Child(&#123;name,children&#125;)&#123;// function changeName(name)&#123;// console.log(&#x27;child执行了&#x27;);// return name + &#x27;改变&#x27;;// &#125;// const otherName = changeName(name);// return (// &lt;div&gt;// &lt;div&gt;&#123;otherName&#125;&lt;/div&gt;// &lt;div&gt;&#123;children&#125;&lt;/div&gt; // &lt;/div&gt;// )// &#125; // 使用useMemo function Child(&#123; name, children &#125;) &#123; function changeName(name) &#123; console.log(&#x27;child执行了&#x27;); return name + &#x27;改变&#x27;; &#125; const otherName = useMemo(() =&gt; changeName(name),[name]) return ( &lt;div&gt; &lt;div&gt;&#123;otherName&#125;&lt;/div&gt; &lt;div&gt;&#123;children&#125;&lt;/div&gt; &lt;/div&gt; ) &#125;export default Example7; 自定义Hook函数: 1234567891011121314151617181920212223242526272829303132333435import React, &#123; useState,useEffect,useCallback &#125; from &#x27;react&#x27;function useWinSize()&#123; const [size,setSize] = useState(&#123; width:document.documentElement.clientWidth, height:document.documentElement.clientHeight, &#125;) const onResize = useCallback(()=&gt;&#123; setSize(&#123; width:document.documentElement.clientWidth, height:document.documentElement.clientHeight, &#125;) &#125;,[]) useEffect(()=&gt;&#123; window.addEventListener(&#x27;resize&#x27;,onResize); return ()=&gt;&#123; window.removeEventListener(&#x27;resize&#x27;,onResize); &#125; &#125;) return size;&#125;function Example8() &#123; const size = useWinSize(); return &lt;div&gt; &lt;p&gt;自定义Hook函数&lt;/p&gt; &lt;p&gt;页面size:&#123;size.width&#125; + &#123;size.height&#125;&lt;/p&gt; &lt;/div&gt; &#125; export default Example8; ps:入口文件就只是引入而已.index.js 123456789101112131415161718192021222324252627282930313233343536import React from &#x27;react&#x27;;import ReactDOM from &#x27;react-dom&#x27;;import &#x27;./index.css&#x27;;import Example1 from &#x27;./Example1&#x27;;import Example2 from &#x27;./Example2&#x27;;import Example3 from &#x27;./Example3&#x27;;import Example4 from &#x27;./Example4&#x27;;import Example5 from &#x27;./Example5&#x27;;import Example6 from &#x27;./Example6&#x27;;import Example7 from &#x27;./Example7&#x27;; import Example8 from &#x27;./Example8&#x27;; import ExampleClass from &#x27;./Example-class&#x27;;ReactDOM.render( &lt;div&gt; &#123;/* &lt;ExampleClass /&gt; */&#125; &lt;Example1 /&gt; &lt;hr/&gt; &lt;Example2 /&gt; &lt;hr/&gt; &lt;Example3/&gt; &lt;hr/&gt; &lt;Example4/&gt; &lt;hr/&gt; &lt;Example5/&gt; &lt;hr/&gt; &lt;Example6/&gt; &lt;hr/&gt; &lt;Example7/&gt; &lt;hr/&gt; &lt;Example8/&gt; &lt;/div&gt;, document.getElementById(&#x27;root&#x27;)); React Hooks 的优点 12345678通过 Hooks 我们可以对 state 逻辑进行良好的封装，轻松做到隔离和复用，优点主要体现在：复用代码更容易：hooks 是普通的 JavaScript 函数，所以开发者可以将内置的 hooks 组合到处理 state 逻辑的自定义 hooks中，这样复杂的问题可以转化一个单一职责的函数，并可以被整个应用或者 React 社区所使用；使用组合方式更优雅：不同于 render props 或高阶组件等的模式，hooks 不会在组件树中引入不必要的嵌套，也不会受到 mixins 的负面影响；更少的代码量：一个 useEffect 执行单一职责，可以干掉生命周期函数中的重复代码。避免将同一职责代码分拆在几个生命周期函数中，更好的复用能力可以帮助优秀的开发者最大限度降低代码量；代码逻辑更清晰：hooks 帮助开发者将组件拆分为功能独立的函数单元，轻松做到“分离关注点”，代码逻辑更加清晰易懂；单元测试：处理 state 逻辑的自定义 hooks 可以被独立进行单元测试，更加可靠； 整理自: React Hooks完全上手指南-蚂蚁 RichLab 前端团队 React Hooks 入门教程-阮一峰 轻松学会 React 钩子：以 useEffect() 为例-阮一峰 bilibili 本文源码","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://zhoushaoting.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"前端学习","slug":"前端学习","permalink":"https://zhoushaoting.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~getx库学习","slug":"移动端学习/Flutter~getx学习","date":"2021-03-12T16:00:00.000Z","updated":"2023-12-03T05:18:11.594Z","comments":true,"path":"2021/03/13/移动端学习/Flutter~getx学习/","link":"","permalink":"https://zhoushaoting.com/2021/03/13/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~getx%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter中state管理的第三方getx.其中,get: 3.26.0","text":"今天学习下Flutter中state管理的第三方getx.其中,get: 3.26.0 官方文档 例子展示tabbar、state管理、国际化、跳转.效果如图 各文件如下main.dart12345678910111213141516171819202122232425import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:get/get.dart&#x27;;import &#x27;./languages.dart&#x27;;import &#x27;routes/app_pages.dart&#x27;;import &#x27;routes/app_routes.dart&#x27;;void main() &#123; runApp(MyApp());&#125;class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return GetMaterialApp( translations: Languages(), // 你的翻译 locale: Locale(&#x27;zh&#x27;, &#x27;CN&#x27;), // 将会按照此处指定的语言翻译 fallbackLocale: Locale(&#x27;en&#x27;, &#x27;US&#x27;), // 添加一个回调语言选项，以备上面指定的语言翻译不存在 initialRoute: AppRoutes.DASHBOARD, getPages: AppPages.list, debugShowCheckedModeBanner: false, themeMode: ThemeMode.system, ); &#125;&#125; main.dart是入口文件. languages.dart123456789101112131415161718import &#x27;package:get/get.dart&#x27;;class Languages extends Translations &#123; @override Map&lt;String, Map&lt;String, String&gt;&gt; get keys =&gt; &#123; &#x27;zh_CN&#x27;: &#123; &#x27;hello&#x27;: &#x27;你好 世界&#x27;, &#x27;one&#x27;: &#x27;首页&#x27;, &#x27;two&#x27;: &#x27;我的&#x27;, &#125;, &#x27;en_US&#x27;: &#123; &#x27;hello&#x27;: &#x27;Hello World&#x27;, &#x27;one&#x27;: &#x27;Home&#x27;, &#x27;two&#x27;: &#x27;Mine&#x27;, &#125; &#125;;&#125; languages.dart文件是国际化的配置文件. routes文件夹下: routes -&gt; app_pages.dart12345678910111213141516import &#x27;package:get/get.dart&#x27;;import &#x27;package:getx_demo/pages/dashboard/dashboard_binding.dart&#x27;;import &#x27;package:getx_demo/pages/dashboard/dashboard_page.dart&#x27;;import &#x27;app_routes.dart&#x27;;class AppPages &#123; static var list = [ GetPage( name: AppRoutes.DASHBOARD, page: () =&gt; DashboardPage(), binding: DashboardBinding(), ), ];&#125; routes -&gt; app_routes.dart1234class AppRoutes &#123; static const String DASHBOARD = &#x27;/&#x27;;&#125; pages文件夹如下:先是tabbar dashboard -&gt; dashboard_binding.dart1234567891011121314import &#x27;package:get/get.dart&#x27;;import &#x27;package:getx_demo/pages/account/account_controller.dart&#x27;;import &#x27;package:getx_demo/pages/home/home_controller.dart&#x27;;import &#x27;dashboard_controller.dart&#x27;;class DashboardBinding extends Bindings &#123; @override void dependencies() &#123; Get.lazyPut&lt;DashboardController&gt;(() =&gt; DashboardController()); Get.lazyPut&lt;HomeController&gt;(() =&gt; HomeController()); Get.lazyPut&lt;AccountController&gt;(() =&gt; AccountController()); &#125;&#125; dashboard -&gt; dashboard_controller.dart12345678910import &#x27;package:get/get.dart&#x27;;class DashboardController extends GetxController &#123; var tabIndex = 0; void changeTabIndex(int index) &#123; tabIndex = index; update(); &#125;&#125; dashboard -&gt; dashboard_page.dart12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import &#x27;package:flutter/cupertino.dart&#x27;;import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:get/get.dart&#x27;;import &#x27;package:getx_demo/pages/account/account_page.dart&#x27;;import &#x27;package:getx_demo/pages/home/home_page.dart&#x27;;import &#x27;dashboard_controller.dart&#x27;;class DashboardPage extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return GetBuilder&lt;DashboardController&gt;( builder: (controller) &#123; return Scaffold( body: IndexedStack( index: controller.tabIndex, children: [ HomePage(), AccountPage(), ], ), bottomNavigationBar: BottomNavigationBar( unselectedItemColor: Colors.black, selectedItemColor: Colors.redAccent, onTap: controller.changeTabIndex, currentIndex: controller.tabIndex, // showSelectedLabels: false, // showUnselectedLabels: false, // type: BottomNavigationBarType.fixed, backgroundColor: Colors.white, elevation: 0, items: [ _bottomNavigationBarItem( icon: CupertinoIcons.home, title: Text(&#x27;one&#x27;.tr), ), _bottomNavigationBarItem( icon: CupertinoIcons.person, title: Text(&#x27;two&#x27;.tr), ), ], ), ); &#125;, ); &#125; _bottomNavigationBarItem(&#123;IconData icon, Widget title&#125;) &#123; return BottomNavigationBarItem(icon: Icon(icon), title: title); &#125;&#125; 第一个Tab:home home -&gt; home_controller.dart12345678910import &#x27;package:get/get.dart&#x27;;class HomeController extends GetxController &#123; final String title = &#x27;Home Title&#x27;; var lgroupValue = &#x27;中文&#x27;.obs; void changeValue(value) &#123; lgroupValue.value = value; &#125;&#125; home -&gt; home_page.dart123456789101112131415161718192021222324252627282930313233343536373839404142import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:get/get.dart&#x27;;import &#x27;home_controller.dart&#x27;;class HomePage extends GetView&lt;HomeController&gt; &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(&#x27;首页&#x27;), ), body: ListView( children: [ Text( &#x27;hello&#x27;.tr, style: TextStyle(fontSize: 20), ), RadioListTile( value: &#x27;中文&#x27;, groupValue: controller.lgroupValue.toString(), title: Text(&#x27;中文&#x27;), onChanged: (type) &#123; var locale = Locale(&#x27;zh&#x27;, &#x27;CN&#x27;); Get.updateLocale(locale); controller.changeValue(&#x27;中文&#x27;); &#125;, ), RadioListTile( value: &#x27;英文&#x27;, groupValue: controller.lgroupValue.toString(), title: Text(&#x27;英文&#x27;), onChanged: (type) &#123; var locale = Locale(&#x27;en&#x27;, &#x27;US&#x27;); Get.updateLocale(locale); controller.changeValue(&#x27;英文&#x27;); &#125;, ) ], ), ); &#125;&#125; 再是第二个Tab:account account -&gt; account_controller.dart1234567891011import &#x27;package:get/get.dart&#x27;;class AccountController extends GetxController &#123; var counter = 0.obs; String name = &#x27;名字&#x27;; int age = 18; void increaseCounter() &#123; counter.value += 1; &#125;&#125; account -&gt; account_page.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:get/get.dart&#x27;;import &#x27;package:getx_demo/pages/account/second/second_page.dart&#x27;;import &#x27;account_controller.dart&#x27;;class AccountPage extends GetView&lt;AccountController&gt; &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(&#x27;个人&#x27;), ), body: Container( child: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, crossAxisAlignment: CrossAxisAlignment.center, children: [ Obx( () =&gt; Text(&quot;结果 $&#123;controller.counter.value&#125;&quot;), ), InkWell( onTap: () =&gt; controller.increaseCounter(), child: Text( &#x27;加1&#x27;, style: TextStyle(color: Colors.red, fontSize: 20), ), ), InkWell( onTap: () &#123; Get.to( () =&gt; SecondPage( name: controller.name, age: controller.age, ), ); &#125;, child: Text(&#x27;跳转二级&#x27;), ), ], ), ), ), ); &#125;&#125; 接下来,是account下的二级界面:second account -&gt; second_page.dart123456789101112131415161718192021222324252627282930313233343536373839404142import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:get/get.dart&#x27;;import &#x27;../account_controller.dart&#x27;;class SecondPage extends GetView&lt;AccountController&gt; &#123; final String name; final int age; SecondPage(&#123;Key key, @required this.name, this.age&#125;); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(&#x27;二级&#x27;), ), body: Container( child: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, crossAxisAlignment: CrossAxisAlignment.center, children: [ Text( &#x27;参数--&#x27; + this.name + this.age.toString(), ), Obx( () =&gt; Text(&quot;结果 $&#123;controller.counter.value&#125;&quot;), ), InkWell( onTap: () =&gt; controller.increaseCounter(), child: Text( &#x27;加1&#x27;, style: TextStyle(color: Colors.red, fontSize: 20), ), ), ], ), ), ), ); &#125;&#125; 源码 另外:其他管理库学习 另外:Flutter学习demo","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~provider学习","slug":"移动端学习/Flutter~provider学习","date":"2021-01-05T16:00:00.000Z","updated":"2023-12-03T05:55:23.872Z","comments":true,"path":"2021/01/06/移动端学习/Flutter~provider学习/","link":"","permalink":"https://zhoushaoting.com/2021/01/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~provider%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter中state管理的第三方provider的4.x新版本.其中,provider: 4.3.2+2, 3.1.0旧版本在文章末尾。","text":"今天学习下Flutter中state管理的第三方provider的4.x新版本.其中,provider: 4.3.2+2, 3.1.0旧版本在文章末尾。 代码结构如图所示: 下面是各文件的源码.main.dart12345678910111213141516171819202122232425262728293031323334353637383940import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:provider/provider.dart&#x27;;import &#x27;package:provider_demo1/tabbar.dart&#x27;;import &#x27;package:provider_demo1/provider/color_provider.dart&#x27;;import &#x27;package:provider_demo1/provider/counter_provider.dart&#x27;;void main() &#123; var colorProvider = ColorProvider(); var counterProvider = CounterProvider(); Provider.debugCheckInvalidValueType = null; runApp(MultiProvider( providers: [ ChangeNotifierProvider.value(value: colorProvider), ChangeNotifierProvider.value(value: counterProvider), ], child: MyApp(), ));&#125;class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return Consumer&lt;CounterProvider&gt;( builder: (context, model, child) &#123; return MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: ThemeData( primarySwatch: Colors.blue, visualDensity: VisualDensity.adaptivePlatformDensity, ), home: Tabbar(), ); &#125;, ); &#125;&#125; tabbar.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:provider_demo1/pages/one_pege.dart&#x27;;import &#x27;package:provider_demo1/pages/two_page.dart&#x27;;class Tabbar extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new MaterialApp( debugShowCheckedModeBanner: false, home: new MainPageWidget()); &#125;&#125;class MainPageWidget extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new MainPageState(); &#125;&#125;class MainPageState extends State&lt;MainPageWidget&gt; &#123; int _tabIndex = 0; var tabImages; var appBarTitles = [&#x27;One&#x27;, &#x27;Two&#x27;]; /* * 存放二个页面，跟fragmentList一样 */ var _pageList; /* * 根据选择获得对应的normal或是press的icon */ Image getTabIcon(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return tabImages[curIndex][1]; &#125; return tabImages[curIndex][0]; &#125; /* * 获取bottomTab的颜色和文字 */ String getTabTitle(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return appBarTitles[curIndex]; &#125; else &#123; return appBarTitles[curIndex]; &#125; &#125; /* * 根据image路径获取图片 */ Image getTabImage(path) &#123; return new Image.asset(path, width: 24.0, height: 24.0); &#125; void initData() &#123; /* * 初始化选中和未选中的icon */ tabImages = [ [ getTabImage(&#x27;images/tab/home.png&#x27;), getTabImage(&#x27;images/tab/home_select.png&#x27;) ], [ getTabImage(&#x27;images/tab/show.png&#x27;), getTabImage(&#x27;images/tab/show_select.png&#x27;) ], ]; /* * 子界面 */ _pageList = [ new OnePage(), new TwoPage(), ]; &#125; @override Widget build(BuildContext context) &#123; //初始化数据 initData(); return Scaffold( body: _pageList[_tabIndex], bottomNavigationBar: new BottomNavigationBar( items: &lt;BottomNavigationBarItem&gt;[ new BottomNavigationBarItem( icon: getTabIcon(0), label: getTabTitle(0)), new BottomNavigationBarItem( icon: getTabIcon(1), label: getTabTitle(1)), ], type: BottomNavigationBarType.fixed, //默认选中首页 currentIndex: _tabIndex, iconSize: 24.0, //点击事件 onTap: (index) &#123; setState(() &#123; _tabIndex = index; &#125;); &#125;, )); &#125;&#125; color_provider.dart12345678910111213import &#x27;package:flutter/material.dart&#x27;;class ColorProvider with ChangeNotifier &#123; Color _color = Colors.red; Color get color =&gt; _color; changeColor() &#123; _color = _color == Colors.red ? Colors.blue : Colors.red; notifyListeners(); &#125;&#125; counter_provider.dart12345678910111213141516171819import &#x27;package:flutter/material.dart&#x27;;class CounterProvider with ChangeNotifier &#123; int _count = 0; int get count =&gt; _count; addCounter() &#123; _count++; notifyListeners(); &#125; subCounter() &#123; _count--; notifyListeners(); &#125;&#125; one_page.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:provider/provider.dart&#x27;;import &#x27;package:provider_demo1/provider/color_provider.dart&#x27;;import &#x27;package:provider_demo1/provider/counter_provider.dart&#x27;;class OnePage extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(&#x27;One&#x27;), ), body: Consumer&lt;CounterProvider&gt;( builder: (context, model, child) &#123; return ListView( children: [ IconButton( icon: Icon(Icons.add), onPressed: () &#123; model.addCounter(); &#125;, ), Chip( backgroundColor: Provider.of&lt;ColorProvider&gt;(context).color, padding: EdgeInsets.all(12.0), label: Text( model.count.toString(), style: TextStyle(fontSize: 30.0), ), ), IconButton( icon: Icon(Icons.remove), onPressed: () &#123; model.subCounter(); &#125;, ), ], ); &#125;, ), ); &#125;&#125; two_page.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:provider/provider.dart&#x27;;import &#x27;package:provider_demo1/provider/color_provider.dart&#x27;;import &#x27;package:provider_demo1/provider/counter_provider.dart&#x27;;class TwoPage extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(&#x27;Two&#x27;), ), body: Consumer&lt;CounterProvider&gt;( builder: (context, model, child) &#123; return ListView( children: [ IconButton( icon: Icon(Icons.add), onPressed: () &#123; model.addCounter(); &#125;, ), Chip( backgroundColor: Provider.of&lt;ColorProvider&gt;(context).color, padding: EdgeInsets.all(12.0), label: Text( model.count.toString(), style: TextStyle(fontSize: 30.0), ), ), IconButton( icon: Icon(Icons.remove), onPressed: () &#123; model.subCounter(); &#125;, ), ], ); &#125;, ), floatingActionButton: FloatingActionButton( onPressed: () &#123; Provider.of&lt;ColorProvider&gt;(context, listen: false).changeColor(); &#125;, child: Icon( Icons.build, color: Colors.white, ), ), ); &#125;&#125; 效果图: &lt;——————————–2023-11-02，再写一下对provider的封装使用———————————–&gt; 封装成这样： provider_widget.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113// ignore_for_file: prefer_const_constructors_in_immutablesimport &#x27;package:flutter/material.dart&#x27;;import &#x27;package:provider/provider.dart&#x27;;/// Provider封装类 方便数据初始化class ProviderWidget&lt;T extends ChangeNotifier&gt; extends StatefulWidget &#123; final ValueWidgetBuilder&lt;T&gt; builder; final T model; final Widget? child; final Function(T model)? onModelReady; final bool autoDispose; ProviderWidget(&#123; Key? key, required this.builder, required this.model, this.child, this.onModelReady, this.autoDispose = true, &#125;) : super(key: key); _ProviderWidgetState&lt;T&gt; createState() =&gt; _ProviderWidgetState&lt;T&gt;();&#125;class _ProviderWidgetState&lt;T extends ChangeNotifier&gt; extends State&lt;ProviderWidget&lt;T&gt;&gt; &#123; late T model; @override void initState() &#123; model = widget.model; widget.onModelReady?.call(model); super.initState(); &#125; @override void dispose() &#123; if (widget.autoDispose) model.dispose(); super.dispose(); &#125; @override Widget build(BuildContext context) &#123; return ChangeNotifierProvider&lt;T&gt;.value( value: model, child: Consumer&lt;T&gt;( builder: widget.builder, child: widget.child, ), ); &#125;&#125;class ProviderWidget2&lt;A extends ChangeNotifier, B extends ChangeNotifier&gt; extends StatefulWidget &#123; final Widget Function(BuildContext context, A model1, B model2, Widget? child) builder; final A model1; final B model2; final Widget? child; final Function(A model1, B model2)? onModelReady; final bool autoDispose; ProviderWidget2(&#123; Key? key, required this.builder, required this.model1, required this.model2, this.child, this.onModelReady, this.autoDispose = true, &#125;) : super(key: key); _ProviderWidgetState2&lt;A, B&gt; createState() =&gt; _ProviderWidgetState2&lt;A, B&gt;();&#125;class _ProviderWidgetState2&lt;A extends ChangeNotifier, B extends ChangeNotifier&gt; extends State&lt;ProviderWidget2&lt;A, B&gt;&gt; &#123; late A model1; late B model2; @override void initState() &#123; model1 = widget.model1; model2 = widget.model2; widget.onModelReady?.call(model1, model2); super.initState(); &#125; @override void dispose() &#123; if (widget.autoDispose) &#123; model1.dispose(); model2.dispose(); &#125; super.dispose(); &#125; @override Widget build(BuildContext context) &#123; return MultiProvider( providers: [ ChangeNotifierProvider&lt;A&gt;.value(value: model1), ChangeNotifierProvider&lt;B&gt;.value(value: model2), ], child: Consumer2&lt;A, B&gt;( builder: widget.builder, child: widget.child, )); &#125;&#125; 使用：逻辑部分如下： home_vm.dart 123456789101112131415161718192021222324252627/* * @Author: zhoushaoting 510738319@qq.com * @Date: 2023-11-02 16:29:16 * @LastEditors: zhoushaoting 510738319@qq.com * @LastEditTime: 2023-11-02 16:40:03 * @FilePath: /provider_init/lib/home/home_vm.dart * @Description: 逻辑 */import &#x27;package:flutter/material.dart&#x27;;class HomeVM extends ChangeNotifier&#123; int num = 0; void add()&#123; num++; notifyListeners(); &#125; void minus()&#123; num--; notifyListeners(); &#125;&#125; UI部分如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/* * @Author: zhoushaoting 510738319@qq.com * @Date: 2023-11-02 16:29:16 * @LastEditors: zhoushaoting 510738319@qq.com * @LastEditTime: 2023-11-02 16:50:46 * @FilePath: /provider_init/lib/home/home_page.dart * @Description: UI */import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:provider_init/home/home_vm.dart&#x27;;import &#x27;package:provider_init/utils/provider_widget.dart&#x27;;class HomePage extends StatefulWidget &#123; const HomePage(&#123;super.key&#125;); @override State&lt;HomePage&gt; createState() =&gt; _HomePageState();&#125;class _HomePageState extends State&lt;HomePage&gt; &#123; late final HomeVM _homeVM = HomeVM(); @override void dispose() &#123; _homeVM.dispose(); super.dispose(); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: const Text(&#x27;Home Page&#x27;), ), body: ProviderWidget&lt;HomeVM&gt;( autoDispose: false, model: _homeVM, builder: (context, ref, child) &#123; return Column( crossAxisAlignment: CrossAxisAlignment.center, mainAxisAlignment: MainAxisAlignment.center, children: [ InkWell( onTap: () =&gt; ref.add(), child: Container( height: 50, alignment: Alignment.center, child: const Text(&#x27;+&#x27;), ), ), Text(&#x27;$&#123;ref.num&#125;&#x27;), InkWell( onTap: () =&gt; ref.minus(), child: Container( height: 50, alignment: Alignment.center, child: const Text(&#x27;-&#x27;), ), ), ], ); &#125;, ), ); &#125;&#125; 功能和之前的一样，但是这样更加清晰，UI和逻辑完全分开，也和之前一样不再使用setSatte直接刷新build。 文章源码 provider的封装使用源码 3.1.0版本源码 另外:其他管理库学习 另外:Flutter学习demo","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~fish_redux学习","slug":"移动端学习/Flutter~fish_redux学习","date":"2020-04-10T16:00:00.000Z","updated":"2023-12-03T05:16:08.609Z","comments":true,"path":"2020/04/11/移动端学习/Flutter~fish_redux学习/","link":"","permalink":"https://zhoushaoting.com/2020/04/11/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~fish_redux%E5%AD%A6%E4%B9%A0/","excerpt":"今天，学习下阿里出品的数据管理库：fish_redux。","text":"今天，学习下阿里出品的数据管理库：fish_redux。 &ensp;&ensp; &ensp;&ensp;在成品demo中，使用了fish_redux、网络请求dio、tabbar、数据模型model、基本传值、component、globalStrore、adapter。已经完成了一个基本项目的架子。先看下完成之后的效果图：💡：简介在一开始，需要先行了解下fish_redux为何物？何用？使用场景？何物?&ensp;&ensp; Fish Redux是一个基于 Redux 数据管理的组装式 flutter 应用框架， 特别适用于构建中大型的复杂应用，它最显著的特征是 函数式的编程模型、可预测的状态管理、可插拔的组件体系、最佳的性能表现。何用?&ensp;&ensp; 管理项目的数据流、在redux的中心思想前提下，\b\b降低耦合度和提高可扩展性，解决了【集中】和【分治】之间的矛盾，同时对 Reducer 的手动层层 Combine 变成由框架自动完成，大大简化了使用 Redux 的困难。使用场景？&ensp;&ensp; 中大型的复杂应用。鲁迅说过大项目越使用越方便，小项目越使用越恶心。参考资料： fish redux pdf 阿里fish redux视频 阿里fish redux初识 阿里fish redux中文介绍 💡：分层架构图fish_redux由redux改良而来：ReduxRedux 是来自前端社区的一个数据管理框架，对 Native开发同学来说可能会有一点陌生，我们做一个简单的介绍。Redux 是做什么的？Redux 是一个用来做[可预测][集中式][易调试][灵活性]的数据管理的框架。所有对数据的增删改查等操作都由 Redux 来集中负责。Redux 是怎么设计和实现的？Redux 是一个函数式的数据管理的框架。传统 OOP 做数据管理，往往是定义一些 Bean，每一个 Bean 对外暴露一些 Public-API 用来操作内部数据（充血模型）。函数式的做法是更上一个抽象的纬度，对数据的定义是一些 Struct（贫血模型），而操作数据的方法都统一到具有相同函数签名 (T, Action) =&gt; T 的 Reducer 中。FP:Struct（贫血模型） + Reducer = OOP:Bean（充血模型）同时 Redux 加上了 FP 中常用的 Middleware（AOP） 模式和 Subscribe 机制，给框架带了极高的灵活性和扩展性。贫血模型、充血模型请参考：https://en.wikipedia.org/wiki/Plain_old_Java_objectRedux 的缺点Redux 核心仅仅关心数据管理，不关心具体什么场景来使用它，这是它的优点同时也是它的缺点。在我们实际使用 Redux 中面临两个具体问题：• Redux 的集中和 Component 的分治之间的矛盾；• Redux 的 Reducer 需要一层层手动组装，带来的繁琐性和易错性。Fish Redux 的改良Fish Redux 通过 Redux 做集中化的可观察的数据管理。然不仅于此，对于传统 Redux 在使用层面上的缺点，在面向端侧 flutter 页面纬度开发的场景中，我们通过更好更高的抽象，做了改良。一个组件需要定义一个数据（Struct）和一个 Reducer。同时组件之间存在着父依赖子的关系。通过这层依赖关系，我们解决了【集中】和【分治】之间的矛盾，同时对 Reducer 的手动层层 Combine 变成由框架自动完成，大大简化了使用 Redux 的困难。我们得到了理想的集中的效果和分治的代码。💡：构成 &ensp;1、数据 核心部分。\b定义了组件需要用到的数据，也是组件的重要组成，其分为两部分：• 参与视图工作的 Redux• 不参与视图工作的 LocalProps &ensp;2、视图最基本的，也就是最重要的部分，每一个组件都应该是可视的。所以在组件构建时，我们必须为组件提供一个用于构建视图的函数。 &ensp;3、依赖 描述了组件与组件之间的关系，也是可插拔的组件式开发的一个重要特性。其分为两部分：\b• 为列表而优化的 Adapter• 组件整体的组成部分 slot\bComponent组件是对局部的展示和功能的封装。 基于 Redux 的原则，我们对功能细分为修改数据的功能(Reducer)和非修改数据的功能(副作用 Effect)。于是我们得到了，View、 Effect、Reducer 三部分，称之为组件的三要素，分别负责了组件的展示、非修改数据的行为、修改数据的行为。这是一种面向当下，也面向未来的拆分。在面向当下的 Redux 看来，是数据管理和其他。在面向未来的 UI-Automation 看来是 UI 表达和其他。UI 的表达对程序员而言即将进入黑盒时代，研发工程师们会把更多的精力放在非修改数据的行为、修改数据的行为上。组件是对视图的分治，也是对数据的分治。通过逐层分治，我们将复杂的页面和数据切分为相互独立的小模块。这将利于团队内的协作开发。关于 ViewView 仅仅是一个函数签名: (T,Dispatch,ViewService) =&gt; Widget它主要包含三方面的信息• 视图是完全由数据驱动。• 视图产生的事件／回调，通过 Dispatch 发出“意图”，不做具体的实现。• 需要用到的组件依赖等，通过 ViewService 标准化调用。比如一个典型的符合 View 签名的函数。关于 EffectEffect 是对非修改数据行为的标准定义，它是一个函数签名: (Context, Action) =&gt; Object它主要包含四方面的信息• 接收来自 View 的“意图”，也包括对应的生命周期的回调，然后做出具体的执行。• 它的处理可能是一个异步函数，数据可能在过程中被修改，所以我们不崇尚持有数据，而通过上下文来获取最新数据。• 它不修改数据， 如果修要，应该发一个 Action 到 Reducer 里去处理。• 它的返回值仅限于 bool or Future， 对应支持同步函数和协程的处理流程。ReducerReducer 是一个完全符合 Redux 规范的函数签名,即一个纯函数。State一个可变的 State 需要实现 Cloneable 类。其核心在于 clone 函数，它总是返回一个新的实例，Action 在 Redux 中，修改 State 是通过调用 dispatch 函数去触发 Action 来进行的， 但需要注意的是，Action 仅仅是表达了修改 State 的意图。• Action 的构造器接收两个参数：• Object type - 必要参数，Action 实例的类型dyanmic payload - 可选参数，Action 实例携带的参数为了更好的协作开发和减少低级错误，建议声明一个 Action 类型的枚举类，以及定义一个集合返回 Action 的函数的类，这样可以约束到 payload 的类型Adapterhttps://github.com/alibaba/fish-redux/blob/master/doc/concept/adapter-cn.mdhttps://github.com/alibaba/fish-redux/blob/master/doc/concept/what&#39;s-adapter.md在基本了解fish_redux的概念之后，照黑猫画白狗，写写代码熟悉下。 在正式使用之前，最好采用下IDE插件，快捷生成基本的文件和代码。 fish_redux模版工具FishReduxTemplateForAS-Android Studio fish_redux模版工具fish-redux-template-VScode 这里，我使用的是Android Studio，首先，新建一个初始项目，然后先加入fish_redux库： 然后Packages get。 然后我们新建若干文件夹分分类： components:存放子界面 model：数据转模型 one_tab: 存放第一个Tab service_api:网络请求等 store：根store tabbar: Tabbar栏 two_tab:存放第二个Tab app.dart: PageRoutes和MaterialApp的开始 main.dart: 起始文件先选中one_tab，然后File-&gt;New-&gt;FishReduxTemplate，选择page，Select Files选中所有文件，Module Name我们可以写One，然后OK，我们可以得到一些文件。以此类推，我们再在two_tab下新建Two,tabbar新建Tabbar。 基本文件新建完毕，开始写Tabbar：tabbar--state.dart 12345678910111213141516import &#x27;package:fish_redux/fish_redux.dart&#x27;;class TabbarState implements Cloneable&lt;TabbarState&gt; &#123; var index = 0; @override TabbarState clone() &#123; TabbarState newState = TabbarState()..index = index; return newState; &#125;&#125;TabbarState initState(Map&lt;String, dynamic&gt; args) &#123; return TabbarState()..index = 0;&#125; 如上所示，先定义一个用于控制当前index的值，默认给0位。 tabbar--view.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;package:fishreduxdemo/tabbar/action.dart&#x27;;import &#x27;package:flutter/material.dart&#x27;;import &#x27;state.dart&#x27;;import &#x27;../one_tab/page.dart&#x27;;import &#x27;../two_tab/page.dart&#x27;;Widget buildView( TabbarState state, Dispatch dispatch, ViewService viewService) &#123; var tabImages; var appBarTitles = [&#x27;首页&#x27;, &#x27;我的&#x27;]; /* * 根据选择获得对应的normal或是press的icon */ Image getTabIcon(int curIndex) &#123; if (curIndex == state.index) &#123; return tabImages[curIndex][1]; &#125; return tabImages[curIndex][0]; &#125; /* * 获取bottomTab的颜色和文字 */ Text getTabTitle(int curIndex) &#123; if (curIndex == state.index) &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: Colors.red)); &#125; else &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: Colors.black)); &#125; &#125; /* * 根据image路径获取图片 */ Image getTabImage(path) &#123; return new Image.asset(path, width: 24.0, height: 24.0); &#125; /* * 初始化选中和未选中的icon */ tabImages = [ [ getTabImage(&#x27;images/tab/home.png&#x27;), getTabImage(&#x27;images/tab//home_select.png&#x27;) ], [ getTabImage(&#x27;images/tab/mine.png&#x27;), getTabImage(&#x27;images/tab//mine_select.png&#x27;) ] ]; return Scaffold( body: IndexedStack( children: &lt;Widget&gt;[ OnePage().buildPage(null), TwoPage().buildPage(null), ], index: state.index, ), bottomNavigationBar: new BottomNavigationBar( items: &lt;BottomNavigationBarItem&gt;[ new BottomNavigationBarItem(icon: getTabIcon(0), title: getTabTitle(0)), new BottomNavigationBarItem(icon: getTabIcon(1), title: getTabTitle(1)), ], type: BottomNavigationBarType.fixed, //默认选中首页 currentIndex: state.index, iconSize: 24.0, //点击事件 onTap: (index) &#123; dispatch(TabbarActionCreator.switchIndex(index)); &#125;, ), );&#125; 如上所示，先引入必须的文件，切换方法改为fish_redux的触发action-&gt;reducer修改state-&gt;界面修改tabbar--action.dart 12345678910111213141516import &#x27;package:fish_redux/fish_redux.dart&#x27;;//TODO replace with your own actionenum TabbarAction &#123; action, switchIndex &#125;class TabbarActionCreator &#123; static Action onAction() &#123; return Action(TabbarAction.action); &#125; // 切换tab static Action switchIndex(int index) &#123; return Action(TabbarAction.switchIndex, payload: index); &#125;&#125; 定义一个切换index的action ** switchIndex **tabbar-reducer.dart 1234567891011121314151617181920212223242526272829import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;action.dart&#x27;;import &#x27;state.dart&#x27;;Reducer&lt;TabbarState&gt; buildReducer() &#123; return asReducer( &lt;Object, Reducer&lt;TabbarState&gt;&gt;&#123; TabbarAction.action: _onAction, TabbarAction.switchIndex: _switchIndex, &#125;, );&#125;TabbarState _onAction(TabbarState state, Action action) &#123; final TabbarState newState = state.clone(); return newState;&#125;/** 切换tab点击* */TabbarState _switchIndex(TabbarState state, Action action) &#123; var index = action.payload; final TabbarState newState = state.clone()..index = index; return newState;&#125; reducer里面处理切换方法。 effect 不变tabbar-effect.dart 123456789101112import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;action.dart&#x27;;import &#x27;state.dart&#x27;;Effect&lt;TabbarState&gt; buildEffect() &#123; return combineEffects(&lt;Object, Effect&lt;TabbarState&gt;&gt;&#123; TabbarAction.action: _onAction, &#125;);&#125;void _onAction(Action action, Context&lt;TabbarState&gt; ctx) &#123;&#125; tabbar-page.dart不变 1234567891011121314151617181920212223import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;effect.dart&#x27;;import &#x27;reducer.dart&#x27;;import &#x27;state.dart&#x27;;import &#x27;view.dart&#x27;;class TabbarPage extends Page&lt;TabbarState, Map&lt;String, dynamic&gt;&gt; &#123; TabbarPage() : super( initState: initState, effect: buildEffect(), reducer: buildReducer(), view: buildView, dependencies: Dependencies&lt;TabbarState&gt;( adapter: null, slots: &lt;String, Dependent&lt;TabbarState&gt;&gt;&#123; &#125;), middleware: &lt;Middleware&lt;TabbarState&gt;&gt;[ ],);&#125; one_tab和two_tab暂时不变。main.dart 123import &#x27;package:flutter/material.dart&#x27;;import &#x27;./app.dart&#x27;;void main() =&gt; runApp(createApp()); app.dart 123456789101112131415161718192021222324252627282930import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;package:flutter/material.dart&#x27; hide Action;import &#x27;package:flutter/widgets.dart&#x27; hide Action;import &#x27;./tabbar/page.dart&#x27;;import &#x27;./one_tab/page.dart&#x27;;import &#x27;./two_tab/page.dart&#x27;;Widget createApp() &#123; final AbstractRoutes routes = PageRoutes(pages: &lt;String, Page&lt;Object, dynamic&gt;&gt;&#123; &#x27;tabbar&#x27;: TabbarPage(), &#x27;one&#x27;: OnePage(), //在这里添加页面 &#x27;two&#x27;: TwoPage(), &#125;); return MaterialApp( title: &#x27;FishDemo&#x27;, theme: ThemeData( primarySwatch: Colors.blue, ), home: routes.buildPage(&#x27;tabbar&#x27;, null), //把他作为默认页面 onGenerateRoute: (RouteSettings settings) &#123; return MaterialPageRoute&lt;Object&gt;(builder: (BuildContext context) &#123; return routes.buildPage(settings.name, settings.arguments); &#125;); &#125;, );&#125; 这里需要配置路由。OK。基本界面已经完成。 然后我们试试使用globalStore配置全局state。修改全局的颜色在store文件夹下新建文件action.dart reducer.dart state.dart store.dart update.dart store--action.dart 123456789import &#x27;package:fish_redux/fish_redux.dart&#x27;;enum GlobalAction &#123; changeThemeColor &#125;class GlobalActionCreator&#123; static Action onChangeThemeColor()&#123; return const Action(GlobalAction.changeThemeColor); &#125;&#125; 定义一个action：changeThemeColorstore--reducer 1234567891011121314151617181920import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;dart:ui&#x27;;import &#x27;package:flutter/material.dart&#x27; hide Action;import &#x27;action.dart&#x27;;import &#x27;state.dart&#x27;;Reducer&lt;GlobalState&gt; buildReducer() &#123; return asReducer( &lt;Object, Reducer&lt;GlobalState&gt;&gt;&#123; GlobalAction.changeThemeColor: _onChangeThemeColor, &#125;, );&#125;GlobalState _onChangeThemeColor(GlobalState state, Action action) &#123; final Color color = state.themeColor == Colors.green ? Colors.blue : Colors.green; return state.clone()..themeColor = color;&#125; 切换方法为 state.themeColor == Colors.green ? Colors.blue : Colors.green;state.dart 1234567891011121314151617import &#x27;dart:ui&#x27;;import &#x27;package:fish_redux/fish_redux.dart&#x27;;abstract class GlobalBaseState&#123; Color get themeColor; set themeColor(Color color);&#125;class GlobalState implements GlobalBaseState, Cloneable&lt;GlobalState&gt;&#123; @override Color themeColor; @override GlobalState clone() &#123; return GlobalState(); &#125;&#125; implements Cloneable 然后重写themeColorstore-store.dart 12345678910import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;state.dart&#x27;;import &#x27;reducer.dart&#x27;;class GlobalStore&#123; static Store&lt;GlobalState&gt; _globalStore; static Store&lt;GlobalState&gt; get store =&gt; _globalStore ??= createStore&lt;GlobalState&gt;(GlobalState(), buildReducer());&#125; 定义一个Storestore--update.dart 12345678910111213141516171819202122232425import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;state.dart&#x27;;/// 全局刷新状态/// 页面状态刷新，在 [createApp()] visitor 中注册/// 如果是 `PageView` 中的页面做刷新，在 `Page` 构造函数中注册/// 参考 [HomeArticlePage]globalUpdate() =&gt; (Object pageState, GlobalState appState) &#123; final GlobalBaseState p = pageState; if (pageState is Cloneable) &#123; final Object copy = pageState.clone(); final GlobalBaseState newState = copy; if (p.themeColor != appState.themeColor) &#123; newState.themeColor = appState.themeColor; &#125; return newState; &#125; return pageState; &#125;; store书写完毕。接下里修改下app.dart 123456789101112131415161718192021222324252627282930···import &#x27;./store/state.dart&#x27;;import &#x27;./store/store.dart&#x27;;··· final AbstractRoutes routes = PageRoutes( pages: &lt;String, Page&lt;Object, dynamic&gt;&gt;&#123; &#x27;tabbar&#x27;: TabbarPage(), &#x27;one&#x27;: OnePage(), //在这里添加页面 &#x27;adapter_page&#x27;: AdapterTestPage(), &#x27;two&#x27;: TwoPage(), &#125;, visitor: (String path, Page&lt;Object, dynamic&gt; page) &#123; if (page.isTypeof&lt;GlobalBaseState&gt;()) &#123; page.connectExtraStore&lt;GlobalState&gt;(GlobalStore.store, (Object pageState, GlobalState appState) &#123; final GlobalBaseState p = pageState; if (p.themeColor != appState.themeColor) &#123; if (pageState is Cloneable) &#123; final Object copy = pageState.clone(); final GlobalBaseState newState = copy; newState.themeColor = appState.themeColor; return newState; &#125; &#125; return pageState; &#125;); &#125; &#125;, );··· 往其中加入visitor 即可。然后在界面中写入该themeColor： 1234567891011121314151617181920212223···import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;dart:ui&#x27;;import &#x27;../components/child_view/state.dart&#x27;;import &#x27;../components/achild_view/state.dart&#x27;;import &#x27;../store/state.dart&#x27;;class OneState implements Cloneable&lt;OneState&gt;, GlobalBaseState &#123; ChildViewState childState; AchildViewState aChildState; @override Color themeColor; @override OneState clone() &#123; return OneState() ..childState = childState ..aChildState = aChildState ..themeColor = themeColor; &#125;&#125;··· 1234567···return Scaffold( appBar: AppBar( backgroundColor: state.themeColor, title: Text(&#x27;one&#x27;), ),··· 修改： 123456··· GlobalStore.store.dispatch(GlobalActionCreator.onChangeThemeColor());··· 其中别忘了连接 connectExtraStore(GlobalStore.store, globalUpdate()); 详细的可以看文末GitHub链接。 OK，我们再尝试下component。在components文件夹下新建一个child_view文件夹，然后在其文件夹下新建component，选择File-&gt;New-&gt;FishReduxTemplate，选择Component，输入一个Module Name。点击OK这个时候，会生成action.dart component.dart effect.dart reducer.dart state.dart view.dart:然后我们可以在主page里面使用这个component：one_tab--state.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;dart:ui&#x27;;import &#x27;../components/child_view/state.dart&#x27;;import &#x27;../components/achild_view/state.dart&#x27;;import &#x27;../store/state.dart&#x27;;class OneState implements Cloneable&lt;OneState&gt;, GlobalBaseState &#123; ChildViewState childState; AchildViewState aChildState; @override Color themeColor; @override OneState clone() &#123; return OneState() ..childState = childState ..aChildState = aChildState ..themeColor = themeColor; &#125;&#125;OneState initState(Map&lt;String, dynamic&gt; args) &#123; OneState state = OneState(); state.childState = ChildViewState(); state.aChildState = AchildViewState(); return state;&#125;class ChildViewConnector extends ConnOp&lt;OneState, ChildViewState&gt; &#123; @override ChildViewState get(OneState state) &#123; return state.childState; &#125; @override void set(OneState state, ChildViewState subState) &#123; state.childState = subState; &#125;&#125;class AchildViewConnector extends ConnOp&lt;OneState, AchildViewState&gt; &#123; @override AchildViewState get(OneState state) &#123; return state.aChildState; &#125; @override void set(OneState state, AchildViewState subState) &#123; state.aChildState = subState; &#125;&#125; 如上所示：先引入 child_view下的state文件。初始化、新建ChildViewConnector。然后在one_tab-page.dart下修改：one_tab-page.dart 12345678910111213141516171819202122232425262728293031323334import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;effect.dart&#x27;;import &#x27;reducer.dart&#x27;;import &#x27;state.dart&#x27;;import &#x27;view.dart&#x27;;import &#x27;../components/child_view/component.dart&#x27;;import &#x27;../components/achild_view/component.dart&#x27;;import &#x27;../store/store.dart&#x27;;import &#x27;../store/update.dart&#x27;;class OnePage extends Page&lt;OneState, Map&lt;String, dynamic&gt;&gt; &#123; OnePage() : super( initState: initState, effect: buildEffect(), reducer: buildReducer(), view: buildView, dependencies: Dependencies&lt;OneState&gt;( adapter: null, slots: &lt;String, Dependent&lt;OneState&gt;&gt;&#123; &#x27;ChildViewComponent&#x27;: ChildViewConnector() + ChildViewComponent(), &#x27;AchildViewComponent&#x27;: AchildViewConnector() + AchildViewComponent(), &#125;), middleware: &lt;Middleware&lt;OneState&gt;&gt;[], ) &#123; connectExtraStore(GlobalStore.store, globalUpdate()); &#125;&#125; slots下引入该component。然后就可以在view中显示了：one_tab--view.dart 12345678910111213141516171819202122232425262728import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;package:flutter/material.dart&#x27;;import &#x27;state.dart&#x27;;Widget buildView(OneState state, Dispatch dispatch, ViewService viewService) &#123; return Scaffold( appBar: AppBar( backgroundColor: state.themeColor, title: Text(&#x27;one&#x27;), ), body: ListView( children: &lt;Widget&gt;[ _childView(state, viewService), _achildView(state, viewService), ], ), );&#125;Align _childView(OneState state, ViewService viewService) &#123; return Align(child: viewService.buildComponent(&#x27;ChildViewComponent&#x27;));&#125;Align _achildView(OneState state, ViewService viewService) &#123; return Align(child: viewService.buildComponent(&#x27;AchildViewComponent&#x27;));&#125; 其他的，如网络请求只需要在 Lifecycle.initState: _init,执行即可。如：two_bar-effect 123456789101112131415161718192021222324import &#x27;dart:convert&#x27;;import &#x27;package:fish_redux/fish_redux.dart&#x27;;import &#x27;action.dart&#x27;;import &#x27;state.dart&#x27;;import &#x27;../service_api/ServiceApi.dart&#x27;;import &#x27;../model/twoModel.dart&#x27;;Effect&lt;TwoState&gt; buildEffect() &#123; return combineEffects(&lt;Object, Effect&lt;TwoState&gt;&gt;&#123; Lifecycle.initState: _init, TwoAction.action: _onAction, &#125;);&#125;void _onAction(Action action, Context&lt;TwoState&gt; ctx) &#123;&#125;void _init(Action action, Context&lt;TwoState&gt; ctx) &#123; ServiceApi().twoGetData().then((value) &#123; ctx.dispatch(TwoActionCreator.onloadData(value)); &#125;);&#125; ServiceApi.dart 1234567891011121314151617181920import &#x27;package:dio/dio.dart&#x27;;import &#x27;dart:async&#x27;;import &#x27;../model/twoModel.dart&#x27;;class ServiceApi &#123; Future twoGetData() async &#123; try &#123; Response response; Dio dio = new Dio(); response = await dio.get(&#x27;https://gank.io/api/v2/banners&#x27;); TwoModel model = TwoModel.fromJson(response.data); return model; &#125; catch (e) &#123; print(&#x27;发送错误&#x27;); print(e); &#125; &#125;&#125; 其中model转换采用最为直接的https://javiercbk.github.io/json_to_dart/其model需要在state中进行赋值。 其他的如跳转、传参、adapter可以在下面的GitHub链接中找到。 以上就是简单版的fish_redux学习了.如果不明白的下面有源码地址,可以去那里看看. 本文源码地址 最简单的demo地址 flutter学习历程 ps:前几天面试，面试官有个需求，就是不同角色登录需要展示不同的tabbar，不同的界面，需要各自一个store，但只能是在一个app中实现。后来的路上想了下，简单搭了个架子。 架子源码地址","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~自定义tabbar模块","slug":"移动端学习/Flutter~自定义tabbar模块","date":"2020-01-22T16:00:00.000Z","updated":"2023-12-03T05:14:25.343Z","comments":true,"path":"2020/01/23/移动端学习/Flutter~自定义tabbar模块/","link":"","permalink":"https://zhoushaoting.com/2020/01/23/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~%E8%87%AA%E5%AE%9A%E4%B9%89tabbar%E6%A8%A1%E5%9D%97/","excerpt":"项目中,遇到一个需求,需要自定义tabbar的高度,但是自带的tabbar组件都不支持修改高度.","text":"项目中,遇到一个需求,需要自定义tabbar的高度,但是自带的tabbar组件都不支持修改高度. 所幸flutter的万物皆组件的概念,所以我们自己写一个tabbar即可.需求:需要一个可以自行控制高度的tabbar. 大致效果如下: 其中,自定义Tabbar组件如下 bottom_bar.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129/** 自定义tabbar* */import &#x27;package:flutter/material.dart&#x27;;class BottomBarItem &#123; BottomBarItem(&#123;this.imageIcon, this.imageSelectedIcon, this.text&#125;); Image imageIcon; Image imageSelectedIcon; String text;&#125;class BottomBar extends StatefulWidget &#123; BottomBar(&#123; this.items, this.centerItemText, this.height: 60.0, this.iconSize: 24.0, this.backgroundColor, this.color, this.selectedColor, this.notchedShape, this.onTabSelected, &#125;) &#123; assert(this.items.length == 2 || this.items.length == 4); &#125; final List&lt;BottomBarItem&gt; items; final String centerItemText; final double height; final double iconSize; final Color backgroundColor; final Color color; final Color selectedColor; final NotchedShape notchedShape; final ValueChanged&lt;int&gt; onTabSelected; @override State&lt;StatefulWidget&gt; createState() =&gt; BottomBarState();&#125;class BottomBarState extends State&lt;BottomBar&gt; &#123; int _selectedIndex = 0; _updateIndex(int index) &#123; widget.onTabSelected(index); setState(() &#123; _selectedIndex = index; &#125;); &#125; @override Widget build(BuildContext context) &#123; List&lt;Widget&gt; items = List.generate(widget.items.length, (int index) &#123; return _buildTabItem( item: widget.items[index], index: index, onPressed: _updateIndex, ); &#125;); items.insert(items.length &gt;&gt; 1, _buildMiddleTabItem()); return BottomAppBar( shape: widget.notchedShape, child: Row( mainAxisSize: MainAxisSize.max, mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: items, ), color: widget.backgroundColor, ); &#125; Widget _buildMiddleTabItem() &#123; return Expanded( child: SizedBox( height: widget.height, child: Column( mainAxisSize: MainAxisSize.min, mainAxisAlignment: MainAxisAlignment.end, children: &lt;Widget&gt;[ SizedBox(height: widget.iconSize), Text( widget.centerItemText ?? &#x27;&#x27;, style: TextStyle(color: widget.color), ), ], ), ), ); &#125; Widget _buildTabItem(&#123; BottomBarItem item, int index, ValueChanged&lt;int&gt; onPressed, &#125;) &#123; Image icon = _selectedIndex == index ? item.imageSelectedIcon : item.imageIcon; Color resultColor = _selectedIndex == index ? widget.selectedColor : widget.color; return Expanded( child: SizedBox( height: widget.height, child: Material( type: MaterialType.transparency, child: InkWell( onTap: () =&gt; onPressed(index), child: Column( mainAxisSize: MainAxisSize.min, mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ icon, Text( item.text, style: TextStyle(color: resultColor), ) ], ), ), ), ), ); &#125;&#125; 以上就是自定义的tabbar组件.其中字段解释如下:. items tabs数组,BottomBarItem类型. centerItemText 中间Tab按钮文字. height tab的高度. backgroundColor 整体背景色. color icon默认色. selectedColor 选中icon色. notchedShape icon的大小. onTabSelected 选中tab事件,做的主要就是切换当前page. notchedShape 设置notchedShape,和系统的NotchedShape一致 其他需要的属性,可以自行添加. 创建好自定义tabbar之后,使用即可. main.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104import &#x27;package:flutter/material.dart&#x27;;import &#x27;./bottom_bar.dart&#x27;;import &#x27;./pages/one.dart&#x27;;import &#x27;./pages/two.dart&#x27;;void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: ThemeData( primarySwatch: Colors.blue, ), home: STTabBar(), ); &#125;&#125;class STTabBar extends StatefulWidget &#123; @override _STTabBarState createState() =&gt; _STTabBarState();&#125;class _STTabBarState extends State&lt;STTabBar&gt; &#123; int _tabIndex = 0; double _tab_H = 70.0; // tag 高度 @override Widget build(BuildContext context) &#123; return Scaffold( body: IndexedStack( index: _tabIndex, children: &lt;Widget&gt;[ One( // 滑块 changeTabOne: (e) &#123; setState(() &#123; _tab_H = e; &#125;); &#125;, // 高度为0 changeTabTwo: () &#123; setState(() &#123; _tab_H = 0; &#125;); &#125;, // 高度为70 changeTabThree: () &#123; setState(() &#123; _tab_H = 70; &#125;); &#125;, ), Two(), ], ), bottomNavigationBar: BottomBar( height: _tab_H, color: Color(0xFF999999), selectedColor: Color.fromRGBO(255, 175, 76, 1),// backgroundColor: Colors.red, items: [ BottomBarItem( imageIcon: Image.asset( &#x27;assets/one.png&#x27;, width: 40, height: 40, ), imageSelectedIcon: Image.asset( &#x27;assets/one_select.png&#x27;, width: 40, height: 40, ), text: &#x27;首页&#x27;, ), BottomBarItem( imageIcon: Image.asset( &#x27;assets/two.png&#x27;, width: 40, height: 40, ), imageSelectedIcon: Image.asset( &#x27;assets/two_select.png&#x27;, width: 40, height: 40, ), text: &#x27;我的&#x27;, ) ], onTabSelected: (index) &#123; setState(() &#123; _tabIndex = index; &#125;); &#125;, ), ); &#125;&#125; 上面的BottomBar()这个就是之前自定义的tabbar,配置好参数即可. 完整源码 另：以上功能也可以采用PreferredSize 制作，如 PreferredSize 示例 ps:新年前最后一天,自己一个人在出租屋里写着博客,外面下着雨,路上没什么人,好好的年被着该该死的肺炎给搅和了,也不知道自己能不能度过这个灾难…..","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~自定义Dialog(基本的组件封装)","slug":"移动端学习/Flutter~自定义Dialog(基本的组件封装)","date":"2019-11-10T16:00:00.000Z","updated":"2023-12-03T05:14:11.701Z","comments":true,"path":"2019/11/11/移动端学习/Flutter~自定义Dialog(基本的组件封装)/","link":"","permalink":"https://zhoushaoting.com/2019/11/11/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~%E8%87%AA%E5%AE%9A%E4%B9%89Dialog(%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85)/","excerpt":"光棍节就得写个bug庆祝下!!!","text":"光棍节就得写个bug庆祝下!!! 写个自定义的Dialog,可以随意控制UI,同时封装一下,传值控制UI,开个方法回调,控制交互. 先上效果图!!! 再上代码CustomDialog.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160/** 输入框* */import &#x27;package:flutter/material.dart&#x27;;class CustomDialog extends StatefulWidget &#123; Function dismissCallback; // 取消回调 Function okCallback; // 确认回调 bool isNeedTag; // 外部传入的参数,控制显示slide还是input CustomDialog(&#123; Key key, this.dismissCallback, this.okCallback, this.isNeedTag, &#125;) : super(key: key); @override _CustomDialogState createState() =&gt; _CustomDialogState();&#125;class _CustomDialogState extends State&lt;CustomDialog&gt; &#123; String commitStr; double slideValue = 0.0; /* * 取消按钮点击事件 * */ _dismissDialog() &#123; if (widget.dismissCallback != null) &#123; widget.dismissCallback(); &#125; Navigator.of(context).pop(); &#125; /* * 确定按钮点击事件 * */ _okCallback(String txt) &#123; if (widget.okCallback != null) &#123; widget.okCallback(txt); &#125; Navigator.of(context).pop(); &#125; @override Widget build(BuildContext context) &#123; return Material( type: MaterialType.transparency, child: Center( child: SizedBox( width: 240, height: 240, child: Container( decoration: BoxDecoration( color: Colors.cyanAccent, borderRadius: BorderRadius.vertical( top: Radius.circular(120.0), ), ), child: Column( children: &lt;Widget&gt;[ widget.isNeedTag == true ? _topWidget() : _topWidget1(), Spacer(), _bottomWidget(), ], ), ), ), ), ); &#125; /* * 上方输入UI * */ Widget _topWidget() &#123; return Container( margin: EdgeInsets.only(top: 100), child: Container( child: TextField( onSubmitted: (e) &#123; setState(() &#123; commitStr = e; &#125;); &#125;, decoration: InputDecoration( border: InputBorder.none, hintText: &quot;请输入字符&quot;, ), ), ), ); &#125; /* * 上方输入UI-1 * */ Widget _topWidget1() &#123; return Container( margin: EdgeInsets.only(top: 100), child: Slider( value: slideValue, max: 100.0, min: 0.0, activeColor: Colors.blue, onChanged: (double val) &#123; setState(() &#123; slideValue = val; commitStr = val.toString(); &#125;); &#125;, ), ); &#125; /* * 底部选择widget * */ Widget _bottomWidget() &#123; return Row( mainAxisAlignment: MainAxisAlignment.spaceAround, children: &lt;Widget&gt;[ InkWell( onTap: () &#123; _okCallback(commitStr); &#125;, child: Container( height: 50, width: 120, color: Colors.yellow[800], child: Center( child: Text( &#x27;确定&#x27;, style: TextStyle(color: Colors.white), ), ), ), ), InkWell( onTap: () &#123; _dismissDialog(); &#125;, child: Container( height: 50, width: 120, color: Colors.red[800], child: Center( child: Text( &#x27;取消&#x27;, style: TextStyle(color: Colors.white), ), ), ), ), ], ); &#125;&#125; 使用如下 main.dart1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import &#x27;package:flutter/material.dart&#x27;;import &#x27;./custom_dialog.dart&#x27;;void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: ThemeData( primarySwatch: Colors.blue, ), home: MyHomePage(), ); &#125;&#125;class MyHomePage extends StatefulWidget &#123; @override _MyHomePageState createState() =&gt; _MyHomePageState();&#125;class _MyHomePageState extends State&lt;MyHomePage&gt; &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(&#x27;自定义dialog&#x27;), ), body: ListView( children: &lt;Widget&gt;[ InkWell( onTap: () &#123; showDialog( context: context, builder: (BuildContext context) &#123; return CustomDialog( isNeedTag: true, okCallback: (text) &#123; print(text); &#125;, dismissCallback: () &#123; print(&quot;input 取消了&quot;); &#125;, ); &#125;, ); &#125;, child: Text(&#x27;第一个&#x27;), ), SizedBox(height: 20), InkWell( onTap: () &#123; showDialog( context: context, builder: (BuildContext context) &#123; return CustomDialog( isNeedTag: false, okCallback: (text) &#123; print(text); &#125;, dismissCallback: () &#123; print(&quot;slide 取消了&quot;); &#125;, ); &#125;, ); &#125;, child: Text(&#x27;第二个&#x27;), ) ], ), ); &#125;&#125; 最后再讲点废话:isNeedTag 就是用来给外部用来控制内部UI的值,这个简单控制下内部是显示输入框还是滑块 Function dismissCallback 和 Function okCallback 是Dialog内部行为传给外部的方法,控制交互. ok.光棍节庆祝完毕.下班~~~ 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~Flare动画学习","slug":"移动端学习/Flutter~Flare动画学习","date":"2019-09-06T16:00:00.000Z","updated":"2023-12-03T05:16:35.841Z","comments":true,"path":"2019/09/07/移动端学习/Flutter~Flare动画学习/","link":"","permalink":"https://zhoushaoting.com/2019/09/07/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~Flare%E5%8A%A8%E7%94%BB%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter动画之 Flare.","text":"今天学习下Flutter动画之 Flare. Flare的官网.Flare 可以为 App/游戏/网页等制作酷炫的矢量动画模型；Flare 动画的优势是有效减少文件体积且获取极好的动画效果，适用于与场景交互不大的场景.在Flare官网上,可以访问两种文件，Nima文件和Flare文件: Nima 为较旧格式，仅支持光栅图；主要是为游戏引擎和应用构建 2D 动画 – XXX.nima Flare 为较新格式，支持矢量图与光栅图；主要为 App 和 Web 构建高效动画，也可用于游戏设计 – XXX.flr这两种格式文件使用各自的库. nima flare_flutter. 至于动画制作不用采用代码编写,而是采用类似PS的方式设计.我这里就不介绍如何设计动画,只介绍一下如何使用即可.设计方法可以参考网友的教程:网友1.网友2.网友3. 引入库12345678nima: ^1.0.5flare_flutter: ^1.5.4和引入文件: assets: - assets/Hop.nima - assets/Hop.png - assets/Teddy.flr one.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:nima/nima_actor.dart&#x27;;class One extends StatefulWidget &#123; @override _OneState createState() =&gt; _OneState();&#125;class _OneState extends State&lt;One&gt; &#123; String _animationName = &quot;idle&quot;; @override Widget build(BuildContext context) &#123; return Scaffold( backgroundColor: Colors.grey, body: Stack( children: &lt;Widget&gt;[ Positioned.fill( child: NimaActor( &quot;assets/Hop.nima&quot;, alignment: Alignment.center, fit: BoxFit.contain, animation: _animationName, mixSeconds: 0.5, completed: (String animationName) &#123; setState( () &#123; // Return to idle. _animationName = &quot;idle&quot;; &#125;, ); &#125;, ), ), Positioned.fill( child: Row( crossAxisAlignment: CrossAxisAlignment.end, mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ Container( margin: const EdgeInsets.all(5.0), child: FlatButton( child: Text(&quot;Jump&quot;), textColor: Colors.white, color: Colors.blue, onPressed: () &#123; setState( () &#123; _animationName = &quot;jump&quot;; &#125;, ); &#125;, ), ), Container( margin: const EdgeInsets.all(5.0), child: FlatButton( child: Text(&quot;Attack&quot;), textColor: Colors.white, color: Colors.blue, onPressed: () &#123; setState( () &#123; _animationName = &quot;attack&quot;; &#125;, ); &#125;, ), ), ], ), ) ], ), ); &#125;&#125; 效果图: two.dart12345678910111213141516171819202122import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flare_flutter/flare_actor.dart&#x27;;class Two extends StatefulWidget &#123; @override _TwoState createState() =&gt; _TwoState();&#125;class _TwoState extends State&lt;Two&gt; &#123; @override Widget build(BuildContext context) &#123; return Scaffold( body: FlareActor( &quot;assets/Teddy.flr&quot;, alignment: Alignment.center, fit: BoxFit.contain, animation: &quot;idle&quot;, ), ); &#125;&#125; 效果图: 源码 开发中，你也可以选择其他的方案，如 lottie 或者 svgaplayer_flutter ， 我大致试了下，在 Flare 和 lottie 和 svgaplayer_flutter来看，我觉得lottie更加简单。 lottie和svgaplayer_flutter的demo","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~mobx库学习","slug":"移动端学习/Flutter~mobx库学习","date":"2019-08-07T16:00:00.000Z","updated":"2023-12-03T05:28:46.204Z","comments":true,"path":"2019/08/08/移动端学习/Flutter~mobx库学习/","link":"","permalink":"https://zhoushaoting.com/2019/08/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~mobx%E5%BA%93%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter中state管理的第三方mobx .其中,mobx: ^0.1.4 flutter_mobx: ^0.1.3,当中,还需要其他的两个库的支持,mobx_codegen: ^0.1.3,build_runner: ^1.4.0","text":"今天学习下Flutter中state管理的第三方mobx .其中,mobx: ^0.1.4 flutter_mobx: ^0.1.3,当中,还需要其他的两个库的支持,mobx_codegen: ^0.1.3,build_runner: ^1.4.0 代码结构如图所示: 首先,先在pubspec.yaml里添加123456789101112131415161718192021version: 1.0.0+1environment: sdk: &quot;&gt;=2.1.0 &lt;3.0.0&quot;dependencies: flutter: sdk: flutter # The following adds the Cupertino Icons font to your application. # Use with the CupertinoIcons class for iOS style icons. cupertino_icons: ^0.1.2 mobx: ^0.1.4 flutter_mobx: ^0.1.3dev_dependencies: flutter_test: sdk: flutter mobx_codegen: ^0.1.3 build_runner: ^1.4.0 flutter packages get 之后,我们先创建一个基本的结构.其中包含两个Tab页面:one_page.dart和two_page.dart,tabBar的tabbar.dart,mobx的counter.dart ,counter.g.dart.首先,先在counter.dart中写基本代码,其中count是个状态化的数字.然后,终端cd 到更目录之下.执行 flutter packages pub run build_runner build,如果正常的话,会自动生成 count.g.dart文件. counter.dart1234567891011121314151617181920212223242526272829import &#x27;package:mobx/mobx.dart&#x27;;part &#x27;counter.g.dart&#x27;;class Counter = CounterBase with _$Counter;final Counter counter = Counter();abstract class CounterBase implements Store &#123; @observable int value = 0; @action void increment() &#123; value++; &#125; @action void decrement() &#123; value--; &#125; @action void set(int value) &#123; this.value = value; &#125;&#125; counter.g.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960// GENERATED CODE - DO NOT MODIFY BY HANDpart of &#x27;counter.dart&#x27;;// **************************************************************************// StoreGenerator// **************************************************************************// ignore_for_file: non_constant_identifier_names, unnecessary_lambdas, prefer_expression_function_bodies, lines_longer_than_80_charsmixin _$Counter on CounterBase, Store &#123; final _$valueAtom = Atom(name: &#x27;CounterBase.value&#x27;); @override int get value &#123; _$valueAtom.reportObserved(); return super.value; &#125; @override set value(int value) &#123; _$valueAtom.context.checkIfStateModificationsAreAllowed(_$valueAtom); super.value = value; _$valueAtom.reportChanged(); &#125; final _$CounterBaseActionController = ActionController(name: &#x27;CounterBase&#x27;); @override void increment() &#123; final _$actionInfo = _$CounterBaseActionController.startAction(); try &#123; return super.increment(); &#125; finally &#123; _$CounterBaseActionController.endAction(_$actionInfo); &#125; &#125; @override void decrement() &#123; final _$actionInfo = _$CounterBaseActionController.startAction(); try &#123; return super.decrement(); &#125; finally &#123; _$CounterBaseActionController.endAction(_$actionInfo); &#125; &#125; @override void set(int value) &#123; final _$actionInfo = _$CounterBaseActionController.startAction(); try &#123; return super.set(value); &#125; finally &#123; _$CounterBaseActionController.endAction(_$actionInfo); &#125; &#125;&#125; ok,在使用的时候,使用counter.value即可使用mobx中的值,使用counter.increment即可改变值.如: one_page.dart1234567891011121314151617181920212223242526272829303132333435363738import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_mobx/flutter_mobx.dart&#x27;;import &#x27;../mobx/counter.dart&#x27;;class OnePage extends StatefulWidget &#123; @override _OnePageState createState() =&gt; _OnePageState();&#125;class _OnePageState extends State&lt;OnePage&gt; &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(&#x27;111111&#x27;), ), body: ListView( children: &lt;Widget&gt;[ Observer( builder: (_) =&gt; Text( &#x27;$&#123;counter.value&#125;&#x27;, style: Theme.of(context).textTheme.display1, ), ), RaisedButton( child: Text(&#x27;加&#x27;), onPressed: counter.increment, ), RaisedButton( child: Text(&#x27;减&#x27;), onPressed: counter.decrement, ), ], ), ); &#125;&#125; two_page.dart12345678910111213141516171819202122232425262728293031323334353637import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_mobx/flutter_mobx.dart&#x27;;import &#x27;../mobx/counter.dart&#x27;;class TwoPage extends StatefulWidget &#123; @override _TwoPageState createState() =&gt; _TwoPageState();&#125;class _TwoPageState extends State&lt;TwoPage&gt; &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(&#x27;222222&#x27;), ), body: ListView( children: &lt;Widget&gt;[ Observer( builder: (_) =&gt; Text( &#x27;$&#123;counter.value&#125;&#x27;, style: Theme.of(context).textTheme.display1, ), ), RaisedButton( child: Text(&#x27;加&#x27;), onPressed: counter.increment, ), RaisedButton( child: Text(&#x27;减&#x27;), onPressed: counter.decrement, ), ], ), ); &#125;&#125; 其他文件: main.dart12345678910111213141516171819202122232425262728import &#x27;package:flutter/material.dart&#x27;;import &#x27;./tabbar.dart&#x27;;void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: ThemeData( // This is the theme of your application. // // Try running your application with &quot;flutter run&quot;. You&#x27;ll see the // application has a blue toolbar. Then, without quitting the app, try // changing the primarySwatch below to Colors.green and then invoke // &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;, // or simply save your changes to &quot;hot reload&quot; in a Flutter IDE). // Notice that the counter didn&#x27;t reset back to zero; the application // is not restarted. primarySwatch: Colors.blue, ), home: Tabbar(), ); &#125;&#125; tabbar.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108import &#x27;package:flutter/material.dart&#x27;;import &#x27;./pages/one_page.dart&#x27;;import &#x27;./pages/two_page.dart&#x27;;class Tabbar extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new MaterialApp( debugShowCheckedModeBanner: false, home: new MainPageWidget()); &#125;&#125;class MainPageWidget extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new MainPageState(); &#125;&#125;class MainPageState extends State&lt;MainPageWidget&gt; &#123; int _tabIndex = 0; var tabImages; var appBarTitles = [&#x27;一&#x27;, &#x27;二&#x27;]; /* * 存放两个页面，跟fragmentList一样 */ var _pageList; /* * 根据选择获得对应的normal或是press的icon */ Image getTabIcon(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return tabImages[curIndex][1]; &#125; return tabImages[curIndex][0]; &#125; /* * 获取bottomTab的颜色和文字 */ Text getTabTitle(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: const Color(0xff1296db))); &#125; else &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: const Color(0xff515151))); &#125; &#125; /* * 根据image路径获取图片 */ Image getTabImage(path) &#123; return new Image.asset(path, width: 24.0, height: 24.0); &#125; void initData() &#123; /* * 初始化选中和未选中的icon */ tabImages = [ [ getTabImage(&#x27;images/tab/home.png&#x27;), getTabImage(&#x27;images/tab//home_select.png&#x27;) ], [ getTabImage(&#x27;images/tab/show.png&#x27;), getTabImage(&#x27;images/tab//show_select.png&#x27;) ] ]; /* * 三个子界面 */ _pageList = [ new OnePage(), new TwoPage(), ]; &#125; @override Widget build(BuildContext context) &#123; //初始化数据 initData(); return Scaffold( body: _pageList[_tabIndex], bottomNavigationBar: new BottomNavigationBar( items: &lt;BottomNavigationBarItem&gt;[ new BottomNavigationBarItem( icon: getTabIcon(0), title: getTabTitle(0)), new BottomNavigationBarItem( icon: getTabIcon(1), title: getTabTitle(1)), ], type: BottomNavigationBarType.fixed, //默认选中首页 currentIndex: _tabIndex, iconSize: 24.0, //点击事件 onTap: (index) &#123; setState(() &#123; _tabIndex = index; &#125;); &#125;, )); &#125;&#125; 效果图: 源码 另外:其他管理库学习 另外:Flutter学习demo","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"MAC下的cocos2d-x环境搭建","slug":"其他学习/MAC下的cocos2d-x环境搭建","date":"2019-06-22T16:00:00.000Z","updated":"2019-06-23T10:14:44.000Z","comments":true,"path":"2019/06/23/其他学习/MAC下的cocos2d-x环境搭建/","link":"","permalink":"https://zhoushaoting.com/2019/06/23/%E5%85%B6%E4%BB%96%E5%AD%A6%E4%B9%A0/MAC%E4%B8%8B%E7%9A%84cocos2d-x%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"很久以前,朋友建议培养下业余爱好,思来想去,决定学习下游戏开发.猿的下班生活如果还是和代码相关的话,那么它真的无药可救了.哎….","text":"很久以前,朋友建议培养下业余爱好,思来想去,决定学习下游戏开发.猿的下班生活如果还是和代码相关的话,那么它真的无药可救了.哎…. 今天,学习下Mac系统下的cocos2d-x的环境搭建. 先进入官网: https://cocos2d-x.org/下载最新的SDK.如图所示 下载之后,解压找个地方放置下,如: 打开终端,cd到SDK目录.然后执行 python setup.py .终端运行之后,会显示 1-&gt;Please enter the path of NDK_ROOT (or press Enter to skip): 直接回车即可.显示: 1Please execute command: &quot;source /Users/shaotingzhou/.bash_profile&quot; to make added system variables take effect 复制其中””的执行一下即可. 环境安装好了.可以执行 cocos -v 看下版本信息. 然后我们新建一个工程,使用Xcode运行一下看看.终端执行 12cocos new -p com.duan.test -l cpp -d /Users/shaotingzhou/Desktop//workspace helloworld 然后就会在桌面上看到一个workspace文件夹,里面就有helloworld工程,在 proj.ios_mac 下使用Xcode打开编译运行即可.如图:","categories":[{"name":"其他学习","slug":"其他学习","permalink":"https://zhoushaoting.com/categories/%E5%85%B6%E4%BB%96%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"其他学习","slug":"其他学习","permalink":"https://zhoushaoting.com/tags/%E5%85%B6%E4%BB%96%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~国际化教程方案","slug":"移动端学习/Flutter~国际化教程方案","date":"2019-06-10T16:00:00.000Z","updated":"2023-12-03T05:14:01.233Z","comments":true,"path":"2019/06/11/移动端学习/Flutter~国际化教程方案/","link":"","permalink":"https://zhoushaoting.com/2019/06/11/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~%E5%9B%BD%E9%99%85%E5%8C%96%E6%95%99%E7%A8%8B%E6%96%B9%E6%A1%88/","excerpt":"今天,学习下Flutter中的国际化多语言配置方案.","text":"今天,学习下Flutter中的国际化多语言配置方案. 原教程地址,本猿按照该大神的方案成功实现了需求,在此记录一下.本来在网上搜索了很多教程博客,要么一堆截图下来,最后两个字成功,要么一片片的代码片段,最后两个字成功,我均试了下,全是取值为空的错误.可能本猿少了哪几步操作吧.所幸在朋友的帮助下,实现了该方案,也找到了该方案的原大佬.先行上图: 效果图: 此方案使用到了下面的两个库,一个国际化库,一个本地存储库(做持久化语言操作). Flutter的使用版本和代码结构如图: 下面是各文件的详细代码: 首先我们新建两个语言json文件,里面配置各自平台需要的文字,如下所示. i18n_en.json 1234567 &#123; &quot;register&quot;: &quot;register&quot;, &quot;mine&quot;: &quot;mine&quot;, &quot;home&quot;: &quot;home&quot;, &quot;zh&quot;: &quot;zh&quot;, &quot;en&quot;: &quot;en&quot;&#125; i18n_zh.json 123456 &#123; &quot;mine&quot;:&quot;我的&quot;, &quot;home&quot;:&quot;首页&quot;, &quot;zh&quot;:&quot;中文&quot;, &quot;en&quot;: &quot;英文&quot;&#125; 然后新建最重要的配置文件trahslations.dart trahslations.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105 import &#x27;dart:async&#x27;;import &#x27;dart:convert&#x27;;import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter/services.dart&#x27; show rootBundle;import &#x27;package:shared_preferences/shared_preferences.dart&#x27;;/// 自定义的Translations类class Translations &#123; Translations(Locale locale) &#123; this.locale = locale; _localizedValues = null; &#125; Locale locale; static Map&lt;dynamic, dynamic&gt; _localizedValues; static Translations of(BuildContext context)&#123; return Localizations.of&lt;Translations&gt;(context, Translations); &#125; String text(String key) &#123; if(_localizedValues==null) &#123; return &quot;no locale&quot;; &#125; return _localizedValues[key] ?? &#x27;** $key not found&#x27;; &#125; static Future&lt;Translations&gt; load(Locale locale) async &#123; SharedPreferences sp = await SharedPreferences.getInstance(); String lang = sp.get(&quot;lang&quot;); if(lang==null) &#123; lang = &quot;zh&quot;; &#125; print(&#x27;zh:$lang&#x27;); Translations translations = new Translations(locale); String jsonContent = await rootBundle.loadString(&quot;locale/i18n_$lang.json&quot;); _localizedValues = json.decode(jsonContent); applic.shouldReload = false; return translations; &#125; get currentLanguage =&gt; locale.languageCode;&#125;/// 自定义的localization代表，它的作用是在验证支持的语言前，初始化我们的自定义Translations类class TranslationsDelegate extends LocalizationsDelegate&lt;Translations&gt; &#123; const TranslationsDelegate(); /// 改这里是为了不硬编码支持的语言 @override bool isSupported(Locale locale) =&gt; applic.supportedLanguages.contains(locale.languageCode); @override Future&lt;Translations&gt; load(Locale locale)=&gt; Translations.load(locale); @override bool shouldReload(TranslationsDelegate old) =&gt; false;&#125;/// Delegate类的实现，每次选择一种新的语言时，强制初始化一个新的Translations类class SpecificLocalizationDelegate extends LocalizationsDelegate&lt;Translations&gt; &#123; final Locale overriddenLocale; const SpecificLocalizationDelegate(this.overriddenLocale); @override bool isSupported(Locale locale) =&gt; overriddenLocale != null; @override Future&lt;Translations&gt; load(Locale locale) =&gt; Translations.load(overriddenLocale); @override bool shouldReload(LocalizationsDelegate&lt;Translations&gt; old) &#123; return applic.shouldReload??false; &#125;&#125;typedef void LocaleChangeCallback(Locale locale);class APPLIC &#123; // 支持的语言列表 final List&lt;String&gt; supportedLanguages = [&#x27;en&#x27;,&#x27;zh&#x27;]; // 支持的Locales列表 Iterable&lt;Locale&gt; supportedLocales() =&gt; supportedLanguages.map&lt;Locale&gt;((lang) =&gt; new Locale(lang, &#x27;&#x27;)); // 当语言改变时调用的方法 LocaleChangeCallback onLocaleChanged; bool shouldReload; /// /// Internals /// static final APPLIC _applic = new APPLIC._internal(); factory APPLIC()&#123; return _applic; &#125; APPLIC._internal();&#125;APPLIC applic = new APPLIC(); 在里面,我们自定义一个Translations类,里面使用 Locale初始化语言配置,且默认给的汉语zh,可以添加自己支持的Locales列表,新建对应的json文件即可. 接下来需要在入口配置Delegate的相关代码: main.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:shared_preferences/shared_preferences.dart&#x27;;import &#x27;package:flutter_localizations/flutter_localizations.dart&#x27;;import &#x27;./utils/trahslations.dart&#x27;;import &#x27;./tabbar.dart&#x27;;void main() =&gt; runApp(MyApp());class MyApp extends StatefulWidget &#123; MyApp(&#123;Key key&#125;) : super(key: key); _MyAppState createState() =&gt; _MyAppState();&#125;class _MyAppState extends State&lt;MyApp&gt; &#123; SpecificLocalizationDelegate _localeOverrideDelegate; onLocaleChange(Locale locale) async &#123; print(&#x27;onLocaleChange--&#x27;); SharedPreferences sp = await SharedPreferences.getInstance(); await sp.setString(&quot;lang&quot;, locale.languageCode); setState(() &#123; _localeOverrideDelegate = new SpecificLocalizationDelegate(locale); &#125;); &#125; @override void initState() &#123; super.initState(); _localeOverrideDelegate = new SpecificLocalizationDelegate(null); applic.onLocaleChanged = onLocaleChange; &#125; @override Widget build(BuildContext context) &#123; return MaterialApp( debugShowCheckedModeBanner: false, title: &#x27;box chain&#x27;, theme: new ThemeData( backgroundColor: Color.fromRGBO(240, 240, 240, 1.0), ), home: MainPageWidget(), localizationsDelegates: [ _localeOverrideDelegate, const TranslationsDelegate(), GlobalMaterialLocalizations.delegate, GlobalWidgetsLocalizations.delegate, ], supportedLocales: applic.supportedLocales(), localeResolutionCallback: (deviceLocale, supportedLocales) &#123; if(deviceLocale.toString() == &#x27;en_CN&#x27;||deviceLocale.toString() == &#x27;zh_CN&#x27;)&#123; applic.shouldReload = true; applic.onLocaleChanged(new Locale(&#x27;zh&#x27;,&#x27;&#x27;)); &#125; else &#123; applic.shouldReload = true; applic.onLocaleChanged(new Locale(&#x27;en&#x27;,&#x27;&#x27;)); &#125; &#125; ); &#125;&#125; 这里,我们先引入本地化库,国际化库和刚才新建的trahslations.dart,然后在初始化方法里面初始化配置,在MaterialApp里面设置localizationsDelegates和supportedLocales,然后新建一个方法用于修改本地的Locale. 如上面代码中的onLocaleChange方法. 下面就是使用方法了: 使用语言 123456String _lang(String key) &#123; return Translations.of(context).text(key);&#125;_lang(&quot;zh&quot;) 修改语言 123applic.shouldReload = true; applic.onLocaleChanged(new Locale(&#x27;zh&#x27;, &#x27;&#x27;)); 完整代码: one_page.dart 1234567891011121314151617181920212223242526272829303132333435363738394041 import &#x27;package:flutter/material.dart&#x27;;import &#x27;../../utils/trahslations.dart&#x27;;class OnePage extends StatefulWidget &#123; @override _OnePageState createState() =&gt; _OnePageState();&#125;class _OnePageState extends State&lt;OnePage&gt; &#123; String _lang(String key) &#123; return Translations.of(context).text(key); &#125; Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(_lang(&quot;home&quot;)), ), body: Center( child: Column( children: &lt;Widget&gt;[ RaisedButton( child: Text(_lang(&quot;zh&quot;)), onPressed: () &#123; applic.shouldReload = true; applic.onLocaleChanged(new Locale(&#x27;zh&#x27;, &#x27;&#x27;)); &#125;, ), RaisedButton( child: Text(_lang(&quot;en&quot;)), onPressed: () &#123; applic.shouldReload = true; applic.onLocaleChanged(new Locale(&#x27;en&#x27;, &#x27;&#x27;)); &#125;, ), ], ), ), ); &#125;&#125; two_page.dart 123456789101112131415161718192021222324 import &#x27;package:flutter/material.dart&#x27;;import &#x27;../../utils/trahslations.dart&#x27;;class TwoPage extends StatefulWidget &#123; @override _TwoPageState createState() =&gt; _TwoPageState();&#125;class _TwoPageState extends State&lt;TwoPage&gt; &#123; String _lang(String key) &#123; return Translations.of(context).text(key); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: Text(_lang(&quot;mine&quot;))), body: Center( child: Text(&#x27;........&#x27;), ), ); &#125;&#125; 其中tabbar的代码中,引入类trahslations.dart,使用如下: 1234567891011import &#x27;./utils/trahslations.dart&#x27;; Text getTabTitle(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return new Text(Translations.of(context).text(appBarTitles[curIndex]), style: new TextStyle(fontSize: 14.0, color: const Color(0xff1296db))); &#125; else &#123; return new Text( Translations.of(context).text( appBarTitles[curIndex]), style: new TextStyle(fontSize: 14.0, color: const Color(0xff515151))); &#125; &#125; 完整代码: tabbar.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102 import &#x27;package:flutter/material.dart&#x27;;import &#x27;./utils/trahslations.dart&#x27;;import &#x27;./pages/one/one_page.dart&#x27;;import &#x27;./pages/two/two_page.dart&#x27;;class MainPageWidget extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new MainPageState(); &#125;&#125;class MainPageState extends State&lt;MainPageWidget&gt; &#123; int _tabIndex = 0; var tabImages; var appBarTitles = [&#x27;home&#x27;, &#x27;mine&#x27;]; /* * 存放二个页面，跟fragmentList一样 */ var _pageList; /* * 根据选择获得对应的normal或是press的icon */ Image getTabIcon(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return tabImages[curIndex][1]; &#125; return tabImages[curIndex][0]; &#125; /* * 获取bottomTab的颜色和文字 */ Text getTabTitle(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return new Text(Translations.of(context).text(appBarTitles[curIndex]), style: new TextStyle(fontSize: 14.0, color: const Color(0xff1296db))); &#125; else &#123; return new Text( Translations.of(context).text( appBarTitles[curIndex]), style: new TextStyle(fontSize: 14.0, color: const Color(0xff515151))); &#125; &#125; /* * 根据image路径获取图片 */ Image getTabImage(path) &#123; return new Image.asset(path, width: 24.0, height: 24.0); &#125; void initData() &#123; /* * 初始化选中和未选中的icon */ tabImages = [ [ getTabImage(&#x27;images/tab/home.png&#x27;), getTabImage(&#x27;images/tab/home_active.png&#x27;) ], [ getTabImage(&#x27;images/tab/mine.png&#x27;), getTabImage(&#x27;images/tab/mine_active.png&#x27;) ], ]; /* * 子界面 */ _pageList = [ new OnePage(), new TwoPage(), ]; &#125; @override Widget build(BuildContext context) &#123; //初始化数据 initData(); return Scaffold( body: _pageList[_tabIndex], bottomNavigationBar: new BottomNavigationBar( items: &lt;BottomNavigationBarItem&gt;[ new BottomNavigationBarItem( icon: getTabIcon(0), title: getTabTitle(0)), new BottomNavigationBarItem( icon: getTabIcon(1), title: getTabTitle(1)), ], type: BottomNavigationBarType.fixed, //默认选中首页 currentIndex: _tabIndex, iconSize: 24.0, //点击事件 onTap: (index) &#123; setState(() &#123; _tabIndex = index; &#125;); &#125;, ), ); &#125;&#125; 其中,Xcode的多语言也最好跟着配置下文件,如图: 以上就是全部代码了.如果不明白的下面有源码地址,可以去那里看看. 源码地址","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~Android原生工程中添加Flutter模块","slug":"移动端学习/Flutter~Android原生工程中添加Flutter模块","date":"2019-05-30T16:00:00.000Z","updated":"2023-12-03T05:14:36.416Z","comments":true,"path":"2019/05/31/移动端学习/Flutter~Android原生工程中添加Flutter模块/","link":"","permalink":"https://zhoushaoting.com/2019/05/31/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~Android%E5%8E%9F%E7%94%9F%E5%B7%A5%E7%A8%8B%E4%B8%AD%E6%B7%BB%E5%8A%A0Flutter%E6%A8%A1%E5%9D%97/","excerpt":"今天,学习下,如何在Android原生工程中集成Flutter模块","text":"今天,学习下,如何在Android原生工程中集成Flutter模块 ok,首先我们使用Android Studio新建一个Android原生工程,先放着.然后通过flutter create -t module flutter_module新建一个flutter的模块,这里名字随意.以flutter_module为例. 使用Android Studio打开Android原生工程,在settings.gradle中添加如下代码: 123456 setBinding(new Binding([gradle: this])) // newevaluate(new File( // new settingsDir.parentFile, // new &#x27;flutter_module/.android/include_flutter.groovy&#x27; // new)) 注意路径的正确性.其中这个Binding会报红,可以无视,不影响运行.如图所示: 在项目下的build.grade中的dependencies中添加flutter模块的引入: 12implementation project(&#x27;:flutter&#x27;) 如图所示: build下工程,如果出现报错信息:Error:Invoke-customs are only supported starting with Android 0 (--min-api 26) 的话,需要添加: 12345compileOptions &#123; sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 &#125; 如图所示: OK.Android原生工程集成flutter完毕.接下来就是演示代码了. 首先在activity_mian.xml中添加 1234567&lt;Button android:id=&quot;@+id/jump&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Go to&quot; /&gt; 然后在MainActivity.java中添加调用代码.文件代码如下: 123456789101112131415161718192021222324252627282930313233 package com.example.androidaddflutter;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.FrameLayout;import io.flutter.facade.Flutter;public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); findViewById(R.id.jump).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; View flutterView = Flutter.createView( MainActivity.this, getLifecycle(), &quot;android 传给Flutter的值&quot; ); FrameLayout.LayoutParams layout = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT); layout.leftMargin = 0; layout.topMargin = 200; addContentView(flutterView, layout); &#125; &#125;); &#125;&#125; 其中,可以向flutter传一个参数过去.在flutter_module模块中,通过window.defaultRouteName的方式即可获取到Android原生传过去的值.其中需要引入 import &#39;dart:ui&#39;; 源码 效果图:","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~iOS原生工程中添加Flutter模块","slug":"移动端学习/Flutter~iOS原生工程中添加Flutter模块","date":"2019-05-28T16:00:00.000Z","updated":"2023-12-03T05:27:38.369Z","comments":true,"path":"2019/05/29/移动端学习/Flutter~iOS原生工程中添加Flutter模块/","link":"","permalink":"https://zhoushaoting.com/2019/05/29/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~iOS%E5%8E%9F%E7%94%9F%E5%B7%A5%E7%A8%8B%E4%B8%AD%E6%B7%BB%E5%8A%A0Flutter%E6%A8%A1%E5%9D%97/","excerpt":"今天,学习下,如何在iOS原生工程中集成Flutter模块","text":"今天,学习下,如何在iOS原生工程中集成Flutter模块 ok,首先我们使用Xcode新建一个iOS原生工程,先放着.然后通过flutter create -t module flutter_module新建一个flutter的模块,这里名字随意.以flutter_module为例. 然后在iOS原生工程中,使用pod导入flutter:首先,终端上先通过pod init为原生工程创建Podfile文件. 然后在该Podfile文件中添加以下: 123 flutter_application_path = &#x27;../flutter_module/&#x27;eval(File.read(File.join(flutter_application_path, &#x27;.ios&#x27;, &#x27;Flutter&#x27;, &#x27;podhelper.rb&#x27;)), binding) 注意路径正确. 终端 cd到iOS原生项目根目录下. 执行pod install 通过点击XXXX.xcworkspace文件打开Xcode.找到”TAGGETS”-&gt;”Build Settings”-&gt;”Enable Bitcode”首先把项目bitcode关闭. 找到”TAGGETS”-&gt;”Build Settings”-&gt;”Enable Phases”.点击+号,新建一个”New Run Script Phase”.其中加入: 123 &quot;$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh&quot; build&quot;$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh&quot; embed 然后,把它移动Target Dependencied下面. ok.Xcode build下,正确情况下是工程好的.集成步骤完毕. 然后我们在 ViewController.m中通过presentViewController的方式跳至flutter模块即可.首先,引入 123#import &lt;Flutter/Flutter.h&gt;#import &lt;FlutterPluginRegistrant/GeneratedPluginRegistrant.h&gt; 其中,可以为flutter模块传个参数,通过setInitialRoute.该文件完整代码如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344//// ViewController.m// iOSAddFlutter//// Created by Shaoting Zhou on 2019/5/29.// Copyright © 2019 Shaoting Zhou. All rights reserved.//#import &quot;ViewController.h&quot;#import &lt;Flutter/Flutter.h&gt;#import &lt;FlutterPluginRegistrant/GeneratedPluginRegistrant.h&gt;@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; UIButton *button = [[UIButton alloc]init]; [button setTitle:@&quot;跳至Flutter模块&quot; forState:UIControlStateNormal]; button.backgroundColor=[UIColor redColor]; button.frame = CGRectMake(50, 50, 200, 100); [button setTitleColor:[UIColor redColor] forState:UIControlStateHighlighted]; [button addTarget:self action:@selector(buttonPrint) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button]; // Do any additional setup after loading the view.&#125;- (void)buttonPrint&#123; FlutterViewController * flutterVC = [[FlutterViewController alloc]init]; [flutterVC setInitialRoute:@&quot;我是Native传给FLutter模块的&quot;]; [self presentViewController:flutterVC animated:true completion:nil];&#125;@end 在flutter_module模块中,通过window.defaultRouteName的方式即可获取到iOS原生传过去的值.其中需要引入 import &#39;dart:ui&#39;; 源码 效果图:","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"React-Native使用自定义字体","slug":"移动端学习/React-Native使用自定义字体","date":"2019-05-13T16:00:00.000Z","updated":"2023-12-03T06:55:09.441Z","comments":true,"path":"2019/05/14/移动端学习/React-Native使用自定义字体/","link":"","permalink":"https://zhoushaoting.com/2019/05/14/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/React-Native%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/","excerpt":"今天,学习一下在React-Native中使用自定义字体.使用版本是 &quot;react-native&quot;: &quot;0.59.8&quot;","text":"今天,学习一下在React-Native中使用自定义字体.使用版本是 &quot;react-native&quot;: &quot;0.59.8&quot; 首先先在项目根目录新建一个文件夹用来存放XXXX.ttf字体文件,我一般喜欢在最外面加一个assets文件夹,里面再加一个fonts文件夹,之后再放置字体文件XXX.ttf.然后,在package.json中加入该文件路径.如 12345678910&#123; .... &quot;rnpm&quot;: &#123; &quot;assets&quot;: [ &quot;./assets/fonts&quot; ] &#125; &#125; 如图:之后,终端cd 到项目根目录,然后运行react-native link.完成之后打开Xcode可以看到生成了Resources文件夹下的xxx.ttf字体文件,同时在项目的info.plist中多了Fonts provided by application这个数组,其中就有前面的xxx.ttf文件.如图: OK.字体文件已经配置完毕,接下来使用即可.在iOS平台上不能直接使用字体文件名,需要使用familyNames 才可以.我们先获取一下该字体文件的的familyNames .在AppDelegate.m中,使用 123456789for(NSString *fontfamilyname in [UIFont familyNames]) &#123; NSLog(@&quot;family:&#x27;%@&#x27;&quot;,fontfamilyname); for(NSString *fontName in [UIFont fontNamesForFamilyName:fontfamilyname]) &#123; NSLog(@&quot;\\tfont:&#x27;%@&#x27;&quot;,fontName); &#125; NSLog(@&quot;-------------&quot;);&#125; 其中 1NSLog(@&quot;family:&#x27;%@&#x27;&quot;,fontfamilyname); 打印的就是familyNames .android直接使用字体文件名xxx即可.如图:效果如图(部分字体只能使用真机才能看出来): 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"react-native-router-flux初步认识","slug":"移动端学习/react-native-router-flux初步认识","date":"2019-04-22T07:56:58.000Z","updated":"2023-12-03T06:53:42.239Z","comments":true,"path":"2019/04/22/移动端学习/react-native-router-flux初步认识/","link":"","permalink":"https://zhoushaoting.com/2019/04/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/react-native-router-flux%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/","excerpt":"今天初步了解下 react-native-router-flux 这个三方导航库,基于react-native0.55.4,react-native-router-flux^4.0.0-beta.31","text":"今天初步了解下 react-native-router-flux 这个三方导航库,基于react-native0.55.4,react-native-router-flux^4.0.0-beta.31 效果图:使用方法请参考:参考1参考2我这里不详细说明了,贴出关键代码一看便知.代码基本结构如下: App.js: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123;Component&#125; from &#x27;react&#x27;;import &#123; Platform, StyleSheet, Text, View, Image&#125; from &#x27;react-native&#x27;;import &#123; Navigation, Scene, Router, Modal&#125; from &#x27;react-native-router-flux&#x27;;import IOS from &#x27;./src/ios&#x27;;import Android from &#x27;./src/android&#x27;import Web from &#x27;./src/web&#x27;import TabIcon from &#x27;./src/TabIcon&#x27;type Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;Router&gt; &lt;Modal&gt; &lt;Scene key=&quot;root&quot; tabBarPosition=&quot;bottom&quot; tabs&gt; &lt;Scene hideBackImage key=&quot;IOS&quot; title=&quot;苹果&quot; component=&#123;IOS&#125; icon=&#123;TabIcon&#125; Image=&#123;require(&#x27;./src/image/ios.png&#x27;)&#125; selectedImage=&#123;require(&#x27;./src/image/ios_active.png&#x27;)&#125; /&gt; &lt;Scene hideBackImage key=&quot;Web&quot; component=&#123;Web&#125; title=&quot;web&quot; icon=&#123;TabIcon&#125; Image=&#123;require(&#x27;./src/image/web.png&#x27;)&#125; showLabel = &#123;false&#125; selectedImage=&#123;require(&#x27;./src/image/web_active.png&#x27;)&#125; /&gt; &lt;Scene hideBackImage key=&quot;Android&quot; component=&#123;Android&#125; title=&quot;安卓&quot; icon=&#123;TabIcon&#125; Image=&#123;require(&#x27;./src/image/android.png&#x27;)&#125; hideNavBar=&#123;true&#125; //隐藏导航栏 selectedImage=&#123;require(&#x27;./src/image/android_active.png&#x27;)&#125; /&gt; &lt;/Scene&gt; &lt;/Modal&gt; &lt;/Router&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; tabbarContainer: &#123; flex: 1, backgroundColor: &quot;#f6f6f6&quot;, overflow: &#x27;visible&#x27; &#125;, tabIconItem: &#123; flex: 1, height: 56, flexDirection: &#x27;column&#x27;, alignItems: &#x27;center&#x27;, justifyContent: &#x27;center&#x27;, paddingLeft: 8, paddingRight: 8, backgroundColor: &#x27;transparent&#x27;, overflow: &#x27;visible&#x27; &#125;, tabIconImage: &#123; width: 60, height: 60, overflow: &#x27;visible&#x27; &#125;,&#125;); TabIcon.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344import React, &#123;PropTypes, Component&#125; from &#x27;react&#x27;import &#123;Text, View, Image, StyleSheet&#125; from &#x27;react-native&#x27;const tabIconStyles = StyleSheet.create(&#123; tabIconItem: &#123; flex: 1, height: 56, flexDirection: &#x27;column&#x27;, alignItems: &#x27;center&#x27;, justifyContent: &#x27;center&#x27;, paddingLeft: 8, paddingRight: 8, backgroundColor: &#x27;transparent&#x27;, &#125;, tabIconImage: &#123; width: 24, height: 24 &#125;, titleText: &#123; marginTop: 5, textAlign: &#x27;center&#x27;, fontSize: 11 &#125;, titleTextDefaultColor: &#123; color: &#x27;black&#x27; &#125;, titleTextSelectColor: &#123; color: &#x27;red&#x27; &#125;, tabItemRow: &#123; flexDirection: &#x27;row&#x27; &#125;,&#125;);export default TabIcon=(props)=&gt;&#123; return ( &lt;View style=&#123;tabIconStyles.tabIconItem&#125;&gt; &lt;Image style=&#123;tabIconStyles.tabIconImage&#125; source=&#123;props.focused ? props.selectedImage : props.Image&#125;/&gt; &lt;Text&gt;&#123;props.tabTitle&#125;&lt;/Text&gt; &lt;/View&gt; );&#125;; 而至于ios.js,web.js,android.js只是基本的模板界面 123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; Platform, StyleSheet, Text, View&#125; from &#x27;react-native&#x27;;type Props = &#123;&#125;;export default class IOS extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.welcome&#125;&gt; 首页 &lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, instructions: &#123; textAlign: &#x27;center&#x27;, color: &#x27;#333333&#x27;, marginBottom: 5, &#125;,&#125;); 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Android和React-Native的简单交互","slug":"移动端学习/Android和React-Native的简单交互","date":"2019-04-22T07:53:06.000Z","updated":"2023-12-03T05:12:35.409Z","comments":true,"path":"2019/04/22/移动端学习/Android和React-Native的简单交互/","link":"","permalink":"https://zhoushaoting.com/2019/04/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Android%E5%92%8CReact-Native%E7%9A%84%E7%AE%80%E5%8D%95%E4%BA%A4%E4%BA%92/","excerpt":"首先在Android原生中.新建class文件TransMissonMoudle:","text":"首先在Android原生中.新建class文件TransMissonMoudle: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109/** * Created by shaotingzhou on 2018/3/7. */package com.androidrn.RN;import com.facebook.react.bridge.Callback;import com.facebook.react.bridge.Promise;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.bridge.ReactContext;import com.facebook.react.bridge.ReactContextBaseJavaModule;import com.facebook.react.bridge.ReactMethod;import com.facebook.react.bridge.WritableMap;import com.facebook.react.bridge.WritableNativeMap;import com.facebook.react.modules.core.DeviceEventManagerModule;import java.text.SimpleDateFormat;import java.util.Date;import javax.annotation.Nullable;public class TransMissonMoudle extends ReactContextBaseJavaModule &#123; private static final String REACT_CLASS = &quot;TransMissonMoudle&quot;; private ReactContext mReactContext; public TransMissonMoudle(ReactApplicationContext reactContext) &#123; super(reactContext); this.mReactContext = reactContext; &#125; @Override public String getName() &#123; return REACT_CLASS; &#125; //延迟0.1秒获取时间。 @ReactMethod public void getTime() &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; String time = getTimeMillis(); WritableMap writableMap = new WritableNativeMap(); writableMap.putString(&quot;key&quot;, time); sendTransMisson(mReactContext, &quot;EventName&quot;, writableMap); &#125; &#125;).start(); &#125; private String getTimeMillis() &#123; SimpleDateFormat formatDate = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;); Date date = new Date(System.currentTimeMillis()); String time = formatDate.format(date); return time; &#125; /** * RCTDeviceEventEmitter方式 * * @param reactContext * @param eventName 事件名 * @param params 传惨 */ public void sendTransMisson(ReactContext reactContext, String eventName, @Nullable WritableMap params) &#123; reactContext .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class) .emit(eventName, params); &#125; /** * CallBack方式 * * @param name * @param callback */ @ReactMethod public void callBackTime(String name, Callback callback) &#123; callback.invoke(getTimeMillis()); &#125; /** * Promise方式 * @param name * @param promise */ @ReactMethod public void sendPromiseTime(String name, Promise promise) &#123; WritableMap writableMap=new WritableNativeMap(); writableMap.putString(&quot;age&quot;,&quot;20&quot;); writableMap.putString(&quot;time&quot;,getTimeMillis()); promise.resolve(writableMap); &#125;&#125; 再建class文件TransMissonPackage: 123456789101112131415161718192021222324252627282930313233343536373839package com.androidrn.RN;import com.facebook.react.ReactPackage;import com.facebook.react.bridge.JavaScriptModule;import com.facebook.react.bridge.NativeModule;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.uimanager.ViewManager;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** * Created by shaotingzhou on 2018/3/7. */public class TransMissonPackage implements ReactPackage &#123; @Override public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123; List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;(); modules.add(new TransMissonMoudle(reactContext));//摇一摇 return modules; &#125;// @Override// public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;// return Collections.emptyList();// &#125; @Override public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123; List&lt;ViewManager&gt; viewManagerList=new ArrayList&lt;&gt;();// viewManagerList.add(new PTRRefreshManager()); return viewManagerList; &#125;&#125; 接着在MainApplication里引入TransMissonPackage,加入包.如 import com.androidrn.RN.TransMissonPackage; new TransMissonPackage() 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.androidrn;import android.app.Application;import com.androidrn.RN.TransMissonPackage;import com.facebook.react.ReactApplication;import com.facebook.react.ReactNativeHost;import com.facebook.react.ReactPackage;import com.facebook.react.shell.MainReactPackage;import com.facebook.soloader.SoLoader;import java.util.Arrays;import java.util.List;public class MainApplication extends Application implements ReactApplication &#123; private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123; @Override public boolean getUseDeveloperSupport() &#123; return BuildConfig.DEBUG; &#125; @Override protected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new TransMissonPackage() ); &#125; @Override protected String getJSMainModuleName() &#123; return &quot;index&quot;; &#125; &#125;; @Override public ReactNativeHost getReactNativeHost() &#123; return mReactNativeHost; &#125; @Override public void onCreate() &#123; super.onCreate(); SoLoader.init(this, /* native exopackage */ false); &#125;&#125; 我的文件放置情况如图: 然后只需要在RN这边: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123;Component&#125; from &#x27;react&#x27;;import &#123; AppRegistry, StyleSheet, Text, View, DeviceEventEmitter, NativeModules, ToastAndroid, Platform&#125; from &#x27;react-native&#x27;;const instructions = Platform.select(&#123; ios: &#x27;Press Cmd+R to reload,\\n&#x27; + &#x27;Cmd+D or shake for dev menu&#x27;, android: &#x27;Double tap R on your keyboard to reload,\\n&#x27; + &#x27;Shake or press menu button for dev menu&#x27;,&#125;);type Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; componentWillMount() &#123; DeviceEventEmitter.addListener(&#x27;EventName&#x27;, function (msg) &#123; console.log(&#x27;DeviceEventEmitter收到消息&#x27;+msg); alert(&#x27;DeviceEventEmitter收到消息&#x27;+ msg.key) &#125;); &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getDeviceEventEmitterTime.bind(this)&#125; &gt; RCTDeviceEventEmitter获取时间 &lt;/Text&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getCallBackTime.bind(this)&#125; &gt; CallBack获取时间 &lt;/Text&gt; &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.getPromiseTime.bind(this)&#125; &gt; Promise获取时间 &lt;/Text&gt; &lt;/View&gt; ); &#125; getDeviceEventEmitterTime() &#123; NativeModules.TransMissonMoudle.getTime(); &#125; getCallBackTime() &#123; NativeModules.TransMissonMoudle.callBackTime(&quot;Allure&quot;, (msg) =&gt; &#123; console.log(&#x27;callBack:---&#x27; + msg); alert(&#x27;callBack:---&#x27;+msg) &#125; ); &#125; getPromiseTime() &#123; NativeModules.TransMissonMoudle.sendPromiseTime(&quot;Allure&quot;).then(msg=&gt; &#123; console.log(&quot;年龄:&quot; + msg.age + &quot;/n&quot; + &quot;时间:&quot; + msg.time); alert(&quot;年龄&quot; + msg.age + &quot;时间&quot; + msg.time) this.setState(&#123; age: msg.age, time: msg.time, &#125;) &#125;).catch(error=&gt; &#123; console.log(&#x27;错误&#x27; + error); &#125;); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, instructions: &#123; textAlign: &#x27;center&#x27;, color: &#x27;#333333&#x27;, marginBottom: 5, &#125;,&#125;); 源码 效果图:","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"React-Native与Web的基本交互","slug":"移动端学习/React-Native与Web的基本交互","date":"2019-04-21T16:00:00.000Z","updated":"2023-12-03T06:55:36.970Z","comments":true,"path":"2019/04/22/移动端学习/React-Native与Web的基本交互/","link":"","permalink":"https://zhoushaoting.com/2019/04/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/React-Native%E4%B8%8EWeb%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BA%A4%E4%BA%92/","excerpt":"今天学习下React Native与Web端的基本交互,暂时涉及到RN向Web端传值,Web向RN端传值,因为现在转为Flutter开发,所以这一块暂时只能涉及到这里.其中的Web端采用本地html页面.","text":"今天学习下React Native与Web端的基本交互,暂时涉及到RN向Web端传值,Web向RN端传值,因为现在转为Flutter开发,所以这一块暂时只能涉及到这里.其中的Web端采用本地html页面. 本文设计的交互主要靠webView的onMessage和postMessage.在RN端发送数据给Web,主要依靠调用webView的potsMessage方法实现,如: 1this.refs.webview.postMessage(this.data); 接收Web端的数据靠的是WebView的onMessage方法 123onMessage=&#123;(e) =&gt; &#123; this.handleMessage(e) &#125;&#125; 下面是完整代码: App.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273import React from &#x27;react&#x27;;import &#123; View, Text, StyleSheet, WebView&#125; from &#x27;react-native&#x27;;export default class Web extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; webViewData: &#x27;&#x27; &#125; this.data = &#x27;我是RN传给web端的参数&#x27;; &#125; sendMessage() &#123; this.refs.webview.postMessage(this.data); &#125; handleMessage(e) &#123; this.setState(&#123;webViewData: e.nativeEvent.data&#125;); &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &#123;/*web*/&#125; &lt;View style=&#123;&#123;width: 375, height: 220&#125;&#125;&gt; &lt;WebView ref=&#123;&#x27;webview&#x27;&#125; source=&#123;require(&#x27;./test.html&#x27;)&#125; style=&#123;&#123;width: 375, height: 220&#125;&#125; onMessage=&#123;(e) =&gt; &#123; this.handleMessage(e) &#125;&#125; /&gt; &lt;/View&gt; &#123;/*RN*/&#125; &lt;Text&gt;来自webview的数据 : &#123;this.state.webViewData&#125;&lt;/Text&gt; &lt;Text onPress=&#123;() =&gt; &#123; this.sendMessage() &#125;&#125;&gt; 发送数据到WebView &lt;/Text&gt; &lt;/View&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, marginTop: 22, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;,&#125;); 而在html里面,需要监听数据,通过: 123document.addEventListener(&#x27;message&#x27;, function (e) &#123; document.getElementById(&#x27;data&#x27;).textContent = e.data; &#125;); 发送数据通过: 12window.postMessage(data); 完整代码如下: test.html1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;p style=&quot;text-align: center&quot;&gt; &lt;button id=&quot;button&quot;&gt;发送数据到react native&lt;/button&gt;&lt;p style=&quot;text-align: center&quot;&gt;收到react native发送的数据: &lt;span id=&quot;data&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/p&gt;&lt;script&gt; var data = 0; function sendData(data) &#123; if (window.originalPostMessage) &#123; window.postMessage(data); &#125; else &#123; throw Error(&#x27;postMessage接口还未注入&#x27;); &#125; &#125; window.onload = function () &#123; document.addEventListener(&#x27;message&#x27;, function (e) &#123; document.getElementById(&#x27;data&#x27;).textContent = e.data; &#125;); document.getElementById(&#x27;button&#x27;).onclick = function () &#123; data += 11; sendData(data); &#125; &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 效果图: 源码 另外:在未来的版本中,可能会移除自带的webView,改用在外部库里引用的方式.同时,在三方库中,也有webView-bridge库使用,cookie库使用.react-native-webviewwebView-bridgecookie","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter路由管理库fluro学习","slug":"移动端学习/Flutter路由管理库fluro学习","date":"2019-03-29T16:00:00.000Z","updated":"2023-12-03T06:22:22.391Z","comments":true,"path":"2019/03/30/移动端学习/Flutter路由管理库fluro学习/","link":"","permalink":"https://zhoushaoting.com/2019/03/30/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%BA%93fluro%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter中路由管理库 fluro使用版本是: fluro: &quot;^1.4.0&quot;.","text":"今天学习下Flutter中路由管理库 fluro使用版本是: fluro: &quot;^1.4.0&quot;. fluro 代码结构:首先,新建文件夹存放fluro的关键代码: application.dartapplication.dart,该文件主要是生成一个静态文件,方便后面直接调用初始化的Router对象 12345import &#x27;package:fluro/fluro.dart&#x27;;class Application &#123; static Router router;&#125; router_handler.dartrouter_handler.dart文件,主要负责路由跳转,从代码可以看出,有两个handler,其中一个需要带一个参数paramsId 12345678910111213141516import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:fluro/fluro.dart&#x27;;import &#x27;../pages/detailspage.dart&#x27;;import &#x27;../pages/otherpaage.dart&#x27;;Handler detailsHandle = Handler( handlerFunc: (BuildContext context, Map&lt;String, List&lt;String&gt;&gt; params) &#123; String paramsId = params[&#x27;id&#x27;].first; return DetailsPage(paramsId);&#125;);Handler otherHandle = Handler( handlerFunc: (BuildContext context, Map&lt;String, List&lt;String&gt;&gt; params) &#123; return OtherPage();&#125;); routers.dartrouters.dart负责将上面创建好的handle注册进fluro. 12345678910111213141516171819import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:fluro/fluro.dart&#x27;;import &#x27;./router_handler.dart&#x27;;class Routers&#123; static String root = &#x27;/&#x27;; static String detailsPage = &#x27;./detail&#x27;; static String otherPage = &#x27;./other&#x27;; static void configureRouters(Router router)&#123; router.notFoundHandler = new Handler( handlerFunc: (BuildContext context,Map&lt;String,List&lt;String&gt;&gt; params)&#123; print(&#x27;错误路由&#x27;); &#125; ); router.define(detailsPage,handler: detailsHandle); router.define(otherPage,handler: otherHandle); &#125;&#125; 然后需要在项目入口处,配置自定义路由onGenerateRoute main.dart1234567891011121314151617181920212223242526import &#x27;package:flutter/material.dart&#x27;;import &#x27;tabbar.dart&#x27;;import &#x27;package:fluro/fluro.dart&#x27;;import &#x27;./routers/application.dart&#x27;;import &#x27;./routers/routers.dart&#x27;;void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; final router =Router(); Routers.configureRouters(router); Application.router = router; return MaterialApp( title: &#x27;Flutter Demo&#x27;, onGenerateRoute: Application.router.generator, theme: ThemeData( primarySwatch: Colors.blue, ), home: Tabbar(), ); &#125;&#125; 配置好后可以在需要跳转的方法跳转,同时可以配置push方向等.如: 12Application.router.navigateTo(context, &quot;./detail?id=$&#123;dataList[index]&#125;&quot;, transition: TransitionType.inFromLeft); 下面是页面中的所有代码: homepage.dart12345678910111213141516171819202122232425262728293031323334353637383940414243444546import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:fluro/fluro.dart&#x27;;import &#x27;../routers/application.dart&#x27;;class Homepage extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: Text(&#x27;HomePage&#x27;)), body: HomeContainer(), ); &#125;&#125;class HomeContainer extends StatefulWidget &#123; @override _HomeContainerState createState() =&gt; _HomeContainerState();&#125;class _HomeContainerState extends State&lt;HomeContainer&gt; &#123; List&lt;String&gt; dataList = []; @override void initState() &#123; super.initState(); for (var i = 0; i &lt; 100; i++) &#123; dataList.add(i.toString()); &#125; &#125; @override Widget build(BuildContext context) &#123; return ListView.builder( itemCount: dataList.length, itemBuilder: (context, index) &#123; return ListTile( onTap: ()&#123; Application.router.navigateTo(context, &quot;./detail?id=$&#123;dataList[index]&#125;&quot;, transition: TransitionType.inFromLeft); &#125;, title: Text(dataList[index] + &#x27;👌&#x27;), ); &#125;, ); &#125;&#125; Showpage.dart12345678910111213141516171819202122import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:fluro/fluro.dart&#x27;;import &#x27;../routers/application.dart&#x27;;class Showpage extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: Text(&#x27;SHOW&#x27;)), body: Center( child: RaisedButton( onPressed: ()&#123; Application.router.navigateTo(context, &quot;./other&quot;, transition: TransitionType.nativeModal); &#125;, child: Text(&#x27;跳转&#x27;), ), ), ); &#125;&#125; minepage.dart1234567891011121314import &#x27;package:flutter/material.dart&#x27;;class Minepage extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: Text(&#x27;Minepage&#x27;)), body: Center( child: Text(&#x27;Minepage&#x27;), ), ); &#125;&#125; 效果如图: 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~flutter_bloc库学习","slug":"移动端学习/Flutter~flutter_bloc库学习","date":"2019-03-06T16:00:00.000Z","updated":"2023-12-03T05:17:55.432Z","comments":true,"path":"2019/03/07/移动端学习/Flutter~flutter_bloc库学习/","link":"","permalink":"https://zhoushaoting.com/2019/03/07/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~flutter_bloc%E5%BA%93%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter中state管理库 bloc下的flutter_bloc使用版本是:flutter_bloc 0.7.0.","text":"今天学习下Flutter中state管理库 bloc下的flutter_bloc使用版本是:flutter_bloc 0.7.0. blocflutter_bloc 代码结构: main.dart123456789101112131415161718192021222324252627import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_bloc_demo/top_screen.dart&#x27;;void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: ThemeData( // This is the theme of your application. // // Try running your application with &quot;flutter run&quot;. You&#x27;ll see the // application has a blue toolbar. Then, without quitting the app, try // changing the primarySwatch below to Colors.green and then invoke // &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;, // or simply save your changes to &quot;hot reload&quot; in a Flutter IDE). // Notice that the counter didn&#x27;t reset back to zero; the application // is not restarted. primarySwatch: Colors.blue, ), home: TopScreen() ); &#125;&#125; top_screen.dart12345678910111213141516171819202122232425import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_bloc_demo/bloc/counter_bloc.dart&#x27;;import &#x27;package:flutter_bloc/flutter_bloc.dart&#x27;;import &#x27;tabbar.dart&#x27;;class TopScreen extends StatefulWidget &#123; @override _TopScreenState createState() =&gt; _TopScreenState();&#125;class _TopScreenState extends State&lt;TopScreen&gt; &#123; final CounterBloc _counterBloc = CounterBloc(); @override Widget build(BuildContext context) &#123; return MaterialApp( title: &#x27;Flutter Demo&#x27;, home: BlocProvider&lt;CounterBloc&gt;( bloc: _counterBloc, child: Tabbar(), ), ); &#125;&#125; tabbar.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_bloc_demo/pages/one.dart&#x27;;import &#x27;package:flutter_bloc_demo/pages/Two.dart&#x27;; class Tabbar extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new MaterialApp( debugShowCheckedModeBanner: false, home: new MainPageWidget()); &#125;&#125; class MainPageWidget extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new MainPageState(); &#125;&#125; class MainPageState extends State&lt;MainPageWidget&gt; &#123; int _tabIndex = 0; var tabImages; var appBarTitles = [&#x27;壹&#x27;, &#x27;贰&#x27;,]; /* * 存放而个页面，跟fragmentList一样 */ var _pageList; /* * 根据选择获得对应的normal或是press的icon */ Image getTabIcon(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return tabImages[curIndex][1]; &#125; return tabImages[curIndex][0]; &#125; /* * 获取bottomTab的颜色和文字 */ Text getTabTitle(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: const Color(0xff1296db))); &#125; else &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: const Color(0xff515151))); &#125; &#125; /* * 根据image路径获取图片 */ Image getTabImage(path) &#123; return new Image.asset(path, width: 24.0, height: 24.0); &#125; void initData() &#123; /* * 初始化选中和未选中的icon */ tabImages = [ [getTabImage(&#x27;images/tab/one.png&#x27;), getTabImage(&#x27;images/tab/one_active.png&#x27;)], [getTabImage(&#x27;images/tab/two.png&#x27;), getTabImage(&#x27;images/tab/two_active.png&#x27;)], ]; /* * 2个子界面 */ _pageList = [ new One(), new Two(), ]; &#125; @override Widget build(BuildContext context) &#123; //初始化数据 initData(); return Scaffold( body: _pageList[_tabIndex], bottomNavigationBar: new BottomNavigationBar( items: &lt;BottomNavigationBarItem&gt;[ new BottomNavigationBarItem( icon: getTabIcon(0), title: getTabTitle(0)), new BottomNavigationBarItem( icon: getTabIcon(1), title: getTabTitle(1)), ], type: BottomNavigationBarType.fixed, //默认选中首页 currentIndex: _tabIndex, iconSize: 24.0, //点击事件 onTap: (index) &#123; setState(() &#123; _tabIndex = index; &#125;); &#125;, )); &#125;&#125; one.dart12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_bloc_demo/bloc/counter_bloc.dart&#x27;;import &#x27;package:flutter_bloc/flutter_bloc.dart&#x27;;class One extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; final CounterBloc _counterBloc = BlocProvider.of&lt;CounterBloc&gt;(context); return Scaffold( appBar: AppBar(title: Text(&#x27;One&#x27;)), body: BlocBuilder&lt;CounterEvent, int&gt;( bloc: _counterBloc, builder: (BuildContext context, int count) &#123; return Center( child: Text( &#x27;$count&#x27;, style: TextStyle(fontSize: 24.0), ), ); &#125;, ), floatingActionButton: Column( crossAxisAlignment: CrossAxisAlignment.end, mainAxisAlignment: MainAxisAlignment.end, children: &lt;Widget&gt;[ Padding( padding: EdgeInsets.symmetric(vertical: 5.0), child: FloatingActionButton( child: Icon(Icons.add), onPressed: () &#123; _counterBloc.dispatch(CounterEvent.increment); &#125;, ), ), Padding( padding: EdgeInsets.symmetric(vertical: 5.0), child: FloatingActionButton( child: Icon(Icons.remove), onPressed: () &#123; _counterBloc.dispatch(CounterEvent.decrement); &#125;, ), ), ], ), ); &#125;&#125; two.dart12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_bloc_demo/bloc/counter_bloc.dart&#x27;;import &#x27;package:flutter_bloc/flutter_bloc.dart&#x27;;class Two extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; final CounterBloc _counterBloc = BlocProvider.of&lt;CounterBloc&gt;(context); return Scaffold( appBar: AppBar(title: Text(&#x27;Two&#x27;)), body: BlocBuilder&lt;CounterEvent, int&gt;( bloc: _counterBloc, builder: (BuildContext context, int count) &#123; return Center( child: Text( &#x27;$count&#x27;, style: TextStyle(fontSize: 24.0), ), ); &#125;, ), floatingActionButton: Column( crossAxisAlignment: CrossAxisAlignment.end, mainAxisAlignment: MainAxisAlignment.end, children: &lt;Widget&gt;[ Padding( padding: EdgeInsets.symmetric(vertical: 5.0), child: FloatingActionButton( child: Icon(Icons.remove), onPressed: () &#123; _counterBloc.dispatch(CounterEvent.decrement); &#125;, ), ), Padding( padding: EdgeInsets.symmetric(vertical: 5.0), child: FloatingActionButton( child: Icon(Icons.add), onPressed: () &#123; _counterBloc.dispatch(CounterEvent.increment); &#125;, ), ), ], ), ); &#125;&#125; counter_bloc.dart123456789101112131415161718192021import &#x27;package:bloc/bloc.dart&#x27;;enum CounterEvent &#123; increment, decrement &#125;class CounterBloc extends Bloc&lt;CounterEvent, int&gt; &#123; @override int get initialState =&gt; 0; @override Stream&lt;int&gt; mapEventToState(int currentState, CounterEvent event) async* &#123; switch (event) &#123; case CounterEvent.decrement: yield currentState - 1; break; case CounterEvent.increment: yield currentState + 1; break; &#125; &#125;&#125;shaoting0730 效果如图: 源码 另外:其他管理库学习 另外:Flutter学习demo","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~json_serializable库学习","slug":"移动端学习/Flutter~json_serializable库学习","date":"2019-03-05T16:00:00.000Z","updated":"2023-12-03T05:28:01.122Z","comments":true,"path":"2019/03/06/移动端学习/Flutter~json_serializable库学习/","link":"","permalink":"https://zhoushaoting.com/2019/03/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~json_serializable%E5%BA%93%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter中实体类三方库json_serializable.其中,json_serializable: ^2.0.0,json_annotation: ^2.0.0,build_runner: ^1.0.0","text":"今天学习下Flutter中实体类三方库json_serializable.其中,json_serializable: ^2.0.0,json_annotation: ^2.0.0,build_runner: ^1.0.0 1、首先,新建一个Flutter项目,引入dio网络请求库,按照json_serializable的说明,分别在dependencies下引入json_annotation,在dev_dependencies下引入json_serializable和build_runner(build_runner是dart团队提供的一个生成dart代码文件的外部包).2、在main.dart里面写一个网络请求. main.dart1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:dio/dio.dart&#x27;;import &#x27;dart:async&#x27;;import &#x27;package:json_demo/Data.dart&#x27;;// flutter packages pub run build_runner buildvoid main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: ThemeData( primarySwatch: Colors.blue, ), home: DataToModel(), ); &#125;&#125;class DataToModel extends StatefulWidget &#123; final Widget child; DataToModel(&#123;Key key, this.child&#125;) : super(key: key); _DataToModelState createState() =&gt; _DataToModelState();&#125;class _DataToModelState extends State&lt;DataToModel&gt; &#123; Future getHomePageContent() async &#123; try &#123; print(&#x27;开始获取首页数据&#x27;); Response response; Dio dio = new Dio(); response = await dio.get(&#x27;http://gank.io/api/data/%E7%A6%8F%E5%88%A9/10/1&#x27;); if (response.statusCode == 200) &#123; return response.data; &#125; else &#123; throw Exception(&#x27;后端接口出现异常&#x27;); &#125; &#125; catch (e) &#123; print(&#x27;ERROR 发生错误👇&#x27;); return print(e); &#125;&#125; @override void initState() &#123; super.initState(); getHomePageContent().then((val) &#123; Data dd = Data.fromJson(val); print(dd.error); // 数组 print(dd.results); // 数组第一个元素:map print(dd.results[0].createdAt); print(dd.results[0].desc); print(dd.results[0].publishedAt); print(dd.results[0].source); print(dd.results[0].type); print(dd.results[0].url); print(dd.results[0].used); print(dd.results[0].who); &#125;); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: Text(&#x27;json_serializable&#x27;)), body: Text(&#x27;json_serializable&#x27;), ); &#125;&#125; 这里的接口,网上随意找一个: http://gank.io/api/data/%E7%A6%8F%E5%88%A9/10/1大致结构如图:3、然后根据返回数据,书写两个dart文件,Data.dart是外部map,Dic.dart是内部的List. Data.dart123456789101112131415import &#x27;package:json_annotation/json_annotation.dart&#x27;;import &#x27;package:json_demo/Dic.dart&#x27;;part &#x27;Data.g.dart&#x27;;@JsonSerializable()class Data&#123; bool error; List&lt;Dic&gt; results; Data(this.error,this.results); //反序列化 factory Data.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$DataFromJson(json); //序列化 Map&lt;String, dynamic&gt; toJson() =&gt; _$DataToJson(this); &#125; Dic.dart12345678910111213141516171819202122import &#x27;package:json_annotation/json_annotation.dart&#x27;;part &#x27;Dic.g.dart&#x27;;@JsonSerializable()class Dic&#123; final String createdAt; final String desc; final String publishedAt; final String source; final String type; final String url; final bool used; final String who; Dic(&#123;this.createdAt, this.desc, this.publishedAt, this.source, this.type, this.url, this.used, this.who&#125;); //反序列化 factory Dic.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$DicFromJson(json); //序列化 Map&lt;String, dynamic&gt; toJson() =&gt; _$DicToJson(this); &#125; 然后,ide会报几个错误,这个不用管,那是尚未生成解析文件的原因. 4、然后,终端 cd 到项目根目录,回车,执行命令flutter packages pub run build_runner build,会生成对应的解析文件. 5、ok,撸好之后,输出看一下 1234567891011121314Data dd = Data.fromJson(val); print(dd.error); // 数组 print(dd.results); // 数组第一个元素:map print(dd.results[0].createdAt); print(dd.results[0].desc); print(dd.results[0].publishedAt); print(dd.results[0].source); print(dd.results[0].type); print(dd.results[0].url); print(dd.results[0].used); print(dd.results[0].who); 总结:以上就是对flutter中实体类库json_serializable的简单学习,身边大佬有的说很有必要,因为规范点,无规矩不成三角形,有了实体类方便维护,本来原生就是该有model的,这样不容易出现取值错误和其他问题;有的大佬说没啥必要,有点繁琐了.我也不知道谁缩的对,但是学下总没错,就像鲁迅说的那样”人活着什么最重要,肯定是开心辣”. 网上还有其他的方案:a. android studio 安装插件 dart_json_formatb. https://github.com/debuggerx01/JSONFormat4Flutterc. 一个在线转换工具: https://javiercbk.github.io/json_to_dart/ 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter中的sqflite库学习","slug":"移动端学习/Flutter中的sqflite库学习","date":"2019-03-03T16:00:00.000Z","updated":"2023-12-03T06:22:44.613Z","comments":true,"path":"2019/03/04/移动端学习/Flutter中的sqflite库学习/","link":"","permalink":"https://zhoushaoting.com/2019/03/04/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter%E4%B8%AD%E7%9A%84sqflite%E5%BA%93%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter中SQLite数据库第三方sqflite.其中, sqflite: ^1.1.0","text":"今天学习下Flutter中SQLite数据库第三方sqflite.其中, sqflite: ^1.1.0 涉及 数据库的创建 表的创建 增删改查操作 关闭数据库 删除数据库 main.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:sqflite/sqflite.dart&#x27;;import &#x27;package:path/path.dart&#x27;;void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: ThemeData( // This is the theme of your application. // // Try running your application with &quot;flutter run&quot;. You&#x27;ll see the // application has a blue toolbar. Then, without quitting the app, try // changing the primarySwatch below to Colors.green and then invoke // &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;, // or simply save your changes to &quot;hot reload&quot; in a Flutter IDE). // Notice that the counter didn&#x27;t reset back to zero; the application // is not restarted. primarySwatch: Colors.blue, ), home: CRUD(), ); &#125;&#125;class CRUD extends StatefulWidget &#123; final Widget child; CRUD(&#123;Key key, this.child&#125;) : super(key: key); _CRUDState createState() =&gt; _CRUDState();&#125;class _CRUDState extends State&lt;CRUD&gt; &#123; Database db; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: Text(&#x27;数组库-增删改查&#x27;)), body: SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ OutlineButton(child: Text(&#x27;创建数据库和一张表&#x27;), onPressed: _createTable), OutlineButton(child: Text(&#x27;查询数据&#x27;), onPressed: _queryData), OutlineButton(child: Text(&#x27;插入数据&#x27;), onPressed: _insertData), OutlineButton(child: Text(&#x27;更新数据&#x27;), onPressed: _updateData), OutlineButton(child: Text(&#x27;删除数据&#x27;), onPressed: _deleteData), OutlineButton(child: Text(&#x27;关闭数据库&#x27;), onPressed: _closeData), OutlineButton(child: Text(&#x27;删除数据库&#x27;), onPressed: _deleteTable), ], ), ), ); &#125; // 创建数据库 和 表 void _createTable() async &#123; // 获取数据库文件的存储路径 var databasesPath = await getDatabasesPath(); String path = join(databasesPath, &#x27;demo.db&#x27;); //根据数据库文件路径和数据库版本号创建数据库表 db = await openDatabase(path, version: 1, onCreate: (Database db, int version) async &#123; await db.execute( &#x27;CREATE TABLE Test (id INTEGER PRIMARY KEY, name TEXT, value INTEGER, num REAL)&#x27;); &#125;); print(&#x27;创建数据库 和 表&#x27;); &#125; // 增 void _insertData() async &#123; await db.transaction((txn) async &#123; await txn.rawInsert(&#x27;INSERT INTO Test(name, value, num) VALUES(?, ?, ?)&#x27;, [&#x27;flutter==&gt;&#x27;, 0101010101001, 1111111111111111111]); print(&#x27;插入数据&#x27;); &#125;); &#125; // 删 void _deleteData() async &#123; await db.rawDelete(&#x27;DELETE FROM Test WHERE name = ?&#x27;, [&#x27;updated name&#x27;]); print(&#x27;删除&#x27;); &#125; // 改 void _updateData() async &#123; await db.rawUpdate( &#x27;UPDATE Test SET name = ?, VALUE = ?,num = ? &#x27;, [&#x27;updated name&#x27;, 0,1]); print(&#x27;修改&#x27;); &#125; // 查 void _queryData() async &#123; List&lt;Map&gt; maps = await db.query(&#x27;Test&#x27;); print(maps); &#125; // 关闭数据库 void _closeData() async &#123; await db.close(); print(&#x27;关闭数据库&#x27;); &#125; // 删除数据库 void _deleteTable() async &#123; var databasesPath = await getDatabasesPath(); String path = join(databasesPath, &#x27;demo.db&#x27;); await deleteDatabase(path); print(&#x27;删除数据库&#x27;); &#125;&#125; 效果图: 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"React学习:简单个人消费记账系统","slug":"前端学习/React学习~简单个人消费记账系统","date":"2019-03-03T12:33:42.000Z","updated":"2023-12-03T06:56:20.174Z","comments":true,"path":"2019/03/03/前端学习/React学习~简单个人消费记账系统/","link":"","permalink":"https://zhoushaoting.com/2019/03/03/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A0~%E7%AE%80%E5%8D%95%E4%B8%AA%E4%BA%BA%E6%B6%88%E8%B4%B9%E8%AE%B0%E8%B4%A6%E7%B3%BB%E7%BB%9F/","excerpt":"今天学习React,写一个小demo记录一下,弄一个简单的个人消费记账系统.","text":"今天学习React,写一个小demo记录一下,弄一个简单的个人消费记账系统. 使用脚手架 create-react-app ,后台使用mockAPI模拟,网络请求使用axios,css效果使用bootstrap/4.0.0 .先来个效果图:其主要代码均在../src/components中,主文件是Records.js,具体的消费记录是Record.js,总消费记录是Box.js,消费记录的创建是RecordForm.js ,下面是其源码:Records.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175import React, &#123; Component &#125; from &#x27;react&#x27;;import Record from &#x27;./Record&#x27;import RecordForm from &#x27;./RecordForm&#x27;import Box from &#x27;./Box&#x27;import axios from &#x27;axios&#x27;export default class Records extends Component &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; error:null, //网络错误信息 isLoader:true, //加载标示 records:[] //数据 &#125;; &#125; render() &#123; //根据 error isLoader 显示不同UI //如果error有值,显示errorUI //如果isLoader 为true,显示加载UI //如果isLoader 为false,显示正确数据UI const &#123;error,isLoader,records&#125; = this.state let renderRecords; if(error)&#123; renderRecords = &lt;div&gt;出错了:&#123;error&#125;&lt;/div&gt; &#125;else if(isLoader)&#123; renderRecords = &lt;div&gt;&lt;img src=&#123;require(&#x27;./loading.gif&#x27;)&#125; /&gt;&lt;/div&gt; &#125;else &#123; renderRecords = ( &lt;div&gt; &lt;table className=&quot;table table-bordered&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;日期&lt;/th&gt; &lt;th&gt;标题&lt;/th&gt; &lt;th&gt;金额&lt;/th&gt; &lt;th&gt;事件&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &#123;records.map((item,index)=&gt; &lt;Record key =&#123;item.id&#125; record=&#123;item&#125; updateData=&#123;this.updateRecord.bind(this)&#125; deleteData=&#123;this.deleteRecord.bind(this)&#125; /&gt; )&#125; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; ); &#125; return( &lt;div&gt; &lt;h2&gt;消费记录&lt;/h2&gt; &lt;div className=&quot;row mb-3&quot;&gt; &lt;Box text=&quot;收入&quot; type=&quot;success&quot; amount=&#123;this.credits()&#125; /&gt; &lt;Box text=&quot;支出&quot; type=&quot;danger&quot; amount=&#123;this.debits()&#125; /&gt; &lt;Box text=&quot;余额&quot; type=&quot;info&quot; amount=&#123;this.balance()&#125; /&gt; &lt;/div&gt; &lt;RecordForm handleNewRecord = &#123;this.addRecord.bind(this)&#125; /&gt; &#123;renderRecords&#125; &lt;/div&gt; ) &#125; /** * 收入计算 * */ credits() &#123; let credits = this.state.records.filter((record) =&gt; &#123; return record.account &gt;= 0; &#125;) return credits.reduce((prev, curr) =&gt; &#123; return prev + Number.parseInt(curr.account, 0) &#125;, 0) &#125; /** * 支出计算 * */ debits() &#123; let credits = this.state.records.filter((record) =&gt; &#123; return record.account &lt; 0; &#125;) return credits.reduce((prev, curr) =&gt; &#123; return prev + Number.parseInt(curr.account, 0) &#125;, 0) &#125; /** * 余额计算 * */ balance() &#123; return this.credits() + this.debits(); &#125; /** * 更新账单 * */ updateRecord(record, data) &#123; const recordIndex = this.state.records.indexOf(record); const newRecords = this.state.records.map( (item, index) =&gt; &#123; if(index !== recordIndex) &#123; // This isn&#x27;t the item we care about - keep it as-is return item; &#125; // Otherwise, this is the one we want - return an updated value return &#123; ...item, ...data &#125;; &#125;); this.setState(&#123; records: newRecords &#125;); &#125; /** * 删除账单 * */ deleteRecord(record)&#123; // console.log(record) const recordIndex = this.state.records.indexOf(record); const newRecords = this.state.records.filter( (item, index) =&gt; index !== recordIndex); this.setState(&#123; records: newRecords &#125;); &#125; /** * 把最新数据赋值state * */ addRecord (record) &#123; console.log(record) this.setState(&#123; error:null, isLoader:false, //加载标示 records:[ ...this.state.records, record ] &#125;) &#125; //请求数据 componentDidMount() &#123; var that = this axios.get(&#x27;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts&#x27;) .then(response =&gt; that.setState(&#123; isLoader:false, records:response.data &#125;) ) .catch(err =&gt; that.setState(&#123; error:err.message, &#125;) ) &#125;&#125; Record.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124import React, &#123; Component &#125; from &#x27;react&#x27;;import moment from &quot;moment&quot;; //日期格式import axios from &#x27;axios&#x27;export default class Record extends Component &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; edit:false //编辑按钮状态 &#125;; &#125; render() &#123; //如果编辑状态为true,显示编辑状态,否则显示默认状态 if(this.state.edit)&#123; return this.renderEditRow() &#125;else &#123; return this.renderRow() &#125; &#125; renderEditRow () &#123; var date = this.props.record.date var newDate = moment(date).format(&#x27;YYYY-MM-DD&#x27;); return ( &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;text&quot; className=&quot;form-cantrol&quot; defaultValue=&#123;newDate&#125; ref=&quot;date&quot; /&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; className=&quot;form-cantrol&quot; defaultValue=&#123;this.props.record.title&#125; ref=&quot;title&quot; /&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; className=&quot;form-cantrol&quot; defaultValue=&#123;this.props.record.account&#125; ref=&quot;account&quot; /&gt;&lt;/td&gt; &lt;td&gt; &lt;button className=&quot;btn btn-info mr-1&quot; onClick=&#123;this.handleUpdate.bind(this)&#125;&gt;更新&lt;/button&gt; &lt;button className=&quot;btn btn-danger &quot; onClick=&#123;this.handleToggle.bind(this)&#125;&gt;取消&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; ); &#125; renderRow () &#123; var date = this.props.record.date var newDate = moment(date).format(&#x27;YYYY-MM-DD&#x27;); return ( &lt;tr&gt; &lt;td&gt;&#123;newDate&#125;&lt;/td&gt; &lt;td&gt;&#123;this.props.record.title&#125;&lt;/td&gt; &lt;td&gt;&#123;this.props.record.account&#125;&lt;/td&gt; &lt;td&gt; &lt;button className=&quot;btn btn-info mr-1&quot; onClick=&#123;this.handleToggle.bind(this)&#125;&gt;编辑&lt;/button&gt; &lt;button className=&quot;btn btn-danger&quot; onClick=&#123;this.handleDelete.bind(this)&#125;&gt;删除&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; ); &#125; /** * 编辑按钮点击事件 * 对state edit做取反操作 * */ handleToggle () &#123; this.setState(&#123; edit:!this.state.edit &#125;) &#125; /** * 删除 按钮点击事件 * */ handleDelete (event) &#123; event.preventDefault() var that = this // alert(that.props.record.id) axios.delete(&#x27;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts/&#x27; + that.props.record.id) .then(response =&gt;&#123; console.log(response) this.props.deleteData(that.props.record) &#125;) .catch(err =&gt;&#123; &#125;) &#125; /** * 更新记录事件 * */ handleUpdate (event) &#123; event.preventDefault() // 方法阻止元素发生默认的行为 const record =&#123; date:this.refs.date.value, title:this.refs.title.value, account:this.refs.account.value &#125; var that = this // alert(that.props.record.id) axios.put(&#x27;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts/&#x27; + that.props.record.id,&#123; date:record.date, title:record.title, account:record.account &#125;) .then(response =&gt;&#123; this.props.updateData(this.props.record,response.data) this.setState(&#123; edit:false &#125;) &#125;) .catch(err =&gt; that.setState(&#123; error:err.message, &#125;) ) &#125;&#125; Box.js 12345678910111213141516171819202122/** * 上部的总消费记录 * */import React from &#x27;react&#x27;;const Box = (&#123; text, type, amount &#125;) =&gt; &#123; return ( &lt;div className=&quot;col&quot;&gt; &lt;div className=&quot;card&quot;&gt; &lt;div className=&#123;`card-header bg-$&#123;type&#125; text-white`&#125;&gt; &#123;text&#125; &lt;/div&gt; &lt;div className=&quot;card-body&quot;&gt; &#123;amount&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );&#125;export default Box RecordForm.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import React, &#123; Component &#125; from &#x27;react&#x27;;import axios from &#x27;axios&#x27;export default class RecordForm extends Component &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; date:&quot;&quot;, title:&quot;&quot;, account:&quot;&quot; &#125;; &#125; /** * 判断按钮是否可用 * */ valid()&#123; return this.state.date &amp;&amp; this.state.title &amp;&amp; this.state.account; &#125; /** * 输入改变触发 * */ handleChange (event)&#123; let name,obj; name = event.target.name; this.setState(( obj = &#123;&#125;, obj[&quot;&quot; + name] = event.target.value, obj )) &#125; /** * 提交按钮触发 * */ handleSubmit (event)&#123; event.preventDefault() var that = this axios.post(&#x27;http://5b3450a9d167760014c265b5.mockapi.io/accounts/v1/accounts&#x27;,&#123; date:that.state.date, title:that.state.title, account:that.state.account &#125;) .then(response =&gt;&#123; console.log(response); this.props.handleNewRecord(response.data) that.setState(&#123; date:&quot;&quot;, title:&quot;&quot;, account:&quot;&quot; &#125;) &#125;) .catch(err =&gt; that.setState(&#123; error:err.message, &#125;) ) &#125; render() &#123; return ( &lt;form className=&quot;form-inline mb-2&quot; onSubmit=&#123;this.handleSubmit.bind(this)&#125; &gt; &lt;div className=&quot;form-group mr-1&quot;&gt; &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange.bind(this)&#125; value=&#123;this.state.date&#125; className=&quot;form-control&quot; placeholder=&quot;时间&quot; name=&quot;date&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;form-group mr-1&quot;&gt; &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange.bind(this)&#125; value=&#123;this.state.title&#125; className=&quot;form-control&quot; placeholder=&quot;标题&quot; name=&quot;title&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;form-group mr-1&quot;&gt; &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange.bind(this)&#125; value=&#123;this.state.account&#125; className=&quot;form-control&quot; placeholder=&quot;账目&quot; name=&quot;account&quot; /&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot; className=&quot;btn btn-primary&quot; disabled=&#123;!this.valid()&#125; &gt;创建&lt;/button&gt; &lt;/form&gt; ); &#125;&#125; ok,下面是源码:源码地址学习前端","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://zhoushaoting.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"前端学习","slug":"前端学习","permalink":"https://zhoushaoting.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~provide学习","slug":"移动端学习/Flutter~provide学习","date":"2019-03-02T16:00:00.000Z","updated":"2023-12-03T05:30:00.067Z","comments":true,"path":"2019/03/03/移动端学习/Flutter~provide学习/","link":"","permalink":"https://zhoushaoting.com/2019/03/03/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~provide%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter中state管理的第三方provide.其中,provide: ^1.0.2","text":"今天学习下Flutter中state管理的第三方provide.其中,provide: ^1.0.2 代码结构如图所示: 下面是各文件的源码.main.dart1234567891011121314151617181920212223242526272829303132333435363738import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:provide_demo/tabbar.dart&#x27;;import &#x27;package:provide/provide.dart&#x27;;import &#x27;package:provide_demo/model/counter.dart&#x27;;void main() &#123; var counter = Counter(); var providers = Providers(); providers ..provide(Provider&lt;Counter&gt;.value(counter)); runApp(ProviderNode(child: MyApp(), providers: providers));&#125;class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: ThemeData( // This is the theme of your application. // // Try running your application with &quot;flutter run&quot;. You&#x27;ll see the // application has a blue toolbar. Then, without quitting the app, try // changing the primarySwatch below to Colors.green and then invoke // &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;, // or simply save your changes to &quot;hot reload&quot; in a Flutter IDE). // Notice that the counter didn&#x27;t reset back to zero; the application // is not restarted. primarySwatch: Colors.blue, ), home: Tabbar(), ); &#125;&#125; tabbar.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102import &#x27;package:flutter/material.dart&#x27;;import &#x27;One/one.dart&#x27;;import &#x27;Two/two.dart&#x27;; class Tabbar extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new MaterialApp( debugShowCheckedModeBanner: false, home: new MainPageWidget()); &#125;&#125; class MainPageWidget extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new MainPageState(); &#125;&#125; class MainPageState extends State&lt;MainPageWidget&gt; &#123; int _tabIndex = 0; var tabImages; var appBarTitles = [&#x27;One&#x27;, &#x27;Two&#x27;]; /* * 存放二个页面，跟fragmentList一样 */ var _pageList; /* * 根据选择获得对应的normal或是press的icon */ Image getTabIcon(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return tabImages[curIndex][1]; &#125; return tabImages[curIndex][0]; &#125; /* * 获取bottomTab的颜色和文字 */ Text getTabTitle(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: const Color(0xff1296db))); &#125; else &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: const Color(0xff515151))); &#125; &#125; /* * 根据image路径获取图片 */ Image getTabImage(path) &#123; return new Image.asset(path, width: 24.0, height: 24.0); &#125; void initData() &#123; /* * 初始化选中和未选中的icon */ tabImages = [ [getTabImage(&#x27;images/tab/one.png&#x27;), getTabImage(&#x27;images/tab/one_active.png&#x27;)], [getTabImage(&#x27;images/tab/two.png&#x27;), getTabImage(&#x27;images/tab/two_active.png&#x27;)], ]; /* * 子界面 */ _pageList = [ new One(), new Two(), ]; &#125; @override Widget build(BuildContext context) &#123; //初始化数据 initData(); return Scaffold( body: _pageList[_tabIndex], bottomNavigationBar: new BottomNavigationBar( items: &lt;BottomNavigationBarItem&gt;[ new BottomNavigationBarItem( icon: getTabIcon(0), title: getTabTitle(0)), new BottomNavigationBarItem( icon: getTabIcon(1), title: getTabTitle(1)), ], type: BottomNavigationBarType.fixed, //默认选中首页 currentIndex: _tabIndex, iconSize: 24.0, //点击事件 onTap: (index) &#123; setState(() &#123; _tabIndex = index; &#125;); &#125;, )); &#125;&#125; counter.dart12345678910import &#x27;package:flutter/material.dart&#x27;;class Counter with ChangeNotifier&#123; int value = 0; increment()&#123; value++; notifyListeners(); &#125;&#125; one.dart123456789101112131415161718192021222324252627282930313233import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:provide/provide.dart&#x27;;import &#x27;package:provide_demo/model/counter.dart&#x27;;class One extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: Text(&#x27;One&#x27;)), body: Padding( padding: EdgeInsets.only(top: 400.0,left: 200.0), child: Column( children: &lt;Widget&gt;[ Provide&lt;Counter&gt;( builder: (context, child, counter) &#123; return Text( &#x27;$&#123;counter.value&#125;&#x27;, ); &#125;, ), IconButton( icon: Icon(Icons.add), onPressed: () &#123; Provide.value&lt;Counter&gt;(context).increment(); &#125;, ), ], ), ), ); &#125;&#125; two.dart12345678910111213141516171819202122import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:provide/provide.dart&#x27;;import &#x27;package:provide_demo/model/counter.dart&#x27;;class Two extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: Text(&#x27;Two&#x27;)), body: Center( child: Provide&lt;Counter&gt;( builder: (context, child, counter) &#123; return Text( &#x27;$&#123;counter.value&#125;&#x27;, ); &#125;, ), ), ); &#125;&#125; 效果图: 源码 另外:其他管理库学习 另外:Flutter学习demo","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~redux学习","slug":"移动端学习/Flutter~redux学习","date":"2019-02-16T16:00:00.000Z","updated":"2023-12-03T05:55:48.771Z","comments":true,"path":"2019/02/17/移动端学习/Flutter~redux学习/","link":"","permalink":"https://zhoushaoting.com/2019/02/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~redux%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter中state管理的第三方redux.其中,redux: 3.0.0 flutter_redux: 0.5.3","text":"今天学习下Flutter中state管理的第三方redux.其中,redux: 3.0.0 flutter_redux: 0.5.3 代码结构如图所示: 下面是各文件的源码.main.dart12345678910111213141516171819202122232425262728293031import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_redux/flutter_redux.dart&#x27;;import &#x27;package:redux/redux.dart&#x27;;import &#x27;package:redux_demo/model/count_state.dart&#x27;;import &#x27;package:redux_demo/top_screen.dart&#x27;;void main() &#123; final store = Store&lt;CountState&gt;(reducer, initialState: CountState.initState()); runApp(new MyApp(store));&#125;class MyApp extends StatelessWidget &#123; final Store&lt;CountState&gt; store; MyApp(this.store); @override Widget build(BuildContext context) &#123; return StoreProvider&lt;CountState&gt;( store: store, child: new MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: new ThemeData( primarySwatch: Colors.blue, ), home: TopScreen(), ), ); &#125;&#125; tabbar.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:redux_demo/one/one.dart&#x27;;import &#x27;package:redux_demo/two/two.dart&#x27;;class Tabbar extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new MaterialApp( debugShowCheckedModeBanner: false, home: new MainPageWidget()); &#125;&#125;class MainPageWidget extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new MainPageState(); &#125;&#125;class MainPageState extends State&lt;MainPageWidget&gt; &#123; int _tabIndex = 0; var tabImages; var appBarTitles = [&#x27;One&#x27;, &#x27;Two&#x27;]; /* * 存放二个页面，跟fragmentList一样 */ var _pageList; /* * 根据选择获得对应的normal或是press的icon */ Image getTabIcon(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return tabImages[curIndex][1]; &#125; return tabImages[curIndex][0]; &#125; /* * 获取bottomTab的颜色和文字 */ Text getTabTitle(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: const Color(0xff1296db))); &#125; else &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: const Color(0xff515151))); &#125; &#125; /* * 根据image路径获取图片 */ Image getTabImage(path) &#123; return new Image.asset(path, width: 24.0, height: 24.0); &#125; void initData() &#123; /* * 初始化选中和未选中的icon */ tabImages = [ [ getTabImage(&#x27;images/tab/one.png&#x27;), getTabImage(&#x27;images/tab/one_active.png&#x27;) ], [ getTabImage(&#x27;images/tab/two.png&#x27;), getTabImage(&#x27;images/tab/two_active.png&#x27;) ], ]; /* * 子界面 */ _pageList = [ new One(), new Two(), ]; &#125; @override Widget build(BuildContext context) &#123; //初始化数据 initData(); return Scaffold( body: _pageList[_tabIndex], bottomNavigationBar: new BottomNavigationBar( items: &lt;BottomNavigationBarItem&gt;[ new BottomNavigationBarItem( icon: getTabIcon(0), title: getTabTitle(0)), new BottomNavigationBarItem( icon: getTabIcon(1), title: getTabTitle(1)), ], type: BottomNavigationBarType.fixed, //默认选中首页 currentIndex: _tabIndex, iconSize: 24.0, //点击事件 onTap: (index) &#123; setState( () &#123; _tabIndex = index; &#125;, ); &#125;, ), ); &#125;&#125; top_screen.dart123456789101112131415import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:redux_demo/tabbar.dart&#x27;;class TopScreen extends StatefulWidget &#123; @override _TopScreenState createState() =&gt; _TopScreenState();&#125;class _TopScreenState extends State&lt;TopScreen&gt; &#123; @override Widget build(BuildContext context) &#123; return Tabbar(); &#125;&#125; count_state.dart1234567891011121314151617181920212223242526272829303132import &#x27;package:meta/meta.dart&#x27;;/* * State中所有属性都应该是只读的 */@immutableclass CountState &#123; final int _count; get count =&gt; _count; CountState(this._count); CountState.initState() : _count = 0;&#125;/* * 定义操作该State的全部Action * 这里只有增加count一个动作 */enum Action &#123; increment &#125;/* * reducer会根据传进来的action生成新的CountState */CountState reducer(CountState state, action) &#123; //匹配Action if (action == Action.increment) &#123; return CountState(state.count + 1); &#125; return state;&#125; one.dart12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_redux/flutter_redux.dart&#x27;;import &#x27;package:redux_demo/model/count_state.dart&#x27;;class One extends StatefulWidget &#123; @override _OneState createState() =&gt; _OneState();&#125;class _OneState extends State&lt;One&gt; &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(&#x27;one Screen&#x27;), ), body: Center( child: new Column( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ new Text( &#x27;You have pushed the button this many times:&#x27;, ), StoreConnector&lt;CountState,int&gt;( converter: (store) =&gt; store.state.count, builder: (context, count) &#123; return Text( count.toString(), style: Theme.of(context).textTheme.display1, ); &#125;, ), ], ), ), floatingActionButton: StoreConnector&lt;CountState,VoidCallback&gt;( converter: (store) &#123; return () =&gt; store.dispatch(Action.increment); &#125;, builder: (context, callback) &#123; return FloatingActionButton( onPressed: callback, child: Icon(Icons.add), ); &#125;, ), ); &#125;&#125; two.dart12345678910111213141516171819202122232425262728293031import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_redux/flutter_redux.dart&#x27;;import &#x27;package:redux_demo/model/count_state.dart&#x27;;class Two extends StatefulWidget &#123; @override _TwoState createState() =&gt; _TwoState();&#125;class _TwoState extends State&lt;Two&gt; &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(&#x27;two Screen&#x27;), ), body: Center( child: StoreConnector&lt;CountState, int&gt;( converter: (store) =&gt; store.state.count, builder: (context, count) &#123; return Text( count.toString(), style: Theme.of(context).textTheme.display1, ); &#125;, ), ), ); &#125;&#125; 效果图: 源码 另外:其他管理库学习 另外:Flutter学习demo","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Flutter~scoped_model学习","slug":"移动端学习/Flutter~scoped_model学习","date":"2019-02-15T16:00:00.000Z","updated":"2023-12-03T06:21:58.199Z","comments":true,"path":"2019/02/16/移动端学习/Flutter~scoped_model学习/","link":"","permalink":"https://zhoushaoting.com/2019/02/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Flutter~scoped_model%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下Flutter中state管理的第三方scoped_model.其中,scoped_model: 1.0.1","text":"今天学习下Flutter中state管理的第三方scoped_model.其中,scoped_model: 1.0.1 代码结构如图所示: 下面是各文件的源码.main.dart123456789101112131415161718192021222324252627import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:scoped_model_demo/model/main_model.dart&#x27;;import &#x27;package:scoped_model/scoped_model.dart&#x27;;import &#x27;top_screen.dart&#x27;;void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget &#123; //创建顶层状态 MainModel countModel = MainModel(); // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return ScopedModel&lt;MainModel&gt;( model: countModel, child: new MaterialApp( title: &#x27;Flutter Demo&#x27;, theme: new ThemeData( primarySwatch: Colors.blue, ), home: TopScreen(), ), ); &#125;&#125; tabbar.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100import &#x27;package:flutter/material.dart&#x27;;import &#x27;One/one.dart&#x27;;import &#x27;Two/two.dart&#x27;; class Tabbar extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new MaterialApp( debugShowCheckedModeBanner: false, home: new MainPageWidget()); &#125;&#125; class MainPageWidget extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new MainPageState(); &#125;&#125; class MainPageState extends State&lt;MainPageWidget&gt; &#123; int _tabIndex = 0; var tabImages; var appBarTitles = [&#x27;One&#x27;, &#x27;Two&#x27;]; /* * 存放二个页面，跟fragmentList一样 */ var _pageList; /* * 根据选择获得对应的normal或是press的icon */ Image getTabIcon(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return tabImages[curIndex][1]; &#125; return tabImages[curIndex][0]; &#125; /* * 获取bottomTab的颜色和文字 */ Text getTabTitle(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: const Color(0xff1296db))); &#125; else &#123; return new Text(appBarTitles[curIndex], style: new TextStyle(fontSize: 14.0, color: const Color(0xff515151))); &#125; &#125; /* * 根据image路径获取图片 */ Image getTabImage(path) &#123; return new Image.asset(path, width: 24.0, height: 24.0); &#125; void initData() &#123; /* * 初始化选中和未选中的icon */ tabImages = [ [getTabImage(&#x27;images/tab/one.png&#x27;), getTabImage(&#x27;images/tab/one_active.png&#x27;)], [getTabImage(&#x27;images/tab/two.png&#x27;), getTabImage(&#x27;images/tab/two_active.png&#x27;)], ]; /* * 子界面 */ _pageList = [ new One(), new Two(), ]; &#125; @override Widget build(BuildContext context) &#123; //初始化数据 initData(); return Scaffold( body: _pageList[_tabIndex], bottomNavigationBar: new BottomNavigationBar( items: &lt;BottomNavigationBarItem&gt;[ new BottomNavigationBarItem( icon: getTabIcon(0), title: getTabTitle(0)), new BottomNavigationBarItem( icon: getTabIcon(1), title: getTabTitle(1)), ], type: BottomNavigationBarType.fixed, //默认选中首页 currentIndex: _tabIndex, iconSize: 24.0, //点击事件 onTap: (index) &#123; setState(() &#123; _tabIndex = index; &#125;); &#125;, )); &#125;&#125; top_screen.dart12345678910111213141516171819202122232425262728293031323334import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:scoped_model_demo/model/main_model.dart&#x27;;import &#x27;package:scoped_model/scoped_model.dart&#x27;;import &#x27;tabbar.dart&#x27;;class TopScreen extends StatefulWidget &#123; @override _TopScreenState createState() =&gt; _TopScreenState();&#125;class _TopScreenState extends State&lt;TopScreen&gt; &#123; //静态获取model用法实例 Model getModel(BuildContext context) &#123; //直接使用of final countModel = ScopedModel.of&lt;MainModel&gt;(context); //使用CountModel中重写的of final countModel2 = MainModel().of(context); countModel.increment(); countModel2.increment(); return countModel; // return countMode2; &#125; @override Widget build(BuildContext context) &#123; return ScopedModelDescendant&lt;MainModel&gt;( builder: (context,child,model)&#123; return Tabbar(); &#125;, ); &#125;&#125; main_model.dart123456789101112131415import &#x27;package:scoped_model/scoped_model.dart&#x27;;class MainModel extends Model&#123; int _count = 0; get count =&gt; _count; void increment()&#123; _count++; notifyListeners(); &#125; MainModel of(context) =&gt; ScopedModel.of&lt;MainModel&gt;(context);&#125; one.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:scoped_model_demo/model/main_model.dart&#x27;;import &#x27;package:scoped_model/scoped_model.dart&#x27;;class One extends StatefulWidget &#123; @override _OneState createState() =&gt; _OneState();&#125;class _OneState extends State&lt;One&gt; &#123; //静态获取model用法实例 Model getModel(BuildContext context) &#123; //直接使用of final countModel = ScopedModel.of&lt;MainModel&gt;(context); //使用CountModel中重写的of final countModel2 = MainModel().of(context); countModel.increment(); countModel2.increment(); return countModel; // return countMode2; &#125; @override Widget build(BuildContext context) &#123; return ScopedModelDescendant&lt;MainModel&gt;( builder: (context, child, model) &#123; return Scaffold( appBar: AppBar( title: Text(&#x27;One One&#x27;), ), body: Center( child: Column( children: &lt;Widget&gt;[ Text( model.count.toString(), style: TextStyle(fontSize: 22.0), ), RaisedButton( child: Text(&#x27;加1&#x27;), onPressed: () =&gt; model.increment(), ), ], ), ), ); &#125;, ); &#125;&#125; two.dart123456789101112131415161718192021222324252627282930313233343536373839404142import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:scoped_model_demo/model/main_model.dart&#x27;;import &#x27;package:scoped_model/scoped_model.dart&#x27;;class Two extends StatefulWidget &#123; @override _TwoState createState() =&gt; _TwoState();&#125;class _TwoState extends State&lt;Two&gt; &#123; //静态获取model用法实例 Model getModel(BuildContext context)&#123; //直接使用of final countModel = ScopedModel.of&lt;MainModel&gt;(context); //使用CountModel中重写的of final countModel2 = MainModel().of(context); countModel.increment(); countModel2.increment(); return countModel; // return countMode2; &#125; @override Widget build(BuildContext context) &#123; return ScopedModelDescendant&lt;MainModel&gt;( builder: (context,child,model)&#123; return Scaffold( appBar: AppBar( title: Text(&#x27;Two Screen&#x27;), ), body: Center( child: Text( model.count.toString(), style: TextStyle(fontSize: 48.0), ), ) ); &#125;, ); &#125;&#125; 效果图: 源码 另外:其他管理库学习 另外:Flutter学习demo","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"React-Native推送通知至RN且显示推送内容","slug":"移动端学习/React-Native推送通知至RN且显示推送内容","date":"2018-09-07T16:00:00.000Z","updated":"2023-12-03T06:55:25.088Z","comments":true,"path":"2018/09/08/移动端学习/React-Native推送通知至RN且显示推送内容/","link":"","permalink":"https://zhoushaoting.com/2018/09/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/React-Native%E6%8E%A8%E9%80%81%E9%80%9A%E7%9F%A5%E8%87%B3RN%E4%B8%94%E6%98%BE%E7%A4%BA%E6%8E%A8%E9%80%81%E5%86%85%E5%AE%B9/","excerpt":"APP推送是基本的要求,今天记录一下,大致是iOS原生收到推送后直接发通知给RN,RN这边监听着iOS原生的这个通知,以此获取到推送的消息.","text":"APP推送是基本的要求,今天记录一下,大致是iOS原生收到推送后直接发通知给RN,RN这边监听着iOS原生的这个通知,以此获取到推送的消息. 效果图: 实现思路 ==&gt;这次采用的友盟推送,至于采用什么推送都是一样的.准备工作:iOS 集成推送,编写中间类,用于传值给RN. RN 界面实现监听iOS原生的通知,通过以上获取到推送的内容. iOS原生准备集成推送: …iOS写一个中间类传输通知给RN:CheckInvoice.h 123456789101112131415161718//// CheckInvoice.h// aitepiao//// Created by tc on 2018/8/28.// Copyright © 2018年 Facebook. All rights reserved.//#import &lt;Foundation/Foundation.h&gt;#import &lt;React/RCTBridgeModule.h&gt;#import &lt;React/RCTEventEmitter.h&gt;@interface CheckInvoice : RCTEventEmitter&lt;RCTBridgeModule&gt;@end CheckInvoice.m 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657//// CheckInvoice.m// aitepiao//// Created by tc on 2018/8/28.// Copyright © 2018年 Facebook. All rights reserved.//#import &quot;CheckInvoice.h&quot;#import &lt;React/RCTEventDispatcher.h&gt;#import &lt;React/RCTBridge.h&gt;static CheckInvoice *_manager = nil;@implementation CheckInvoiceRCT_EXPORT_MODULE()-(instancetype)init&#123; if (self = [super init]) &#123; [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(messageDidReceived:) name:@&quot;didReceiveNotification&quot; object:nil]; &#125; return self;&#125;- (NSArray&lt;NSString *&gt; *)supportedEvents&#123; return @[@&quot;didReceiveNotification&quot;, ];//有几个就写几个&#125;-(void)messageDidReceived:(NSNotification *)notification&#123; NSDictionary *body = notification.object; [self sendEventWithName:@&quot;didReceiveNotification&quot; body:body];&#125;+ (BOOL)requiresMainQueueSetup &#123; return YES;&#125;- (dispatch_queue_t)methodQueue&#123; return dispatch_get_main_queue();&#125;@end ok.传输类写完.然后在AppDelegate里面直接通过通知传即可:如: 1234567891011121314151617181920212223242526272829303132333435363738394041// iOS 10以上-(void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler&#123; NSDictionary * userInfo = notification.request.content.userInfo; NSLog(@&quot;iOS 10以上%@&quot;,userInfo); if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) &#123; //应用处于前台时的远程推送接受 //关闭U-Push自带的弹出框 [UMessage setAutoAlert:NO]; //必须加这句代码 [UMessage didReceiveRemoteNotification:userInfo]; &#125;else&#123; //应用处于前台时的本地推送接受 &#125; //当应用处于前台时提示设置，需要哪个可以设置哪一个 if (@available(iOS 10.0, *)) &#123; completionHandler(UNNotificationPresentationOptionSound|UNNotificationPresentationOptionBadge|UNNotificationPresentationOptionAlert); &#125; else &#123; // Fallback on earlier versions &#125; [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;didReceiveNotification&quot; object:userInfo];&#125;// 收到通知-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)(void))completionHandler&#123; NSDictionary * userInfo = response.notification.request.content.userInfo; NSLog(@&quot;iOS外部 %@&quot;,userInfo); [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;didReceiveNotification&quot; object:userInfo];&#125;- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo&#123; NSLog(@&quot;iOS 10以下%@&quot;,userInfo); [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;didReceiveNotification&quot; object:userInfo];&#125;- (void)application:(UIApplication *)app didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken&#123; NSLog(@&quot;deviceToken==%@&quot;,[[[[deviceToken description] stringByReplacingOccurrencesOfString: @&quot;&lt;&quot; withString: @&quot;&quot;] stringByReplacingOccurrencesOfString: @&quot;&gt;&quot; withString: @&quot;&quot;] stringByReplacingOccurrencesOfString: @&quot; &quot; withString: @&quot;&quot;]); [UMessage registerDeviceToken:deviceToken];&#125; ok,iOS原生这边基本完成.剩下RN这边:引入NativeModules和NativeEventEmitter组件引入原生中间类 123const &#123; CheckInvoice &#125; = NativeModules;const checkInvoiceEmitter = new NativeEventEmitter(CheckInvoice); 然后直接在生命周期方法里面监听iOS通知即可. 1234567891011componentDidMount() &#123; // 监听iOS原生 UM push 监听外部通知 checkInvoiceEmitter.addListener( &#x27;didReceiveNotification&#x27;, (info) =&gt; &#123; alert(info.aps.alert.body) this.setState(&#123; info:info.aps.alert.body &#125;) &#125; )&#125; 源码:只有iOS推送 Android也如此,集成推送.书写中间类传通知给RN. 这里就贴一下桥接代码了: CommModule.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.eazytec.zqtong.gov.baseapp.RN;import android.content.Intent;import android.net.Uri;import android.util.Log;import com.facebook.react.bridge.Callback;import com.facebook.react.bridge.Promise;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.bridge.ReactContextBaseJavaModule;import com.facebook.react.bridge.ReactMethod;import com.facebook.react.modules.core.DeviceEventManagerModule;/** * 通信Module类 * Created by Song on 2017/2/17. */public class CommModule extends ReactContextBaseJavaModule &#123; private ReactApplicationContext mContext; public static final String MODULE_NAME = &quot;commModule&quot;; public static final String EVENT_NAME = &quot;EventName&quot;; /** * 构造方法必须实现 * @param reactContext */ public CommModule(ReactApplicationContext reactContext) &#123; super(reactContext); this.mContext = reactContext; &#125; /** * 在rn代码里面是需要这个名字来调用该类的方法 * @return */ @Override public String getName() &#123; return MODULE_NAME; &#125; /** * Native调用RN * @param msg */ public void nativeCallRn(String msg) &#123; mContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class) .emit(EVENT_NAME,msg); &#125;&#125; CommPackage.java 123456789101112131415161718192021222324252627282930313233343536373839404142package com.eazytec.zqtong.gov.baseapp.RN;import com.facebook.react.ReactPackage;import com.facebook.react.bridge.JavaScriptModule;import com.facebook.react.bridge.NativeModule;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.uimanager.ViewManager;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** * 通信Module类 * Created by Song on 2017/2/17. */public class CommPackage implements ReactPackage &#123; private static final CommPackage mCommPackage = new CommPackage(); public CommModule mModule; /** * 创建Native Module * @param reactContext * @return */ @Override public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123; List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;(); mModule = new CommModule(reactContext); modules.add(mModule); return modules; &#125; @Override public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123; return Collections.emptyList(); &#125;&#125; ok.上面就是桥接文件.然后只需要在返回通知类中发送通知给RN即可.如: MainActivity.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186package com.eazytec.zqtong.gov.baseapp;import android.app.Application;import android.widget.Toast;import org.json.JSONObject;import com.eazytec.zqtong.gov.baseapp.RN.CommModule;import com.facebook.react.bridge.ReactContextBaseJavaModule;import com.google.gson.Gson;import android.content.Context;import android.util.Log;import com.eazytec.zqtong.gov.baseapp.BuildConfig;import com.learnium.RNDeviceInfo.RNDeviceInfo;import com.facebook.react.ReactApplication;import cn.reactnative.httpcache.HttpCachePackage;import com.facebook.react.ReactNativeHost;import com.facebook.react.ReactPackage;import com.facebook.react.shell.MainReactPackage;import com.facebook.soloader.SoLoader;import com.react.rnspinkit.RNSpinkitPackage;import java.util.Arrays;import java.util.List;import com.imagepicker.ImagePickerPackage;import com.umeng.message.PushAgent;import com.umeng.commonsdk.UMConfigure;import com.umeng.message.IUmengRegisterCallback;import com.umeng.message.MsgConstant;import com.umeng.message.PushAgent;import com.umeng.message.UTrack;import com.umeng.message.UmengMessageHandler;import com.umeng.message.UmengNotificationClickHandler;import com.umeng.message.entity.UMessage;import com.facebook.react.bridge.ReactApplicationContext;import android.provider.Settings;import android.support.annotation.Nullable;import com.facebook.react.bridge.Arguments;import com.facebook.react.bridge.ReactContext;import com.facebook.react.bridge.WritableMap;import com.facebook.react.modules.core.DeviceEventManagerModule;import com.eazytec.zqtong.gov.baseapp.RN.CommPackage;import java.util.List;import android.app.Activity;import android.app.ActivityManager;import android.app.ActivityManager.RunningAppProcessInfo;import android.content.Context;public class MainApplication extends Application implements ReactApplication &#123; //定义上下文对象 public static ReactContext myContext; private static final CommPackage mCommPackage = new CommPackage(); private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123; @Override public boolean getUseDeveloperSupport() &#123; return BuildConfig.DEBUG; &#125; private ReactApplicationContext mContext; @Override protected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new HttpCachePackage(), new RNSpinkitPackage(), new RNDeviceInfo(), new ImagePickerPackage(), mCommPackage ); &#125; @Override protected String getJSMainModuleName() &#123; return &quot;index&quot;; &#125; &#125;; @Override public ReactNativeHost getReactNativeHost() &#123; return mReactNativeHost; &#125; //定义发送事件的函数 public void sendEvent(ReactContext reactContext, String eventName, @Nullable WritableMap params) &#123; System.out.println(&quot;reactContext=&quot;+reactContext); reactContext .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class) .emit(eventName,params); &#125; @Override public void onCreate() &#123; super.onCreate(); UMConfigure.setLogEnabled(true); SoLoader.init(this, /* native exopackage */ false); //友盟 push PushAgent mPushAgent = PushAgent.getInstance(this); UmengMessageHandler messageHandler = new UmengMessageHandler() &#123; /** * 通知的回调方法（通知送达时会回调） */ @Override public void dealWithNotificationMessage(Context context, UMessage msg) &#123; //调用super，会展示通知，不调用super，则不展示通知。 super.dealWithNotificationMessage(context, msg); Gson gson = new Gson(); // 推送的内容 Log.i(&quot;msg来了内容&quot;, msg.text); Log.i(&quot;msg来了头&quot;, msg.title); String jsonStr = gson.toJson(msg); Log.i(&quot;完整输出&quot;, jsonStr); mCommPackage.mModule.nativeCallRn(jsonStr); &#125; &#125;; mPushAgent.setMessageHandler(messageHandler); //注册推送服务，每次调用register方法都会回调该接口 mPushAgent.register(new IUmengRegisterCallback() &#123; @Override public void onSuccess(String deviceToken) &#123; //注册成功会返回device token Log.i(deviceToken,&quot;deviceToken来了&quot;); Log.i(deviceToken,deviceToken); &#125; @Override public void onFailure(String s, String s1) &#123; Log.i(s,s); Log.i(s1,s1); &#125; /** * 程序是否在前台运行 * * @return */ public boolean isAppOnForeground() &#123; // Returns a list of application processes that are running on the // device ActivityManager activityManager = (ActivityManager) getApplicationContext().getSystemService(Context.ACTIVITY_SERVICE); String packageName = getApplicationContext().getPackageName(); List&lt;RunningAppProcessInfo&gt; appProcesses = activityManager .getRunningAppProcesses(); if (appProcesses == null) return false; for (RunningAppProcessInfo appProcess : appProcesses) &#123; // The name of the process that this object is associated with. if (appProcess.processName.equals(packageName) &amp;&amp; appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) &#123; return true; &#125; &#125; return false; &#125; &#125;); &#125;&#125;","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"React-Native类似支付宝的应用增删模块的简单实现","slug":"移动端学习/React-Native类似支付宝的应用增删模块的简单实现","date":"2018-08-16T16:00:00.000Z","updated":"2023-12-03T06:54:16.114Z","comments":true,"path":"2018/08/17/移动端学习/React-Native类似支付宝的应用增删模块的简单实现/","link":"","permalink":"https://zhoushaoting.com/2018/08/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/React-Native%E7%B1%BB%E4%BC%BC%E6%94%AF%E4%BB%98%E5%AE%9D%E7%9A%84%E5%BA%94%E7%94%A8%E5%A2%9E%E5%88%A0%E6%A8%A1%E5%9D%97%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/","excerpt":"项目中,涉及到类似支付宝的应用增删模块,这几天简单的实现了下.基本雏形实现了.后面的细节稍后再做处理.写篇博客记录下.","text":"项目中,涉及到类似支付宝的应用增删模块,这几天简单的实现了下.基本雏形实现了.后面的细节稍后再做处理.写篇博客记录下. 效果图: 实现思路 ==&gt;UI: 一开始采用外部ScrollView内部FlatList和ScrollView实现,后来发现有点臃肿,于是采用外部FlatList,内部ScrollView实现.然后发现其实代码差不太多…….浪费表情,其中依赖几个三方库:react-native-scrollable-tab-view,react-native-underline-tabbar.本来想使用SectionList实现的,但是感觉使用SectionList会更麻烦.逻辑: 通过数据中 id 和 tag实现 废话不多缩,首先,新建一个项目,添加相应库:第一种实现: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578/** * UI 通过 外部ScrollView 内部 FlatList或者 ScrollView 实现 (使用三方库react-native-scrollable-tab-view&amp;&amp;react-native-underline-tabbar) * 逻辑 通过 数据中 id 和 tag实现 * */import React, &#123; Component &#125; from &#x27;react&#x27;import &#123; StyleSheet, View, Image, Text, Dimensions, TouchableOpacity, FlatList, Linking, ScrollView&#125; from &#x27;react-native&#x27;const &#123; width &#125; = Dimensions.get(&#x27;window&#x27;)import ScrollableTabView from &#x27;react-native-scrollable-tab-view&#x27;import TabBar from &#x27;react-native-underline-tabbar&#x27;export default class One extends Component &#123; // 构造 constructor(props) &#123; super(props) // 初始状态 this.state = &#123; startEdit: false, // 是否点击了编辑 默认未点击false myApplyData: [], otherApplyData: [], applyData: [ &#123; title: &#x27;我的应用&#x27;, sub: [ &#123; id: &#x27;10086&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1fu39hosiwoj30j60qyq96.jpg&#x27;, name: &#x27;价费通10086&#x27;, &#125;, &#123; id: &#x27;10010&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&#x27;, name: &#x27;展示中心10010&#x27;, &#125; ], &#125;, &#123; title: &#x27;政务服务&#x27;, sub: [ &#123; subTitle: &#x27;政企&#x27;, sub: [ &#123; id: &#x27;10086&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1fu39hosiwoj30j60qyq96.jpg&#x27;, name: &#x27;价费通10086&#x27;, tag: true, &#125;, &#123; id: &#x27;10010&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&#x27;, name: &#x27;展示中心10010&#x27;, tag: true, &#125;, &#123; id: &#x27;9&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&#x27;, name: &#x27;办事平台&#x27;, tag: false, &#125;, &#123; id: &#x27;10&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&#x27;, name: &#x27;少儿图书馆&#x27;, tag: false, &#125;, ], &#125;, &#123; subTitle: &#x27;第三方服务&#x27;, sub: [ &#123; id: &#x27;11&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;12&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;13&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;14&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;15&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;16&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;17&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;18&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, ], &#125;, ], &#125;, &#123; title: &#x27;政企应用&#x27;, sub: [ &#123; subTitle: &#x27;按主题&#x27;, sub: [ &#123; id: &#x27;19&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftdtot8zd3j30ju0pt137.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;20&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ft5q7ys128j30sg10gnk5.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, ], &#125;, &#123; subTitle: &#x27;按部门&#x27;, sub: [ &#123; id: &#x27;21&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftdtot8zd3j30ju0pt137.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, ], &#125;, &#123; subTitle: &#x27;按证件&#x27;, sub: [ &#123; id: &#x27;22&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ft5q7ys128j30sg10gnk5.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, ], &#125;, &#123; subTitle: &#x27;主体周期&#x27;, sub: [ &#123; id: &#x27;23&#x27;, icon: &#x27;http://ww1.sinaimg.cn/large/0065oQSqly1fsoe3k2gkkj30g50niwla.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;24&#x27;, icon: &#x27;http://ww1.sinaimg.cn/large/0065oQSqly1fsoe3k2gkkj30g50niwla.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, ], &#125;, ], &#125;, ], &#125; &#125; componentDidMount() &#123; var data = this.state.applyData //赋值 我的应用数据 this.setState(&#123; myApplyData: data[0].sub, &#125;) //赋值 其他应用数据 this.setState(&#123; otherApplyData: data.slice(1), &#125;) &#125; /** * 点击编辑 * */ editAction = () =&gt; &#123; this.setState(&#123; startEdit:!this.state.startEdit &#125;) &#125; /** * 去除我的应用 * */ subAction = item =&gt; &#123; var data = this.state.myApplyData // 我的应用数据 var otherData = this.state.otherApplyData //其他应用数据 var selectId = item.item.id // 选中的id //修改我的应用数据源 data.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; data.splice(index,1) &#125; &#125;) //修改其他应用数据源 otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = false &#125; &#125;) &#125;) &#125;) // 重新赋值 this.setState(&#123; myApplyData:data, otherApplyData:otherData &#125;) &#125; /** * 点击其他应用 * */ otherAction =(item) =&gt;&#123; var data = this.state.myApplyData // 我的应用数据 var otherData = this.state.otherApplyData //其他应用数据 var selectId = item.id //id console.log(item) //根据数据中tag值判断 if(item.tag == true)&#123; //在我的应用当中,需要去除 data.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; data.splice(index,1) &#125; &#125;) otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = false &#125; &#125;) &#125;) &#125;) &#125;else &#123; //不在我的应用当中,需要添加 data.push(item) otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = true &#125; &#125;) &#125;) &#125;) &#125; // 重新赋值 this.setState(&#123; myApplyData:data, otherApplyData:otherData &#125;) &#125; /** * 去详情页面 * */ goDetailsAction = item =&gt; &#123; alert(&#x27;去详情&#x27;) &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &#123;/*我的应用条-编辑*/&#125; &lt;MyApplyEdit applyEditData=&#123;this.state.myApplyData&#125; editAction=&#123;() =&gt; &#123; this.editAction() &#125;&#125; /&gt; &lt;ScrollView&gt; &#123;/*我的应用*/&#125; &lt;View style=&#123;&#123; marginTop: 10, backgroundColor: &#x27;#ffffff&#x27; &#125;&#125;&gt; &lt;View style=&#123;&#123; flexDirection: &#x27;row&#x27;, alignItems: &#x27;center&#x27;, marginTop: 10, &#125;&#125; &gt; &lt;View style=&#123;&#123; marginLeft: 10, width: 8, height: 20, backgroundColor: &#x27;blue&#x27;, &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10, fontWeight: &#x27;700&#x27; &#125;&#125;&gt; 我的应用 &lt;/Text&gt; &lt;/View&gt; &lt;FlatList data=&#123;this.state.myApplyData&#125; style=&#123;&#123; marginBottom: 20 &#125;&#125; renderItem=&#123;item =&gt; this.renderMyApplyRow(item)&#125; keyExtractor=&#123;this.keyMyApplyExtractor&#125; numColumns=&#123;4&#125; /&gt; &lt;/View&gt; &#123;/*其他应用*/&#125; &#123;this.state.otherApplyData.map((item, index) =&gt; ( &lt;View key=&#123;index&#125;&gt; &#123;/*标题*/&#125; &lt;View style=&#123;&#123; paddingTop: 10, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;white&#x27;, flexDirection: &#x27;row&#x27;, alignItems: &#x27;center&#x27;, marginTop: 10, &#125;&#125; &gt; &lt;View style=&#123;&#123; marginLeft: 10, width: 8, height: 20, backgroundColor: &#x27;blue&#x27;, &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10, fontWeight: &#x27;700&#x27; &#125;&#125;&gt; &#123;item.title&#125; &lt;/Text&gt; &lt;/View&gt; &#123;/*主体内容*/&#125; &lt;ScrollableTabView style=&#123;&#123; backgroundColor: &#x27;white&#x27; &#125;&#125; tabBarActiveTextColor=&quot;#118EE9&quot; renderTabBar=&#123;() =&gt; &lt;TabBar underlineColor=&quot;#118EE9&quot; /&gt;&#125; &gt; &#123;item.sub.map((item, index) =&gt; ( &lt;View key=&#123;index&#125; tabLabel=&#123;&#123; label: item.subTitle &#125;&#125;&gt; &lt;ScrollView&gt; &lt;View style=&#123;&#123; flexDirection: &#x27;row&#x27;, height: 250, flexWrap: &#x27;wrap&#x27;, &#125;&#125; &gt; &#123;item.sub.map((item, index) =&gt; ( &lt;TouchableOpacity key=&#123;index&#125; onPress=&#123;() =&gt; this.goDetailsAction(item)&#125; &gt; &lt;View style=&#123;&#123; marginTop: 25 &#125;&#125;&gt; &lt;Image style=&#123;&#123; width: 55, height: 55, marginLeft: (width - 55 * 4) / 8, marginRight: (width - 55 * 4) / 8, &#125;&#125; source=&#123;&#123; uri: item.icon &#125;&#125; /&gt; &lt;Text style=&#123;&#123; alignSelf: &#x27;center&#x27;, marginTop: 15, marginBottom: 10, &#125;&#125; &gt; &#123;item.name&#125; &lt;/Text&gt; &lt;TouchableOpacity style=&#123;&#123; position: &#x27;absolute&#x27;, top: -10, right: 10, &#125;&#125; onPress=&#123;() =&gt; this.otherAction(item)&#125; &gt; &lt;Image source=&#123; item.tag ? require(&#x27;./image/sub.png&#x27;) : require(&#x27;./image/add.png&#x27;) &#125; style=&#123;&#123; opacity: this.state.startEdit ? 1 : 0, width: 15, height: 15, &#125;&#125; /&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ))&#125; &lt;/View&gt; &lt;/ScrollView&gt; &lt;/View&gt; ))&#125; &lt;/ScrollableTabView&gt; &lt;/View&gt; ))&#125; &lt;/ScrollView&gt; &lt;/View&gt; ) &#125; //-------------------------------我的应用start -------------------------------- /** * 我的应用render * */ renderMyApplyRow = item =&gt; ( &lt;TouchableOpacity onPress=&#123;() =&gt; this.goDetailsAction(item)&#125;&gt; &lt;View style=&#123;&#123; marginTop: 25 &#125;&#125;&gt; &lt;Image style=&#123;&#123; width: 55, height: 55, marginLeft: (width - 55 * 4) / 8, marginRight: (width - 55 * 4) / 8, &#125;&#125; source=&#123;&#123; uri: item.item.icon &#125;&#125; /&gt; &lt;Text style=&#123;&#123; alignSelf: &#x27;center&#x27;, marginTop: 15, marginBottom: 10 &#125;&#125;&gt; &#123;item.item.name&#125; &lt;/Text&gt; &lt;TouchableOpacity style=&#123;&#123; position: &#x27;absolute&#x27;, top: -10, right: 10 &#125;&#125; onPress=&#123;() =&gt; this.subAction(item)&#125; &gt; &lt;Image source=&#123;require(&#x27;./image/sub.png&#x27;)&#125; style=&#123;&#123; opacity: this.state.startEdit ? 1 : 0, width: 15, height: 15, &#125;&#125; /&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ) // 使用json中的key动态绑定key keyMyApplyExtractor = item =&gt; item.id //-------------------------------我的应用end --------------------------------&#125;// 上方的编辑 我的应用框 UIclass MyApplyEdit extends React.Component &#123; render() &#123; const &#123; applyEditData &#125; = this.props return ( &lt;View style=&#123;&#123; paddingTop: 5, paddingBottom: 5, alignItems: &#x27;center&#x27;, flexDirection: &#x27;row&#x27;, backgroundColor: &#x27;#ffffff&#x27;, &#125;&#125; &gt; &lt;Text style=&#123;&#123; marginLeft: 10, fontWeight: &#x27;700&#x27; &#125;&#125;&gt;我的应用&lt;/Text&gt; &lt;ScrollView showsHorizontalScrollIndicator=&#123;false&#125; showsVerticalScrollIndicator=&#123;false&#125; horizontal=&#123;true&#125; style=&#123;&#123; marginRight: 15 &#125;&#125; &gt; &#123;applyEditData.map((item, index) =&gt; ( &lt;Image key=&#123;index&#125; style=&#123;&#123; width: 30, height: 30, marginLeft: 10 &#125;&#125; source=&#123;&#123; uri: item.icon &#125;&#125; /&gt; ))&#125; &lt;/ScrollView&gt; &lt;TouchableOpacity onPress=&#123;() =&gt; this.props.editAction()&#125;&gt; &lt;View style=&#123;&#123; borderRadius: 4, marginRight: 10, paddingTop: 5, paddingBottom: 5, paddingLeft: 10, paddingRight: 10, borderWidth: 1, borderColor: &#x27;blue&#x27;, &#125;&#125; &gt; &lt;Text style=&#123;&#123; color: &#x27;blue&#x27; &#125;&#125;&gt;编辑&lt;/Text&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, &#125;, icon: &#123; width: 22, height: 22, &#125;,&#125;) 第二种实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571/** * UI 通过 外部FlatList 内部 ScrollView + view 实现 (使用三方库react-native-scrollable-tab-view&amp;&amp;react-native-underline-tabbar) * 逻辑 通过 数据中 id 和 tag实现 * */import React, &#123; Component &#125; from &#x27;react&#x27;import &#123; StyleSheet, View, Image, Text, Dimensions, TouchableOpacity, FlatList, Linking, ScrollView&#125; from &#x27;react-native&#x27;const &#123; width &#125; = Dimensions.get(&#x27;window&#x27;)import ScrollableTabView from &#x27;react-native-scrollable-tab-view&#x27;import TabBar from &#x27;react-native-underline-tabbar&#x27;export default class Two extends Component &#123; // 构造 constructor(props) &#123; super(props) // 初始状态 this.state = &#123; startEdit: false, // 是否点击了编辑 默认未点击false myApplyData: [], otherApplyData: [], applyData: [ &#123; title: &#x27;我的应用&#x27;, sub: [ &#123; id: &#x27;10086&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1fu39hosiwoj30j60qyq96.jpg&#x27;, name: &#x27;价费通10086&#x27;, &#125;, &#123; id: &#x27;10010&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&#x27;, name: &#x27;展示中心10010&#x27;, &#125; ], &#125;, &#123; title: &#x27;政务服务&#x27;, sub: [ &#123; subTitle: &#x27;政企&#x27;, sub: [ &#123; id: &#x27;10086&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1fu39hosiwoj30j60qyq96.jpg&#x27;, name: &#x27;价费通10086&#x27;, tag: true, &#125;, &#123; id: &#x27;10010&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&#x27;, name: &#x27;展示中心10010&#x27;, tag: true, &#125;, &#123; id: &#x27;9&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&#x27;, name: &#x27;办事平台&#x27;, tag: false, &#125;, &#123; id: &#x27;10&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&#x27;, name: &#x27;少儿图书馆&#x27;, tag: false, &#125;, ], &#125;, &#123; subTitle: &#x27;第三方服务&#x27;, sub: [ &#123; id: &#x27;11&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;12&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;13&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftzsj15hgvj30sg15hkbw.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;14&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;15&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqgy1ftwcw4f4a5j30sg10j1g9.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;16&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;17&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;18&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftu6gl83ewj30k80tites.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, ], &#125;, ], &#125;, &#123; title: &#x27;政企应用&#x27;, sub: [ &#123; subTitle: &#x27;按主题&#x27;, sub: [ &#123; id: &#x27;19&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftdtot8zd3j30ju0pt137.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;20&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ft5q7ys128j30sg10gnk5.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, ], &#125;, &#123; subTitle: &#x27;按部门&#x27;, sub: [ &#123; id: &#x27;21&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ftdtot8zd3j30ju0pt137.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, ], &#125;, &#123; subTitle: &#x27;按证件&#x27;, sub: [ &#123; id: &#x27;22&#x27;, icon: &#x27;https://ww1.sinaimg.cn/large/0065oQSqly1ft5q7ys128j30sg10gnk5.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, ], &#125;, &#123; subTitle: &#x27;主体周期&#x27;, sub: [ &#123; id: &#x27;23&#x27;, icon: &#x27;http://ww1.sinaimg.cn/large/0065oQSqly1fsoe3k2gkkj30g50niwla.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, &#123; id: &#x27;24&#x27;, icon: &#x27;http://ww1.sinaimg.cn/large/0065oQSqly1fsoe3k2gkkj30g50niwla.jpg&#x27;, name: &#x27;价费通&#x27;, tag: false, &#125;, ], &#125;, ], &#125;, ], &#125; &#125; componentDidMount() &#123; var data = this.state.applyData //赋值 我的应用数据 this.setState(&#123; myApplyData: data[0].sub, &#125;) //赋值 其他应用数据 this.setState(&#123; otherApplyData: data.slice(1), &#125;) &#125; render() &#123; return ( &lt;View&gt; &#123;/*我的应用条-编辑*/&#125; &lt;MyApplyEdit applyEditData=&#123;this.state.myApplyData&#125; editAction=&#123;() =&gt; &#123; this.editAction() &#125;&#125; /&gt; &#123;/*应用列表*/&#125; &lt;FlatList data=&#123;this.state.otherApplyData&#125; style=&#123;&#123; marginBottom: 20 &#125;&#125; ListHeaderComponent=&#123;this.ListHeaderComponent&#125; renderItem=&#123;item =&gt; this.renderItem(item)&#125; keyExtractor=&#123;this.keyExtractor&#125; /&gt; &lt;/View&gt; ) &#125; /** * 去详情 * */ goDetailsAction =(item) =&gt;&#123; alert(&#x27;去详情&#x27;) &#125; /** * 去除我的应用 * */ subAction = item =&gt; &#123; var data = this.state.myApplyData // 我的应用数据 var otherData = this.state.otherApplyData //其他应用数据 var selectId = item.id // 选中的id //修改我的应用数据源 data.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; data.splice(index,1) &#125; &#125;) //修改其他应用数据源 otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = false &#125; &#125;) &#125;) &#125;) // 重新赋值 this.setState(&#123; myApplyData:data, otherApplyData:otherData &#125;) &#125; /** * 点击其他应用 * */ otherAction =(item) =&gt;&#123; var data = this.state.myApplyData // 我的应用数据 var otherData = this.state.otherApplyData //其他应用数据 var selectId = item.id //id console.log(item) //根据数据中tag值判断 if(item.tag == true)&#123; //在我的应用当中,需要去除 data.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; data.splice(index,1) &#125; &#125;) otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = false &#125; &#125;) &#125;) &#125;) &#125;else &#123; //不在我的应用当中,需要添加 data.push(item) otherData.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; item.sub.map((item,index) =&gt;&#123; if(item.id == selectId)&#123; item.tag = true &#125; &#125;) &#125;) &#125;) &#125; // 重新赋值 this.setState(&#123; myApplyData:data, otherApplyData:otherData &#125;) &#125; ListHeaderComponent =()=&gt;&#123; var data = this.state.myApplyData return( &lt;View style=&#123;&#123;marginTop:10&#125;&#125;&gt; &lt;HeaderView title=&#x27;我的应用&#x27;/&gt; &lt;View style=&#123;&#123;flexDirection:&#x27;row&#x27;,backgroundColor:&#x27;#ffffff&#x27;&#125;&#125;&gt; &#123; data.map((item,index) =&gt;( &lt;TouchableOpacity key=&#123;index&#125; onPress=&#123;() =&gt; this.goDetailsAction(item)&#125;&gt; &lt;View style=&#123;&#123; marginTop: 25 &#125;&#125;&gt; &lt;Image style=&#123;&#123; width: 55, height: 55, marginLeft: (width - 55 * 4) / 8, marginRight: (width - 55 * 4) / 8, &#125;&#125; source=&#123;&#123; uri: item.icon &#125;&#125; /&gt; &lt;Text style=&#123;&#123; alignSelf: &#x27;center&#x27;, marginTop: 15, marginBottom: 10 &#125;&#125;&gt; &#123;item.name&#125; &lt;/Text&gt; &lt;TouchableOpacity style=&#123;&#123; position: &#x27;absolute&#x27;, top: -10, right: 10 &#125;&#125; onPress=&#123;() =&gt; this.subAction(item)&#125; &gt; &lt;Image source=&#123;require(&#x27;./image/sub.png&#x27;)&#125; style=&#123;&#123; opacity: this.state.startEdit ? 1 : 0, width: 15, height: 15, &#125;&#125; /&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; )) &#125; &lt;/View&gt; &lt;/View&gt; ) &#125; renderItem =(item)=&gt;&#123; console.log(item) return( &lt;View style=&#123;&#123;marginTop:10&#125;&#125;&gt; &lt;HeaderView title=&#123;item.item.title&#125;/&gt; &lt;ScrollableTabView style=&#123;&#123; backgroundColor: &#x27;white&#x27; &#125;&#125; tabBarActiveTextColor=&quot;#118EE9&quot; renderTabBar=&#123;() =&gt; &lt;TabBar underlineColor=&quot;#118EE9&quot; /&gt;&#125; &gt; &#123;item.item.sub.map((item, index) =&gt; ( &lt;View key=&#123;index&#125; tabLabel=&#123;&#123; label: item.subTitle &#125;&#125;&gt; &lt;ScrollView&gt; &lt;View style=&#123;&#123; flexDirection: &#x27;row&#x27;, height: 250, flexWrap: &#x27;wrap&#x27;, &#125;&#125; &gt; &#123;item.sub.map((item, index) =&gt; ( &lt;TouchableOpacity key=&#123;index&#125; onPress=&#123;() =&gt; this.goDetailsAction(item)&#125; &gt; &lt;View style=&#123;&#123; marginTop: 25 &#125;&#125;&gt; &lt;Image style=&#123;&#123; width: 55, height: 55, marginLeft: (width - 55 * 4) / 8, marginRight: (width - 55 * 4) / 8, &#125;&#125; source=&#123;&#123; uri: item.icon &#125;&#125; /&gt; &lt;Text style=&#123;&#123; alignSelf: &#x27;center&#x27;, marginTop: 15, marginBottom: 10, &#125;&#125; &gt; &#123;item.name&#125; &lt;/Text&gt; &lt;TouchableOpacity style=&#123;&#123; position: &#x27;absolute&#x27;, top: -10, right: 10, &#125;&#125; onPress=&#123;() =&gt; this.otherAction(item)&#125; &gt; &lt;Image source=&#123; item.tag ? require(&#x27;./image/sub.png&#x27;) : require(&#x27;./image/add.png&#x27;) &#125; style=&#123;&#123; opacity: this.state.startEdit ? 1 : 0, width: 15, height: 15, &#125;&#125; /&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ))&#125; &lt;/View&gt; &lt;/ScrollView&gt; &lt;/View&gt; ))&#125; &lt;/ScrollableTabView&gt; &lt;/View&gt; ) &#125; keyExtractor = item =&gt; item.title /** * 点击编辑 * */ editAction = () =&gt; &#123; this.setState(&#123; startEdit:!this.state.startEdit &#125;) &#125;&#125;// 上方的编辑 我的应用框 UIclass MyApplyEdit extends React.Component &#123; render() &#123; const &#123; applyEditData &#125; = this.props return ( &lt;View style=&#123;&#123; paddingTop: 5, paddingBottom: 5, alignItems: &#x27;center&#x27;, flexDirection: &#x27;row&#x27;, backgroundColor: &#x27;#ffffff&#x27;, &#125;&#125; &gt; &lt;Text style=&#123;&#123; marginLeft: 10, fontWeight: &#x27;700&#x27; &#125;&#125;&gt;我的应用&lt;/Text&gt; &lt;ScrollView showsHorizontalScrollIndicator=&#123;false&#125; showsVerticalScrollIndicator=&#123;false&#125; horizontal=&#123;true&#125; style=&#123;&#123; marginRight: 15 &#125;&#125; &gt; &#123;applyEditData.map((item, index) =&gt; ( &lt;Image key=&#123;index&#125; style=&#123;&#123; width: 30, height: 30, marginLeft: 10 &#125;&#125; source=&#123;&#123; uri: item.icon &#125;&#125; /&gt; ))&#125; &lt;/ScrollView&gt; &lt;TouchableOpacity onPress=&#123;() =&gt; this.props.editAction()&#125;&gt; &lt;View style=&#123;&#123; borderRadius: 4, marginRight: 10, paddingTop: 5, paddingBottom: 5, paddingLeft: 10, paddingRight: 10, borderWidth: 1, borderColor: &#x27;blue&#x27;, &#125;&#125; &gt; &lt;Text style=&#123;&#123; color: &#x27;blue&#x27; &#125;&#125;&gt;编辑&lt;/Text&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ) &#125;&#125;// 头视图class HeaderView extends React.Component &#123; render() &#123; const &#123; title &#125; = this.props return ( &lt;View style=&#123;&#123; backgroundColor:&#x27;#ffffff&#x27;, flexDirection: &#x27;row&#x27;, alignItems: &#x27;center&#x27;, paddingTop:10 &#125;&#125; &gt; &lt;View style=&#123;&#123; marginLeft: 10, width: 8, height: 20, backgroundColor: &#x27;blue&#x27;, &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10, fontWeight: &#x27;700&#x27; &#125;&#125;&gt; &#123;title&#125; &lt;/Text&gt; &lt;/View&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, &#125;, icon: &#123; width: 22, height: 22, &#125;,&#125;) 以后就是两种实现,基本的功能实现了,至于细节优化点等日后慢慢再做吧.源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"React-Native\"收起-展开\"功能实现","slug":"移动端学习/React-Native<收起-展开>功能实现","date":"2018-08-10T16:00:00.000Z","updated":"2023-12-03T06:54:00.873Z","comments":true,"path":"2018/08/11/移动端学习/React-Native<收起-展开>功能实现/","link":"","permalink":"https://zhoushaoting.com/2018/08/11/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/React-Native%3C%E6%94%B6%E8%B5%B7-%E5%B1%95%E5%BC%80%3E%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/","excerpt":"近来公司的项目里面涉及到一个类似”收起-展开”的UI功能模块,先是在网上猥琐一番之后,并未发现什么.无奈之下,只能自己手撸一个了.","text":"近来公司的项目里面涉及到一个类似”收起-展开”的UI功能模块,先是在网上猥琐一番之后,并未发现什么.无奈之下,只能自己手撸一个了. 一开始做了个”互斥收起-展开”,公司可能不太满意,让我抄另外一个APP”非互斥收起-展开”,哎…先上图:非互斥缩一缩 互斥缩一缩 实现原理很简单:非互斥缩一缩: 先在json数据里面定义type标示,标示一级展开|收起状态,在UI里面就根据这个标示判断是收起还是展开,而二级收起|展开需要为每组数据定义一个唯一标示.互斥缩一缩:先定义一个state,根据该state来显示收起UI还是展开,因为state只有一个,也就形成了只有一组是展开.同时,在判断二次展开|收起这里也需要在json里面定义一个唯一标示.这些数据标示可以事先和后端人员商量好,让后端人员帮你弄好,也可以自己拿到数据之后再插入.废话不多少,戴起磨砂手套开始撸!!!直接上源码:非互斥缩一缩 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304/* eslint-disable */import React, &#123; Component &#125; from &#x27;react&#x27;import &#123; StyleSheet, View, Image, Text, Dimensions, TouchableOpacity, FlatList, Linking,&#125; from &#x27;react-native&#x27;const &#123; width &#125; = Dimensions.get(&#x27;window&#x27;)export default class One extends Component &#123; // 构造 constructor(props) &#123; super(props) // 初始状态 this.row = null this.state = &#123; governmentData: [ &#123; id: &#x27;0&#x27;, name: &#x27;社会保障局&#x27;, type: false, childs: [ &#123; index: &#x27;00&#x27;, name: &#x27;资料教室&#x27;, type: false, tel: &#x27;5233&#x27;, message: &#x27;查询资料,注销档案&#x27;, &#125;, &#123; name: &#x27;后勤部&#x27;, type: false, index: &#x27;01&#x27;, tel: &#x27;1645682&#x27;, message: &#x27;不对外服务&#x27;, &#125;, ], &#125;, &#123; id: &#x27;1&#x27;, name: &#x27;卫生局&#x27;, type: false, childs: [ &#123; name: &#x27;妇产科&#x27;, type: false, index: &#x27;10&#x27;, tel: &#x27;112转678&#x27;, message: &#x27;接待孕妇,待产孕妇,军嫂预先&#x27;, &#125;, &#123; name: &#x27;儿科&#x27;, type: false, index: &#x27;11&#x27;, tel: &#x27;112转008&#x27;, message: &#x27;小于12周岁儿童就医&#x27;, &#125;, &#123; name: &#x27;失恋科&#x27;, type: false, index: &#x27;12&#x27;, tel: &#x27;112转出去&#x27;, message: &#x27;回家玩蛋去!!!&#x27;, &#125;, ], &#125;, &#123; id: &#x27;2&#x27;, name: &#x27;神盾局&#x27;, type: false, childs: [ &#123; name: &#x27;城管大队&#x27;, type: false, index: &#x27;20&#x27;, tel: &#x27;110&#x27;, title: &#x27;打打打&#x27;, message: &#x27;镇压起义&#x27;, &#125;, ], &#125;, ], isRefresh: true, index: -1, //默认展开负一行 indexIndex: -1, &#125; &#125; componentDidMount() &#123; this.flatlist = null this.setState(&#123; isRefresh: false, &#125;) &#125; /** * 下拉刷新 * */ onRefresh = () =&gt; &#123; this.setState(&#123; isRefresh: false, &#125;) &#125; /** * 点击一级 * */ itemOnclick = item =&gt; &#123; var data = this.state.governmentData data.map((itemm, i) =&gt; &#123; if (i == item.index) &#123; itemm.type = !itemm.type &#125; &#125;) this.setState(&#123; governmentData: data, &#125;) &#125; /** * 点击二级 * */ itemitemOnclick = e =&gt; &#123; var data = this.state.governmentData data.map((item, index) =&gt; &#123; item.childs.map((item, index) =&gt; &#123; if (item.index == e.index) &#123; item.type = !item.type &#125; &#125;) &#125;) this.setState(&#123; governmentData: data, &#125;) &#125; /** * 打电话 * */ tellPhone = item =&gt; &#123; Linking.openURL(`tel:$&#123;item.tel&#125;`) &#125; /** * FlatList render * */ renderRow = item =&gt; ( &lt;View ref=&#123;item.index&#125;&gt; &lt;View&gt; &lt;TouchableOpacity onPress=&#123;() =&gt; this.itemOnclick(item)&#125;&gt; &lt;View style=&#123;&#123; flexDirection: &#x27;row&#x27;, backgroundColor: &#x27;white&#x27;, height: 30, alignItems: &#x27;center&#x27;, &#125;&#125; &gt; &lt;View style=&#123;&#123; marginLeft: 5, width: 4, height: 10, paddingTop: 7, paddingBottom: 7, backgroundColor:&#x27;red&#x27; &#125;&#125; /&gt; &lt;Text style=&#123;&#123; color: &#x27;#333333&#x27;, marginLeft: 5, fontSize: 16 &#125;&#125;&gt; &#123;item.item.name&#125; &lt;/Text&gt; &#123;/* 右边箭头 */&#125; &lt;Image source=&#123; item.item.type ? require(&#x27;./image/btnDown.png&#x27;) : require(&#x27;./image/right.png&#x27;) &#125; style=&#123;&#123; position: &#x27;absolute&#x27;, right: 15, width: 15, height: 15 &#125;&#125; /&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; &lt;View style=&#123;&#123; backgroundColor: &#x27;rgb(228,228,228)&#x27;, width: width, height: 1, &#125;&#125; /&gt; &lt;/View&gt; &#123;item.item.type ? item.item.childs.map((item, index) =&gt; ( &lt;View style=&#123;&#123; backgroundColor: &#x27;white&#x27; &#125;&#125; key=&#123;index&#125;&gt; &lt;View style=&#123;&#123; marginLeft: 7, marginTop: 10 &#125;&#125;&gt; &lt;View style=&#123;&#123; flexDirection: &#x27;row&#x27; &#125;&#125;&gt; &lt;Image source=&#123; item.type ? require(&#x27;./image/btnDownB.png&#x27;) : require(&#x27;./image/btnRightB.png&#x27;) &#125; style=&#123;&#123; width: 10, height: 10 &#125;&#125; /&gt; &lt;Text onPress=&#123;() =&gt; this.itemitemOnclick(item)&#125; style=&#123;&#123; marginLeft: 7 &#125;&#125; &gt; &#123;item.name&#125; &lt;/Text&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &#x27;rgb(228,228,228)&#x27;, width: width, height: 1, marginTop: 10, &#125;&#125; /&gt; &lt;/View&gt; &#123;item.type ? ( &lt;View&gt; &lt;View style=&#123;&#123; height: 40, alignItems: &#x27;center&#x27;, flexDirection: &#x27;row&#x27;, &#125;&#125; &gt; &lt;TouchableOpacity style=&#123;&#123; flexDirection: &#x27;row&#x27; &#125;&#125; onPress=&#123;() =&gt; this.tellPhone(item)&#125; &gt; &lt;Image source=&#123;require(&#x27;./image/phone.png&#x27;)&#125; style=&#123;&#123; marginLeft: 10, width: 15, height: 15 &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10 &#125;&#125;&gt;电话 &#123;item.tel&#125;&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &#x27;rgb(228,228,228)&#x27;, width: width, height: 1, &#125;&#125; /&gt; &lt;View style=&#123;&#123; height: 40, alignItems: &#x27;center&#x27;, flexDirection: &#x27;row&#x27;, &#125;&#125; &gt; &lt;Image source=&#123;require(&#x27;./image/tlak.png&#x27;)&#125; style=&#123;&#123; marginLeft: 10, width: 15, height: 15 &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10 &#125;&#125;&gt;留言 &#123;item.message&#125;&lt;/Text&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &#x27;rgb(228,228,228)&#x27;, width: width, height: 1, &#125;&#125; /&gt; &lt;/View&gt; ) : null&#125; &lt;/View&gt; )) : null&#125; &lt;/View&gt; ) render() &#123; return ( &lt;FlatList data=&#123;this.state.governmentData&#125; renderItem=&#123;this.renderRow&#125; onRefresh=&#123;() =&gt; this.onRefresh()&#125; refreshing=&#123;this.state.isRefresh&#125; /&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, &#125;, icon: &#123; width: 22, height: 22, &#125;,&#125;) 互斥缩一缩 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277/* eslint-disable */import React, &#123; Component &#125; from &#x27;react&#x27;import &#123; StyleSheet, View, Image, Text, Dimensions, TouchableOpacity, FlatList, Linking,&#125; from &#x27;react-native&#x27;const &#123; width &#125; = Dimensions.get(&#x27;window&#x27;)export default class Two extends Component &#123; // 构造 constructor(props) &#123; super(props) // 初始状态 this.state = &#123; governmentData: [ &#123; name: &#x27;社会保障局&#x27;, childs: [ &#123; index:0, name: &#x27;资料教室&#x27;, tel: &#x27;5233&#x27;, message: &#x27;查询资料,注销档案&#x27;, &#125;, &#123; index:1, name: &#x27;后勤部&#x27;, tel: &#x27;1645682&#x27;, message: &#x27;不对外服务&#x27;, &#125;, ], &#125;, &#123; name: &#x27;卫生局&#x27;, childs: [ &#123; index:0, name: &#x27;妇产科&#x27;, tel: &#x27;112转678&#x27;, message: &#x27;接待孕妇,待产孕妇,军嫂预先&#x27;, &#125;, &#123; index:1, name: &#x27;儿科&#x27;, tel: &#x27;112转008&#x27;, message: &#x27;小于12周岁儿童就医&#x27;, &#125;, &#123; index:2, name: &#x27;失恋科&#x27;, tel: &#x27;112转出去&#x27;, message: &#x27;回家玩蛋去!!!&#x27;, &#125;, ], &#125;, &#123; name: &#x27;神盾局&#x27;, childs: [ &#123; index:0, name: &#x27;城管大队&#x27;, tel: &#x27;110&#x27;, title: &#x27;打打打&#x27;, message: &#x27;镇压起义&#x27;, &#125;, ], &#125;, ], isRefresh: true, index: -1, //默认展开负一行 indexIndex: -1, &#125; &#125; componentDidMount() &#123; this.setState(&#123; isRefresh: false, &#125;) &#125; /** * 下拉刷新 * */ onRefresh = () =&gt; &#123; this.setState(&#123; isRefresh: false, &#125;) &#125; /** * 点击一级 * */ itemOnclick = item =&gt; &#123; this.setState(&#123; index: item.index, indexIndex: -1 &#125;) &#125; /** * 点击二级 * */ itemitemOnclick = e =&gt; &#123; this.setState(&#123; indexIndex: e.index, &#125;) &#125; /** * 打电话 * */ tellPhone = item =&gt; &#123; Linking.openURL(`tel:$&#123;item.tel&#125;`) &#125; /** * FlatList render * */ renderRow = item =&gt; ( &lt;View ref=&#123;item.index&#125;&gt; &lt;View&gt; &lt;TouchableOpacity onPress=&#123;() =&gt; this.itemOnclick(item)&#125;&gt; &lt;View style=&#123;&#123; flexDirection: &#x27;row&#x27;, backgroundColor: &#x27;white&#x27;, height: 30, alignItems: &#x27;center&#x27;, &#125;&#125; &gt; &lt;View style=&#123;&#123; marginLeft: 5, width: 4, height: 10, paddingTop: 7, paddingBottom: 7, backgroundColor:&#x27;red&#x27; &#125;&#125; /&gt; &lt;Text style=&#123;&#123; color: &#x27;#333333&#x27;, marginLeft: 5, fontSize: 16 &#125;&#125;&gt; &#123;item.item.name&#125; &lt;/Text&gt; &#123;/* 右边箭头 */&#125; &lt;Image source=&#123; item.index == this.state.index ? require(&#x27;./image/btnDown.png&#x27;) : require(&#x27;./image/right.png&#x27;) &#125; style=&#123;&#123; position: &#x27;absolute&#x27;, right: 15, width: 15, height: 15 &#125;&#125; /&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; &lt;View style=&#123;&#123; backgroundColor: &#x27;rgb(228,228,228)&#x27;, width: width, height: 1, &#125;&#125; /&gt; &lt;/View&gt; &#123;item.index == this.state.index ? item.item.childs.map((item, index) =&gt; ( &lt;View style=&#123;&#123; backgroundColor: &#x27;white&#x27; &#125;&#125; key=&#123;index&#125;&gt; &lt;View style=&#123;&#123; marginLeft: 7, marginTop: 10 &#125;&#125;&gt; &lt;View style=&#123;&#123; flexDirection: &#x27;row&#x27; &#125;&#125;&gt; &lt;Image source=&#123; index == this.state.indexIndex ? require(&#x27;./image/btnDownB.png&#x27;) : require(&#x27;./image/btnRightB.png&#x27;) &#125; style=&#123;&#123; width: 10, height: 10 &#125;&#125; /&gt; &lt;Text onPress=&#123;() =&gt; this.itemitemOnclick(item)&#125; style=&#123;&#123; marginLeft: 7 &#125;&#125; &gt; &#123;item.name&#125; &lt;/Text&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &#x27;rgb(228,228,228)&#x27;, width: width, height: 1, marginTop: 10, &#125;&#125; /&gt; &lt;/View&gt; &#123;item.index == this.state.indexIndex ? ( &lt;View&gt; &lt;View style=&#123;&#123; height: 40, alignItems: &#x27;center&#x27;, flexDirection: &#x27;row&#x27;, &#125;&#125; &gt; &lt;TouchableOpacity style=&#123;&#123; flexDirection: &#x27;row&#x27; &#125;&#125; onPress=&#123;() =&gt; this.tellPhone(item)&#125; &gt; &lt;Image source=&#123;require(&#x27;./image/phone.png&#x27;)&#125; style=&#123;&#123; marginLeft: 10, width: 15, height: 15 &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10 &#125;&#125;&gt;电话 &#123;item.tel&#125;&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &#x27;rgb(228,228,228)&#x27;, width: width, height: 1, &#125;&#125; /&gt; &lt;View style=&#123;&#123; height: 40, alignItems: &#x27;center&#x27;, flexDirection: &#x27;row&#x27;, &#125;&#125; &gt; &lt;Image source=&#123;require(&#x27;./image/tlak.png&#x27;)&#125; style=&#123;&#123; marginLeft: 10, width: 15, height: 15 &#125;&#125; /&gt; &lt;Text style=&#123;&#123; marginLeft: 10 &#125;&#125;&gt;留言 &#123;item.message&#125;&lt;/Text&gt; &lt;/View&gt; &lt;View style=&#123;&#123; backgroundColor: &#x27;rgb(228,228,228)&#x27;, width: width, height: 1, &#125;&#125; /&gt; &lt;/View&gt; ) : null&#125; &lt;/View&gt; )) : null&#125; &lt;/View&gt; ) render() &#123; return ( &lt;FlatList data=&#123;this.state.governmentData&#125; renderItem=&#123;this.renderRow&#125; onRefresh=&#123;() =&gt; this.onRefresh()&#125; refreshing=&#123;this.state.isRefresh&#125; /&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, &#125;, icon: &#123; width: 22, height: 22, &#125;,&#125;) 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"redux和react-navigation的结合使用","slug":"移动端学习/redux和react-navigation的结合使用","date":"2018-07-29T10:36:14.000Z","updated":"2023-12-03T07:16:37.322Z","comments":true,"path":"2018/07/29/移动端学习/redux和react-navigation的结合使用/","link":"","permalink":"https://zhoushaoting.com/2018/07/29/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/redux%E5%92%8Creact-navigation%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/","excerpt":"react-navigation 和 redux 的使用,这个网上很多.这里介绍下两者的结合使用.","text":"react-navigation 和 redux 的使用,这个网上很多.这里介绍下两者的结合使用. 我代码的目录结构是: 使用的三方库是: 1234567891011121314151617181920212223242526272829&#123; &quot;name&quot;: &quot;RN_nav&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;, &quot;test&quot;: &quot;jest&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;react&quot;: &quot;16.3.0-alpha.1&quot;, &quot;react-native&quot;: &quot;0.54.0&quot;, &quot;react-navigation&quot;: &quot;^1.5.1&quot;, &quot;react-navigation-redux-helpers&quot;: &quot;^1.0.3&quot;, &quot;react-redux&quot;: &quot;^5.0.7&quot;, &quot;redux&quot;: &quot;^3.7.2&quot;, &quot;redux-actions&quot;: &quot;^2.3.0&quot;, &quot;redux-logger&quot;: &quot;^3.0.6&quot;, &quot;redux-thunk&quot;: &quot;^2.2.0&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;babel-jest&quot;: &quot;22.4.1&quot;, &quot;babel-preset-react-native&quot;: &quot;4.0.0&quot;, &quot;jest&quot;: &quot;22.4.2&quot;, &quot;react-test-renderer&quot;: &quot;16.3.0-alpha.1&quot; &#125;, &quot;jest&quot;: &#123; &quot;preset&quot;: &quot;react-native&quot; &#125;&#125; 下面是各文件的源码.App.js1234567891011121314151617181920/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React,&#123; Component &#125; from &#x27;react&#x27;;import &#123;Provider&#125; from &#x27;react-redux&#x27;;import store from &#x27;./src/store&#x27;;import NavigatorPages from &#x27;./src/AllPages/TabNavigatorPage&#x27;;type Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;Provider store=&#123;store&#125;&gt; &lt;NavigatorPages/&gt; &lt;/Provider&gt; ); &#125;&#125; Allreducerstore.js123456789101112131415161718192021import &#123;createStore,applyMiddleware&#125; from &#x27;redux&#x27;;//中间件import logger from &#x27;redux-logger&#x27;;import thunk from &#x27;redux-thunk&#x27;;import &#123; createReduxBoundAddListener, createReactNavigationReduxMiddleware,&#125; from &#x27;react-navigation-redux-helpers&#x27;;//reducersimport reducers from &#x27;./Allreducer/index&#x27;;//引用react-navigation-redux-helpers组件手动创建中间件,接受state并返回新的state,让路由刷新// Note: createReactNavigationReduxMiddleware must be run before createReduxBoundAddListenerconst middleware = createReactNavigationReduxMiddleware( &quot;App&quot;, state =&gt; state.nav,);export const addListener = createReduxBoundAddListener(&quot;App&quot;);const middleWares = [middleware,thunk,logger];export default applyMiddleware(...middleWares)(createStore)(reducers); FirstPageReducer.js1234567891011121314151617181920212223import &#123;handleActions&#125; from &#x27;redux-actions&#x27;;const initialState = &#123; zglNum:0&#125;;export default handleActions(&#123; ADD:(state,action)=&gt;&#123; // alert(state.zglNum) return &#123; ...state, zglNum:state.zglNum + 1, secondState:&#x27;iOS&#x27; &#125; &#125;, SUB:(state,action)=&gt;&#123; return &#123; ...state, zglNum:state.zglNum - 1, secondState:&#x27;Android&#x27; &#125; &#125;&#125;,initialState); SecondPageReducer.js12345678910111213141516/** * Created by shaotingzhou on 2018/3/6. */import &#123;handleActions&#125; from &#x27;redux-actions&#x27;;const initialState = &#123; xxx:0&#125;;export default handleActions(&#123; SECOND:(state,action)=&gt;&#123; return &#123; ...state, xxx:2 &#125; &#125;,&#125;,initialState); index.js12345678910import &#123; combineReducers &#125; from &#x27;redux&#x27;;import TabNavigatorReducer from &#x27;./TabNavigatorReducer&#x27;;import FirstPageReducer from &#x27;./FirstPageReducer&#x27;;import SecondPageReducer from &#x27;./SecondPageReducer&#x27;;const reducers = combineReducers(&#123; TabNavigatorReducer, FirstPageReducer, SecondPageReducer,&#125;);export default reducers; AllPagesFirstPage.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687import React, &#123; PureComponent &#125; from &#x27;react&#x27;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &#x27;react-native&#x27;;import &#123;connect&#125; from &#x27;react-redux&#x27;;import &#123;ADD,SUB&#125; from &#x27;../Actions/FirstPageActions&#x27;;class FirstPage extends PureComponent &#123; static navigationOptions = &#123; title:&#x27;首页&#x27;, &#125;; // componentWillUpdate()&#123; // alert(this.props.status); // // &#125; // componentDidUpdate()&#123; // alert(this.props.status); // &#125; // ES6 props // static defaultProps=&#123; // zglNum:0, // &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;&#123; this.props.dispatch(ADD()); &#125;&#125; &gt; &lt;Text style=&#123;styles.welcome&#125;&gt; + &lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;Text style=&#123;styles.welcome&#125;&gt; &#123;this.props.zglNum&#125; &lt;/Text&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;&#123; this.props.dispatch(SUB()); &#125;&#125; &gt; &lt;Text style=&#123;styles.welcome&#125;&gt; - &lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, textView: &#123; fontSize: 16, textAlign: &#x27;center&#x27;, margin: 10, color:&#x27;red&#x27; &#125;,&#125;);const mapStateToProps = (store)=&gt;(&#123; zglNum: store.FirstPageReducer.zglNum //数字&#125;);export default connect(mapStateToProps)(FirstPage); SecondPage.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061import React, &#123; PureComponent &#125; from &#x27;react&#x27;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &#x27;react-native&#x27;;import &#123;connect&#125; from &#x27;react-redux&#x27;;import &#123;SECOND&#125; from &#x27;../Actions/SecondPageActions&#x27;;class SecondPage extends PureComponent &#123; static navigationOptions = &#123; title:&#x27;第二&#x27; &#125;; // ES6 props static defaultProps=&#123; secondState:&#x27;默认&#x27;, &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125; &gt; &lt;Text onPress=&#123;()=&gt;this.onClick()&#125;&gt;&#123;this.props.secondState&#125;&lt;/Text&gt; &lt;/View&gt; ); &#125; onClick =() =&gt;&#123; this.props.navigation.navigate(&#x27;Snnn&#x27;) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, textView: &#123; fontSize: 16, textAlign: &#x27;center&#x27;, margin: 10, color:&#x27;red&#x27; &#125;,&#125;);const mapStateToProps = (store)=&gt;(&#123; secondState:store.FirstPageReducer.secondState&#125;);export default connect(mapStateToProps)(SecondPage); NavigatorPage.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; StyleSheet, Text, View, TouchableOpacity, Image&#125; from &#x27;react-native&#x27;;import FirstPage from &#x27;./FirstPage&#x27;;import SecondPage from &#x27;./SecondPage&#x27;;import &#123;connect&#125; from &#x27;react-redux&#x27;;import Snnn from &#x27;./Snnn&#x27;import &#123; StackNavigator, addNavigationHelpers, TabNavigator,&#125; from &#x27;react-navigation&#x27;;import &#123;addListener&#125; from &#x27;../store&#x27;;class NavigatorPages extends Component&#123; constructor(props)&#123; super(props); &#125; render()&#123; return( &lt;SimpleAppNavigator navigation=&#123;addNavigationHelpers(&#123; dispatch: this.props.dispatch, state: this.props.nav, addListener &#125;)&#125; /&gt; ) &#125;&#125;const Tab = TabNavigator(&#123; page1: &#123; screen: FirstPage, navigationOptions: (&#123; navigation &#125;) =&gt; (&#123; tabBarLabel: &#x27;苹果233&#x27;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? require(&#x27;../../image/one_selected.png&#x27;) : require(&#x27;../../image/one.png&#x27;)&#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ) &#125;), &#125;, page2: &#123; screen: SecondPage, navigationOptions: (&#123; navigation &#125;) =&gt; (&#123; tabBarLabel: &#x27;安卓&#x27;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? require(&#x27;../../image/two_selected.png&#x27;) : require(&#x27;../../image/two.png&#x27;) &#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ) &#125;), &#125;,&#125;,&#123; initialRouteName: &#x27;page1&#x27;, swipeEnabled: true, animationEnabled: true, tabBarPosition:&#x27;bottom&#x27;, lazy: false, tabBarOptions: &#123; showIcon: true, activeTintColor: &#x27;#979797&#x27;, inactiveTintColor: &#x27;#979797&#x27;, style: &#123; backgroundColor: &#x27;#ffffff&#x27; &#125;, &#125;&#125;);export const SimpleAppNavigator = StackNavigator(&#123; Tab: &#123; screen: Tab, &#125;, page1 : &#123; screen: FirstPage, &#125;, page2 : &#123; screen: SecondPage &#125;, Snnn : &#123; screen: Snnn &#125;&#125;);const mapStateToProps = (store)=&gt;(&#123; nav : store.TabNavigatorReducer,&#125;);export default connect(mapStateToProps)(NavigatorPages); ActionsActionsTypes.js123456//Tab1export const ADD = &#x27;ADD&#x27;;export const SUB = &#x27;SUB&#x27;;//Tab2 FirstPageActions.js1234import &#123;createAction&#125; from &#x27;redux-actions&#x27;;import * as TYPES from &#x27;./ActionTypes&#x27;;export const ADD = createAction(TYPES.ADD);export const SUB = createAction(TYPES.SUB); SccondPageActions.js12345/** * Created by shaotingzhou on 2018/3/6. */import &#123;createAction&#125; from &#x27;redux-actions&#x27;;import * as TYPES from &#x27;./ActionTypes&#x27;; 源码效果图: 另外:dva+react-navigation另外:Mbox+react-navigation","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"dva和react-navigation的结合使用","slug":"移动端学习/dva和react-navigation的结合使用","date":"2018-07-28T16:00:00.000Z","updated":"2023-12-03T05:13:22.301Z","comments":true,"path":"2018/07/29/移动端学习/dva和react-navigation的结合使用/","link":"","permalink":"https://zhoushaoting.com/2018/07/29/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/dva%E5%92%8Creact-navigation%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/","excerpt":"今天,学习下RN中的另外一个全家桶套餐架构:dva+React-Navigation,本文基于react-native:0.55.4,dva-core:^1.3.0,react-navigation:^2.5.1,react-navigation-redux-helpers:^2.0.4,react-redux:0^5.0.7所撸.","text":"今天,学习下RN中的另外一个全家桶套餐架构:dva+React-Navigation,本文基于react-native:0.55.4,dva-core:^1.3.0,react-navigation:^2.5.1,react-navigation-redux-helpers:^2.0.4,react-redux:0^5.0.7所撸. react-native的官方dva-demodva官方github 废话不多缩,首先,新建一个项目,添加一堆相应库:npm install mobx dva-core --save 引入dvanpm install mobx react-navigation-redux-helpers --save 引入react-navigation-redux-helpersnpm install mobx react-redux --save 引入react-reduxnpm install babel-plugin-transform-decorators-legacy babel-preset-react-native-stage-0 --save-dev 能够使用@标签npm install react-navigation --save 引入导航库然后修改一下工程里面的.babelrc: 12345&#123; &quot;presets&quot;: [&quot;react-native&quot;], &quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]&#125; OK,基本的架子已经搭好.然后新建一个src目录.这里存放基本代码和基本图片之类的. 然后,在入口文件index.js中,修改一下代码: 12345678import &#x27;./App&#x27;;console.ignoredYellowBox = [ &#x27;Warning: componentWillMount is deprecated&#x27;, &#x27;Warning: componentWillReceiveProps is deprecated&#x27;, &#x27;Warning: componentWillUpdate is deprecated&#x27;, &#x27;Warning: isMounted(...) is deprecated&#x27;,] 在App.js中基础代码: 1234567891011121314151617181920import React from &#x27;react&#x27;import &#123; AppRegistry &#125; from &#x27;react-native&#x27;import dva from &#x27;./src/Utils/dva&#x27;import Router, &#123; routerMiddleware, routerReducer &#125; from &#x27;./router&#x27;import appModel from &#x27;./src/models/app&#x27;const app = dva(&#123; initialState: &#123;&#125;, models: [appModel], extraReducers: &#123; router: routerReducer &#125;, onAction: [routerMiddleware], onError(e) &#123; console.log(&#x27;onError&#x27;, e) &#125;,&#125;)const App = app.start(&lt;Router /&gt;)AppRegistry.registerComponent(&#x27;rn_dva&#x27;, () =&gt; App) ok,如上图所示,dva的代码相比redux来说少了很多,不在需要大量的赋值粘贴,基本的逻辑代码均可以放在models中,其中的Utils只是dva的一个工具组,其中的代码并不多.一如既往,对着IDE就是一堆疯狂输出.完成的功能和之前的redux和Mobx一样.models下的app.js 1234567891011121314151617181920212223242526import &#123; createAction, NavigationActions &#125; from &#x27;../Utils&#x27;export default &#123; namespace: &#x27;app&#x27;, state: &#123; num: 0, mineType: &#x27;红&#x27;, &#125;, reducers: &#123; updateState(state, &#123; payload &#125;) &#123; return &#123; ...state, ...payload &#125; &#125;, &#125;, effects: &#123; *add(&#123; payload &#125;, &#123; call, put &#125;) &#123; yield put(createAction(&#x27;updateState&#x27;)(&#123; num:payload ,mineType:&#x27;红&#x27;&#125;)) &#125;, *sub(&#123; payload &#125;, &#123; call, put &#125;) &#123; yield put(createAction(&#x27;updateState&#x27;)(&#123; num:payload ,mineType:&#x27;蓝&#x27; &#125;)) &#125; &#125;, subscriptions: &#123; &#125;,&#125; Utils下的dva.js 12345678910111213141516171819202122import React from &#x27;react&#x27;import &#123; create &#125; from &#x27;dva-core&#x27;import &#123; Provider, connect &#125; from &#x27;react-redux&#x27;export &#123; connect &#125;export default function(options) &#123; const app = create(options) // HMR workaround if (!global.registered) options.models.forEach(model =&gt; app.model(model)) global.registered = true app.start() // eslint-disable-next-line no-underscore-dangle const store = app._store app.start = container =&gt; () =&gt; &lt;Provider store=&#123;store&#125;&gt;&#123;container&#125;&lt;/Provider&gt; app.getStore = () =&gt; store return app&#125; Utils下的index.js 1234export &#123; NavigationActions, StackActions &#125; from &#x27;react-navigation&#x27;export const createAction = type =&gt; payload =&gt; (&#123; type, payload &#125;) 剩下的就是两个UI界面了:One.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; Platform, StyleSheet, Text, View, Image&#125; from &#x27;react-native&#x27;;import &#123; connect &#125; from &#x27;react-redux&#x27;import &#123; createAction, NavigationActions &#125; from &#x27;../Utils&#x27;import &#123;Images&#125; from &quot;../Image&quot;;const instructions = Platform.select(&#123; ios: &#x27;Press Cmd+R to reload,\\n&#x27; + &#x27;Cmd+D or shake for dev menu&#x27;, android: &#x27;Double tap R on your keyboard to reload,\\n&#x27; + &#x27;Shake or press menu button for dev menu&#x27;,&#125;);type Props = &#123;&#125;;@connect((&#123; app &#125;) =&gt; (&#123; ...app &#125;))export default class One extends Component&lt;Props&gt; &#123; static navigationOptions = &#123; tabBarLabel: &#x27;苹果&#x27;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? Images.Tab.OneActive : Images.Tab.One&#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ), &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text onPress=&#123;()=&gt;this.add()&#125;&gt; + 红 &lt;/Text&gt; &lt;Text&gt; One &#123;this.props.num&#125; &lt;/Text&gt; &lt;Text onPress=&#123;()=&gt;this.sub()&#125;&gt; - 蓝 &lt;/Text&gt; &lt;/View&gt; ); &#125; add =() =&gt;&#123; this.props.dispatch(createAction(&#x27;app/add&#x27;)(this.props.num + 1)) &#125; sub =() =&gt;&#123; this.props.dispatch(createAction(&#x27;app/sub&#x27;)(this.props.num - 1)) &#125; componentDidMount() &#123; console.log(this.props) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, instructions: &#123; textAlign: &#x27;center&#x27;, color: &#x27;#333333&#x27;, marginBottom: 5, &#125;,&#125;); Two.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; Platform, StyleSheet, Text, View, Image&#125; from &#x27;react-native&#x27;;import &#123; connect &#125; from &#x27;react-redux&#x27;import &#123; createAction, NavigationActions &#125; from &#x27;../Utils&#x27;import &#123;Images&#125; from &quot;../Image&quot;;const instructions = Platform.select(&#123; ios: &#x27;Press Cmd+R to reload,\\n&#x27; + &#x27;Cmd+D or shake for dev menu&#x27;, android: &#x27;Double tap R on your keyboard to reload,\\n&#x27; + &#x27;Shake or press menu button for dev menu&#x27;,&#125;);type Props = &#123;&#125;;@connect((&#123; app &#125;) =&gt; (&#123; ...app &#125;))export default class Two extends Component&lt;Props&gt; &#123; static navigationOptions = &#123; tabBarLabel: &#x27;安卓&#x27;, tabBarIcon: (&#123; focused, tintColor &#125;) =&gt; ( &lt;Image source=&#123;focused ? Images.Tab.TwoActive : Images.Tab.Two&#125; style=&#123;&#123; width: 25, height: 25 &#125;&#125; /&gt; ), &#125; render() &#123; return ( &lt;View style=&#123;[styles.container,&#123;backgroundColor:this.props.mineType == &#x27;红&#x27; ? &#x27;red&#x27; : &#x27;blue&#x27;&#125;]&#125;&gt; &lt;Text style=&#123;styles.welcome&#125;&gt; TWO + &#123;this.props.mineType&#125; &lt;/Text&gt; &lt;/View&gt; ); &#125; componentDidMount() &#123; console.log(this.props.mineType) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, instructions: &#123; textAlign: &#x27;center&#x27;, color: &#x27;#333333&#x27;, marginBottom: 5, &#125;,&#125;); OK,以上就是全部代码.效果图: 源码地址 另外:redux+react-navigation另外:Mbox+react-navigation","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"react-native七牛上传图片","slug":"移动端学习/react-native七牛上传图片","date":"2018-06-25T16:00:00.000Z","updated":"2023-12-03T06:54:35.353Z","comments":true,"path":"2018/06/26/移动端学习/react-native七牛上传图片/","link":"","permalink":"https://zhoushaoting.com/2018/06/26/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/react-native%E4%B8%83%E7%89%9B%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/","excerpt":"今天试一下React Native 七牛上传图片.坑也就随之开始了.以demo为例.react-native:”0.55.4”,react-native-qiniu:’’0.3.0”","text":"今天试一下React Native 七牛上传图片.坑也就随之开始了.以demo为例.react-native:”0.55.4”,react-native-qiniu:’’0.3.0” 首先最大的坑就是七牛官方的这个库:react-native-qiniu,好像是该库的创始人离职了,导致了该库已经荒废,无人更新维护.如果你只是单纯按照github的说明导入该库就使用的话,无论你以什么姿势撸.结果都是Rpc.uploadFile的catch输出错误,错误信息为null………..这个错误信息真让我头大.可喜有人在网上做出了更新,更新代码(需要修改库中的两个源文件../react-native-qiniu/core)如下:rpc.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164import conf from &#x27;./conf.js&#x27;;import Auth from &#x27;./auth&#x27;;//发送管理和fop命令,总之就是不上传文件function post(uri, adminToken, content) &#123; var headers = &#123; &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;, &#125;; let payload = &#123; headers: headers, method: &#x27;POST&#x27;, dataType: &#x27;json&#x27;, timeout: conf.RPC_TIMEOUT, &#125;; if (typeof content === &#x27;undefined&#x27;) &#123; payload.headers[&#x27;Content-Length&#x27;] = 0; &#125; else &#123; //carry data payload.body = content; &#125; if (adminToken) &#123; headers[&#x27;Authorization&#x27;] = adminToken; &#125; return fetch(uri, payload);&#125;/*** 直传文件* formInput对象如何配置请参考七牛官方文档“直传文件”一节*/function uploadFile(dataParams, policy, callbackUpDate = function () &#123; &#125;, callBackMethod = function () &#123; &#125;) &#123; let params = getParams(dataParams, policy); let uri = params.uri; let data = params.data; let oloaded = null; let responseObj = &#123;&#125;; return new Promise((resolve, reject) =&gt; &#123; if (typeof uri != &#x27;string&#x27; || uri == &#x27;&#x27; || typeof data.key == &#x27;undefined&#x27;) &#123; reject &amp;&amp; reject(null); return; &#125; if (uri[0] == &#x27;/&#x27;) &#123; uri = &quot;file://&quot; + uri; &#125; //创建xhr并open var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () &#123; responseObj.readyState = xhr.readyState; //状态0-4 responseObj.data = xhr.response;//返回值 responseObj.textData = xhr.responseText; //返回值Text responseObj.status = xhr.status; //状态码 // responseObj.message = &quot;&quot; switch (xhr.readyState) &#123; case 0: callBackMethod(responseObj) break; case 1: callBackMethod(responseObj) break; case 2: callBackMethod(responseObj) break; case 3: callBackMethod(responseObj) break; case 4: if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304) &#123; if (xhr.status == 200) &#123; callBackMethod(responseObj) &#125; &#125; else &#123; callBackMethod(responseObj) &#125; break; &#125; &#125;; xhr.open(&#x27;POST&#x27;, conf.UP_HOST); xhr.onload = () =&gt; &#123; if (xhr.status !== 200) &#123; reject &amp;&amp; reject(responseObj); return; &#125; resolve &amp;&amp; resolve(JSON.parse(responseObj.data)); &#125;; xhr.onerror = (evt) =&gt; &#123; reject &amp;&amp; reject(evt); return; &#125;; //请求失败 xhr.upload.onloadstart = () =&gt; &#123;//上传开始执行方法 oloaded = 0;//设置上传开始时，以上传的文件大小为0 console(&quot;上传开始&quot;) &#125;; xhr.upload.onprogress = (evt) =&gt; &#123; oloaded = evt.loaded;//重新赋值已上传文件大小，用以下次计算 callbackUpDate(Math.round(oloaded / evt.total * 100), oloaded, evt.total) &#125;; xhr.upload.onloadend = (evt) =&gt; &#123; console(&quot;上传结束&quot;) &#125;; let formdata = creatFormData(params); xhr.send(formdata); &#125;);&#125;//构造上传参数function getParams(data, policy) &#123; let putPolicy = new Auth.Policy( policy ); let uptoken = putPolicy.token(); data.token = uptoken; let params = &#123;&#125;; params.uri = data.uri; delete data.uri; params.data = data; return params;&#125;/*** 创建一个表单对象,用于上传参数* @param &#123;*&#125; params*/function creatFormData(params) &#123; let formdata = new FormData(); let uri = params.uri; let formInput = creatFormInput(uri); let data = params.data; console.log(data) for (let key of Object.keys(data)) &#123; let value = data[key]; if (key.charAt(0) === &quot;_&quot;) &#123; formdata.append(&quot;x:&quot; + key.substring(1, key.length), value); &#125; else &#123; formdata.append(key, value); &#125; &#125; formdata.append(&quot;file&quot;, &#123; uri: uri, type: formInput.type, name: formInput.name &#125;); console.log(formdata) return formdata;&#125;/*** 构造表单对象中file对象* @param &#123;*&#125; params*/function creatFormInput(uri) &#123; let formInput = &#123;&#125;; if (typeof formInput.type == &#x27;undefined&#x27;) formInput.type = &#x27;application/octet-stream&#x27;; if (typeof formInput.name == &#x27;undefined&#x27;) &#123; var filePath = uri.split(&quot;/&quot;); if (filePath.length &gt; 0) formInput.name = filePath[filePath.length - 1]; else formInput.name = &quot;&quot;; &#125; return formInput;&#125;export default &#123; uploadFile, post &#125; auth.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154import base64 from &#x27;base-64&#x27;;import CryptoJS from &quot;crypto-js&quot;;import conf from &quot;./conf.js&quot;;import parse from &#x27;url-parse&#x27;;function urlsafeBase64Encode(jsonFlags) &#123; var encoded = base64.encode(jsonFlags); return base64ToUrlSafe(encoded);&#125;;function base64ToUrlSafe(v) &#123; return v.replace(/\\//g, &#x27;_&#x27;).replace(/\\+/g, &#x27;-&#x27;);&#125;;function hmacSha1(encodedFlags, secretKey) &#123; var encoded = CryptoJS.HmacSHA1(encodedFlags, secretKey).toString(CryptoJS.enc.Base64); return encoded;&#125;;function generateAccessToken(url, body) &#123; var u = parse(url, true); var path = u.pathname; var access = path + &#x27;\\n&#x27;; if (body) &#123; access += body; &#125; var digest = hmacSha1(access, conf.SECRET_KEY); var safeDigest = base64ToUrlSafe(digest); let token = &#x27;QBox &#x27; + conf.ACCESS_KEY + &#x27;:&#x27; + safeDigest; //console.log(token); return token;&#125;;class Policy &#123; constructor(policy) &#123; if (typeof (policy) == &quot;undefined&quot;) &#123; &#125; else &#123; this.policy = policy; if (typeof (policy.deadline) == &quot;undefined&quot; || policy.deadline == null) &#123; this.policy.deadline = 3600 + Math.floor(Date.now() / 1000); &#125; &#125; &#125; _parse2Str(putPolicy) &#123; let str = &quot;&#123;&quot;; let keys = Object.keys(putPolicy); keys.forEach((key, i) =&gt; &#123; let value = putPolicy[key]; if (typeof (value) == &quot;object&quot;) &#123; str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:` str = `$&#123;str&#125;&quot;&#123;` Object.keys(value).forEach((key2) =&gt; &#123; let value2 = value[key2]; let re = /(\\$\\(.*?\\))/g; if (re.test(value2)) &#123; str = `$&#123;str&#125;\\\\\\&quot;$&#123;key2&#125;\\\\\\&quot;:$&#123;value2&#125;,` &#125; else &#123; str = `$&#123;str&#125;\\\\\\&quot;$&#123;key2&#125;\\\\\\&quot;:&quot;$&#123;value2&#125;&quot;,` &#125; &#125;) console.log(keys.length + &quot;::&quot; + i) if (i &gt;= keys.length) &#123; str = `$&#123;str.substring(0, str.length - 1)&#125;&#125;&quot;` &#125; else &#123; str = `$&#123;str.substring(0, str.length - 1)&#125;&#125;&quot;,` &#125; &#125; else if (typeof (value) == &quot;number&quot;) &#123; str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:$&#123;value&#125;,` &#125; else if (typeof (value) == &quot;string&quot;) &#123; str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:&quot;$&#123;value&#125;&quot;,` &#125; else &#123; str = `$&#123;str&#125;&quot;$&#123;key&#125;&quot;:&quot;$&#123;value&#125;&quot;,` &#125; &#125;) str = `$&#123;str.substring(0, str.length - 1)&#125;&#125;`; return str; &#125; // _creatStr = (policy) =&gt; &#123; // policy[&#x27;deadline&#x27;] = this.expires + Math.floor(Date.now() / 1000); // let policyStr = JSON.stringify(policy); // let re = /(\\&quot;\\$\\(.*?\\)\\&quot;)/g; // let newStr = policyStr.replace(re, (value) =&gt; &#123; // return value.substring(1, value.length - 1); // &#125;) // return newStr; // &#125; token = () =&gt; &#123; policStr = this._parse2Str(this.policy); console.log(&quot;policStr&quot;, policStr); var encodedPutPolicy = this._urlsafeBase64Encode(policStr); console.log(&quot;encodedPutPolicy&quot;, encodedPutPolicy); var sign = this._hmacSha1(encodedPutPolicy, conf.SECRET_KEY); var encodedSign = this._base64ToUrlSafe(sign); console.log(&quot;encodedSign&quot;, encodedSign); var uploadToken = conf.ACCESS_KEY + &#x27;:&#x27; + encodedSign + &#x27;:&#x27; + encodedPutPolicy; console.log(&quot;uploadToken&quot;, uploadToken); return uploadToken; &#125; _urlsafeBase64Encode = (jsonFlags) =&gt; &#123; var encoded = base64.encode(jsonFlags); return base64ToUrlSafe(encoded); &#125;; _base64ToUrlSafe = (v) =&gt; &#123; return v.replace(/\\//g, &#x27;_&#x27;).replace(/\\+/g, &#x27;-&#x27;); &#125;; _hmacSha1 = (encodedFlags, secretKey) =&gt; &#123; var encoded = CryptoJS.HmacSHA1(encodedFlags, secretKey).toString(CryptoJS.enc.Base64); return encoded; &#125;;&#125;class GetPolicy &#123; constructor(expires) &#123; this.expires = expires || 3600; &#125; makeRequest(baseUrl) &#123; var deadline = this.expires + Math.floor(Date.now() / 1000); if (baseUrl.indexOf(&#x27;?&#x27;) &gt;= 0) &#123; baseUrl += &#x27;&amp;e=&#x27;; &#125; else &#123; baseUrl += &#x27;?e=&#x27;; &#125; baseUrl += deadline; var signature = hmacSha1(baseUrl, conf.SECRET_KEY); var encodedSign = base64ToUrlSafe(signature); var downloadToken = conf.ACCESS_KEY + &#x27;:&#x27; + encodedSign; return baseUrl + &#x27;&amp;token=&#x27; + downloadToken; &#125;&#125;export default &#123; urlsafeBase64Encode, generateAccessToken, Policy, GetPolicy &#125; ok,改完之后,你就可以愉快的撸自己的业务代码了.至于业务代码我就简单写个例子:其中,Conf.ACCESS_KEY和Conf.SECRET_KEY从七牛账号里面获取,Conf.UP_HOST 从https://developer.qiniu.com/kodo/manual/1671/region-endpoint 里面获取,其中,scope就是七牛里面你自己建立的存储空间名 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108/*** Sample React Native App* https://github.com/facebook/react-native* @flow*/import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; Platform, StyleSheet, Text, View, Image&#125; from &#x27;react-native&#x27;;import Qiniu, &#123; Auth, ImgOps, Conf, Rs, Rpc &#125; from &#x27;react-native-qiniu&#x27;;//对于七牛修改文件参考: https://blog.csdn.net/qq_33935895/article/details/78775819Conf.ACCESS_KEY = &quot;从七牛账号里面获取&quot;;Conf.SECRET_KEY = &quot;从七牛账号里面获取&quot;;Conf.UP_HOST = &#x27;从七牛账号里面获取&#x27;; // https://developer.qiniu.com/kodo/manual/1671/region-endpointtype Props = &#123;&#125;;export default class App extends Component&lt;Props&gt; &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; img: &#x27;图片url&#x27; &#125;; &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.instructions&#125; onPress=&#123;() =&gt; this.upload()&#125;&gt; 上传&lt;/Text&gt; &lt;Text&gt;&#123;this.state.img&#125;&lt;/Text&gt; &lt;Image source=&#123;&#123; uri: this.state.img &#125;&#125; style=&#123;&#123; width: 200, height: 400 &#125;&#125; /&gt; &lt;/View&gt; ); &#125; /** * 先上传七牛 获取url * */ upload = () =&gt; &#123; var img = &#x27;/Users/shaotingzhou/Desktop/qiniuDemo/uploadImg.jpg&#x27; //图片路径 如果是从相册获取图片的话,其相册会返回 var myDate = new Date(); const key = myDate.getTime() + &#x27;.jpg&#x27;; //上传成功后该key就是图片的url路径 //上传参数 let params = &#123; uri: img,//图片路径 可以通过第三方工具 如:ImageCropPicker等获取本地图片路径 key: key,//要上传的key &#125; //构建上传策略 let policy = &#123; scope: &quot;demo&quot;,//记得这里如果格式为&lt;bucket&gt;:&lt;key&gt;形式的话,key要与params里的key保持一致,详见七牛上传策略 returnBody://returnBody 详见上传策略 &#123; name: &quot;$(fname)&quot;,//获取文件名 size: &quot;$(fsize)&quot;,//获取文件大小 w: &quot;$(imageInfo.width)&quot;,//... h: &quot;$(imageInfo.height)&quot;,//... hash: &quot;$(etag)&quot;,//... &#125;, &#125; //进行文件上传 Rpc.uploadFile(params, policy).then((data) =&gt; &#123; console.log(&#x27;上传成功&#x27;) var imgUrl = key //七牛上的图片URL 就是之前的key + 你公司域名 this.setState(&#123; img: &#x27;http://pax8cso07.bkt.clouddn.com/&#x27; + key &#125;) &#125;).catch((err) =&gt; &#123; console.log(err) &#125;); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, instructions: &#123; textAlign: &#x27;center&#x27;, color: &#x27;#333333&#x27;, marginBottom: 5, &#125;,&#125;); ok.下面是七牛里面的key对应图,修改后的输出图,最后的例子展示图:下面是源码.其中七牛的修改文件在0.3.0中.源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"react-navigation前置登录","slug":"移动端学习/react-navigation前置登录","date":"2018-06-15T16:00:00.000Z","updated":"2023-12-03T06:56:03.165Z","comments":true,"path":"2018/06/16/移动端学习/react-navigation前置登录/","link":"","permalink":"https://zhoushaoting.com/2018/06/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/react-navigation%E5%89%8D%E7%BD%AE%E7%99%BB%E5%BD%95/","excerpt":"好多应用都需要涉及到前置登录,今天就来实操一下.所用的库有react-natigation导航库和mobx状态管理库.","text":"好多应用都需要涉及到前置登录,今天就来实操一下.所用的库有react-natigation导航库和mobx状态管理库. 这里贴一下各库的使用版本: 123456789101112131415161718192021222324252627 &#123; &quot;name&quot;: &quot;lead_the_login&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;, &quot;test&quot;: &quot;jest&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;mobx&quot;: &quot;^4.3.0&quot;, &quot;mobx-react&quot;: &quot;^5.1.2&quot;, &quot;react&quot;: &quot;16.3.1&quot;, &quot;react-native&quot;: &quot;0.55.4&quot;, &quot;react-navigation&quot;: &quot;1.5.3&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;babel-jest&quot;: &quot;23.0.1&quot;, &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.5&quot;, &quot;babel-preset-react-native&quot;: &quot;4.0.0&quot;, &quot;babel-preset-react-native-stage-0&quot;: &quot;^1.0.1&quot;, &quot;jest&quot;: &quot;23.1.0&quot;, &quot;react-test-renderer&quot;: &quot;16.3.1&quot; &#125;, &quot;jest&quot;: &#123; &quot;preset&quot;: &quot;react-native&quot; &#125;&#125; 前置登录主要使用的是react-navigation的tabbar的点击事件. 使用方法可以看 react navigation官方网站 或者 兔佬的简书,至于mbox和react-navigation的使用可以参考之前写的这篇文章:Mobx和react-navigation的使用. 这里不做细说.直接上代码.下面是基本代码结构.准备工作,先把mobx+react-navigation搭建完毕之后.我们在点击我的Tab时,对tabBar点击事件做处理即可,在点击事件里面先获取我们存在Store中的登录状态,根据状态做不同的事情,这里我未处理本地数据持久化工作,只是单纯的存在Mobx中的store中,是为了方便其他地方使用.实际开发中,我们还需要对数据进行持久化操作.主要代码有: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; Platform, StyleSheet, Text, View&#125; from &#x27;react-native&#x27;;import &#123; observer, inject &#125; from &#x27;mobx-react&#x27;import &#123; action, autorun, computed &#125; from &#x27;mobx&#x27;import &#123; NavigationActions &#125; from &#x27;react-navigation&#x27;const resetAction = NavigationActions.reset(&#123; index: 0, actions: [ NavigationActions.navigate(&#123;routeName: &#x27;Tab&#x27;, params: &#123;&#125;&#125;) ]&#125;)@inject(&#x27;rootStore&#x27;)@observerexport default class TwoView extends Component&lt;Props&gt; &#123; static navigationOptions = (&#123; navigation &#125;) =&gt; (&#123; header:null, tabBarOnPress: (tab) =&gt; &#123; //让tabBar可点击,做前置登录 // navigation.state.params.navigatePress() tab.jumpToIndex(tab.scene.index) &#125;, &#125;); render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text&gt; 登录状态:&#123;this.loginStatus ? &#x27;已经登录&#x27; : &#x27;未登录&#x27;&#125; &lt;/Text&gt; &lt;Text onPress=&#123;()=&gt;this.loginOutAction()&#125;&gt; 注销 &lt;/Text&gt; &lt;/View&gt; ); &#125; @computed get loginStatus() &#123; return this.props.rootStore.TwoStore.allDatas.loginStatus; &#125; componentDidMount() &#123; this.props.navigation.setParams(&#123; navigatePress: this.needLogin() &#125;) // 使用这个来调用this &#125; /** * 判断是否需要登录 * */ needLogin =() =&gt;&#123; //判断登录 console.log(&#x27;loginStatus&#x27;) console.log(this.loginStatus) if(this.loginStatus)&#123; //已经登录 return; &#125;else &#123; //未登录 跳转至登录界面 this.props.navigation.navigate(&#x27;LoginView&#x27;,&#123;callback:()=&gt;this.getPersonalInfo()&#125;) &#125; &#125; /** * 登录成功的回调方法 * */ getPersonalInfo =() =&gt;&#123; // 请求数据赋值即可 &#125; loginOutAction =() =&gt;&#123; //注销登录 清空本地化数据 和 重置store中的loginStatus this.props.rootStore.TwoStore.allDatas.loginStatus = false this.props.navigation.dispatch(resetAction); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, instructions: &#123; textAlign: &#x27;center&#x27;, color: &#x27;#333333&#x27;, marginBottom: 5, &#125;,&#125;); 和登录之后修改store中状态 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; Platform, StyleSheet, Text, View&#125; from &#x27;react-native&#x27;;import &#123; observer, inject &#125; from &#x27;mobx-react&#x27;import &#123; action, autorun, computed &#125; from &#x27;mobx&#x27;@inject(&#x27;rootStore&#x27;)@observerexport default class LoginView extends Component&lt;Props&gt; &#123; static navigationOptions = (&#123; navigation &#125;) =&gt; (&#123; header:null, &#125;); render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text onPress=&#123;()=&gt;this.loginAction()&#125;&gt; 登录 &lt;/Text&gt; &lt;/View&gt; ); &#125; /** * 登录/注销 可以在store里面执行也可以直接在这里执行,看你习惯 * */ loginAction =() =&gt;&#123; //登录请求 //成功之后,修改loginStatus.本地化数据等等 this.props.rootStore.TwoStore.allDatas.loginStatus = true //返回上一个界面,并回调刷新 this.props.navigation.goBack() this.props.navigation.state.params.callback(); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, instructions: &#123; textAlign: &#x27;center&#x27;, color: &#x27;#333333&#x27;, marginBottom: 5, &#125;,&#125;); 效果如图:源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"Mobx与react-navigation的结合使用","slug":"移动端学习/Mobx与react-navigation的使用","date":"2018-05-26T16:00:00.000Z","updated":"2023-12-03T06:24:36.074Z","comments":true,"path":"2018/05/27/移动端学习/Mobx与react-navigation的使用/","link":"","permalink":"https://zhoushaoting.com/2018/05/27/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/Mobx%E4%B8%8Ereact-navigation%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"今天,学习下RN中的另外一个全家桶套餐架构:Mobx+React-Navigation,本文基于react-native:0.55.4,Mbox:^4.3.0,react-navigation:^2.0.1所撸.","text":"今天,学习下RN中的另外一个全家桶套餐架构:Mobx+React-Navigation,本文基于react-native:0.55.4,Mbox:^4.3.0,react-navigation:^2.0.1所撸. Mbox中文文档另外一个基于Mbox和react-navigation的不错项目 废话不多缩,首先,新建一个项目,添加相应库:npm i mobx mobx-react --save 引入Mbox npm i babel-plugin-transform-decorators-legacy babel-preset-react-native-stage-0 --save-dev 能够使用@标签 npm i react-navigation --save 引入导航库然后修改一下工程里面的.babelrc: 12345&#123; &quot;presets&quot;: [&quot;react-native&quot;], &quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]&#125; OK,基本的架子已经搭好.然后新建一个src目录.这里存放基本代码和基本图片之类的. 然后,在入口文件App.js中,先搭建tabBar和导航条.使用react-navigation这里,我使用全局注册并注入mobx，其他地方都可以使用store.import &#123;Provider&#125; from &#39;mobx-react&#39;;然后在src-&gt;Mobx这里新建一个根store的Store.js文件.Store.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import &#123; observable, computed, action &#125; from &#x27;mobx&#x27;import oneInfo from &#x27;./OneInfo&#x27;import twoInfo from &#x27;./TwoInfo&#x27;/** * 根store * OneInfo OneInfo数据 * TwoInfo TwoInfo数据*/class RootStore &#123; constructor() &#123; this.OneInfo = new OneInfo(oneInfo,this) this.TwoInfo = new TwoInfo(twoInfo,this) &#125;&#125;// Oneclass OneInfo &#123; @observable allDatas = [] constructor(data,rootStore) &#123; this.allDatas = data this.rootStore = rootStore &#125; //加 @action add(num) &#123; this.allDatas.oneNum = num + 1 this.rootStore.TwoInfo.allDatas.twoColor = &#x27;red&#x27; &#125; //减 @action sub(num) &#123; this.allDatas.oneNum = num - 1 this.rootStore.TwoInfo.allDatas.twoColor = &#x27;blue&#x27; &#125;&#125;// Twoclass TwoInfo &#123; @observable allDatas = &#123;&#125; constructor(data,rootStore) &#123; this.allDatas = data this.rootStore = rootStore &#125;&#125;export default new RootStore() 另外:OneInfo.js 12345678910const OneInfo = &#123; &quot;data&quot;: [ ], &quot;isOne&quot; : true, &quot;oneNum&quot; : 0&#125;export default OneInfo; TwoInfo.js 123456789const TwoInfo = &#123; &quot;data&quot;: [ ], &quot;isTwo&quot; : false, &quot;twoColor&quot;:&#x27;white&#x27;&#125;export default TwoInfo; ok,回到App.js中: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106import React, &#123;Component&#125; from &#x27;react&#x27;;import &#123;Platform, StyleSheet, Text, View, Image&#125; from &#x27;react-native&#x27;;import &#123;StackNavigator, TabNavigator, TabBarBottom&#125; from &#x27;react-navigation&#x27;;// 全局注册并注入mobx，其他地方都可以使用storeimport &#123;Provider&#125; from &#x27;mobx-react&#x27;;// 获取store实例import store from &#x27;./src/Mobx/Store&#x27;;import One from &#x27;./src/One/One&#x27;;import Two from &#x27;./src/Two/Two&#x27;;export default class TwoDetails extends Component&lt;Props&gt; &#123; render () &#123; return ( &lt;Provider rootStore=&#123;store&#125;&gt; &lt;Navigator onNavigationStateChange=&#123;(prevState, currentState) =&gt; &#123; // 只要切换tab,push,pop,这里一定走 console.log (prevState); console.log (currentState); &#125;&#125; /&gt; &lt;/Provider&gt; ); &#125; componentDidMount = () =&gt; &#123; console.disableYellowBox = true; //去除黄色弹框警告 &#125;;&#125;const Tab = TabNavigator ( &#123; One: &#123; screen: One, navigationOptions: (&#123;navigation&#125;) =&gt; (&#123; tabBarLabel: &#x27;男孩&#x27;, tabBarIcon: (&#123;focused, tintColor&#125;) =&gt; ( &lt;Image source=&#123; focused ? require (&#x27;./src/Image/boy_active.png&#x27;) : require (&#x27;./src/Image/boy.png&#x27;) &#125; style=&#123;&#123;width: 25, height: 25&#125;&#125; /&gt; ), &#125;), &#125;, Two: &#123; screen: Two, navigationOptions: (&#123;navigation&#125;) =&gt; (&#123; tabBarLabel: &#x27;女孩&#x27;, tabBarIcon: (&#123;focused, tintColor&#125;) =&gt; ( &lt;Image source=&#123; focused ? require (&#x27;./src/Image/girl_active.png&#x27;) : require (&#x27;./src/Image/girl.png&#x27;) &#125; style=&#123;&#123;width: 25, height: 25&#125;&#125; /&gt; ), &#125;), &#125;, &#125;, &#123; tabBarComponent: TabBarBottom, tabBarPosition: &#x27;bottom&#x27;, swipeEnabled: true, animationEnabled: true, lazy: true, tabBarOptions: &#123; activeTintColor: &#x27;#979797&#x27;, inactiveTintColor: &#x27;#979797&#x27;, style: &#123;backgroundColor: &#x27;#ffffff&#x27;&#125;, &#125;, &#125;);const Navigator = StackNavigator (&#123; Tab: &#123; screen: Tab, &#125;,&#125;);const styles = StyleSheet.create (&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, instructions: &#123; textAlign: &#x27;center&#x27;, color: &#x27;#333333&#x27;, marginBottom: 5, &#125;,&#125;); 然后就是基本的UI界面了:One.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; Platform, StyleSheet, Text, View&#125; from &#x27;react-native&#x27;;import &#123; observer, inject &#125; from &#x27;mobx-react&#x27;import &#123; action, autorun, computed &#125; from &#x27;mobx&#x27;@inject(&#x27;rootStore&#x27;)@observerexport default class One extends Component&lt;Props&gt; &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123;&#125;; &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text onPress=&#123;()=&gt;this.add()&#125;&gt; + 红 &lt;/Text&gt; &lt;Text&gt; One &#123;this.dataSource&#125; &lt;/Text&gt; &lt;Text onPress=&#123;()=&gt;this.sub()&#125;&gt; - 蓝 &lt;/Text&gt; &lt;/View&gt; ); &#125; @computed get dataSource() &#123; return this.props.rootStore.OneInfo.allDatas.oneNum; &#125; /** * + * */ @action add() &#123; this.props.rootStore.OneInfo.add(this.dataSource) &#125; /** * - * */ @action sub() &#123; this.props.rootStore.OneInfo.sub(this.dataSource) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, instructions: &#123; textAlign: &#x27;center&#x27;, color: &#x27;#333333&#x27;, marginBottom: 5, &#125;,&#125;); Two.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; Platform, StyleSheet, Text, View&#125; from &#x27;react-native&#x27;;import &#123; observer, inject &#125; from &#x27;mobx-react&#x27;import &#123; action, autorun, computed &#125; from &#x27;mobx&#x27;@inject(&#x27;rootStore&#x27;)@observerexport default class Two extends Component&lt;Props&gt; &#123; render() &#123; return ( &lt;View style=&#123;[styles.container,&#123;backgroundColor:this.bgColor&#125;]&#125;&gt; &lt;Text&gt; TWO &lt;/Text&gt; &lt;/View&gt; ); &#125; @computed get bgColor() &#123; return this.props.rootStore.TwoInfo.allDatas.twoColor; &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27;, backgroundColor: &#x27;#F5FCFF&#x27;, &#125;, welcome: &#123; fontSize: 20, textAlign: &#x27;center&#x27;, margin: 10, &#125;, instructions: &#123; textAlign: &#x27;center&#x27;, color: &#x27;#333333&#x27;, marginBottom: 5, &#125;,&#125;); ok,以上就是Mbox+react-navigation的Demo的基本代码了.效果图: 源码 另外:redux+react-navigation另外:dva+react-navigation","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"前端精灵图学习","slug":"前端学习/精灵图学习","date":"2018-05-17T13:54:44.000Z","updated":"2023-12-03T05:08:24.789Z","comments":true,"path":"2018/05/17/前端学习/精灵图学习/","link":"","permalink":"https://zhoushaoting.com/2018/05/17/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E7%B2%BE%E7%81%B5%E5%9B%BE%E5%AD%A6%E4%B9%A0/","excerpt":"今天学习下前端中的 精灵图.为何引入精灵图: 网页上面的每张图片都要经历一次请求才能展示给用户，小的图标频繁的请求服务器，降低页面的加载速度，为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，因此，产生了css精灵技术。","text":"今天学习下前端中的 精灵图.为何引入精灵图: 网页上面的每张图片都要经历一次请求才能展示给用户，小的图标频繁的请求服务器，降低页面的加载速度，为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，因此，产生了css精灵技术。 以本地图片为例:精灵图使用其实就是对background-position:x y对图片进行偏移显示而已.下面是代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;html&gt; &lt;head&gt; &lt;style&gt; *&#123; margin:0; padding:0; &#125; .div0&#123; margin:10px; &#125; .demo1,.demo2,.demo3,.demo4,.demo5,.demo6&#123; display:inline-block; width:17px; height:17px; background-color:transparent; background-image:url(img/精灵图.png); background-repeat:no-repeat; &#125; .demo1&#123; background-position:-38px -37px;&#125; .demo2&#123; background-position:-62px -37px;&#125; .demo3&#123; background-position:-86px -37px;&#125; .demo4&#123; background-position:-110px -37px;&#125; .demo5&#123; background-position:-134px -37px;&#125; .demo6&#123; background-position:-159px -37px;&#125; ul&#123; list-style:none; &#125; ul li &#123; margin:10px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;div0&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;div class=&quot;demo1&quot;&gt;&lt;/div&gt; 图标1&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo2&quot;&gt;&lt;/div&gt; 图标2&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo3&quot;&gt;&lt;/div&gt; 图标3&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo4&quot;&gt;&lt;/div&gt; 图标4&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo5&quot;&gt;&lt;/div&gt; 图标5&lt;/li&gt; &lt;li&gt;&lt;div class=&quot;demo6&quot;&gt;&lt;/div&gt; 图标6&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果图: 源码","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://zhoushaoting.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"前端学习","slug":"前端学习","permalink":"https://zhoushaoting.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"前端马赛克学习","slug":"前端学习/马赛克学习","date":"2018-05-17T13:45:31.000Z","updated":"2023-12-03T05:09:14.538Z","comments":true,"path":"2018/05/17/前端学习/马赛克学习/","link":"","permalink":"https://zhoushaoting.com/2018/05/17/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E9%A9%AC%E8%B5%9B%E5%85%8B%E5%AD%A6%E4%B9%A0/","excerpt":"上周去菜市场买菜,看到路边一个二维码,于是想起阿里巴巴,接着想起之前上班都会路过阿里巴巴,接着想起马云,然后想到马赛克!!!于是我回家了,想学习下前端中的马赛克.","text":"上周去菜市场买菜,看到路边一个二维码,于是想起阿里巴巴,接着想起之前上班都会路过阿里巴巴,接着想起马云,然后想到马赛克!!!于是我回家了,想学习下前端中的马赛克. 完成的功能 选择当地一张图片 点击绘制马赛克 拖动绘制马赛克 为了方便,相关js代码直接写在了index.html中,大致分为加载图片,添加监听,方法触发,绘制小方块(马赛克),计算颜色,数组升维这几个方法,UI部分通过canvas 标签和input 标签绘制.下面是完整的index.html代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;Keywords&quot; content=&quot;马赛克 canvas&quot;&gt; &lt;meta name=&quot;Description&quot; content=&quot;学习前端马赛克&quot;&gt;&lt;/head&gt;&lt;style&gt; canvas &#123; border: 1px black solid; &#125;&lt;/style&gt;&lt;body&gt; &lt;div id=&quot;mask&quot;&gt; &lt;canvas width=&quot;600&quot; height=&quot;600&quot;&gt; &lt;/canvas&gt; &lt;input type=&quot;file&quot; class=&#x27;input&#x27;&gt; &lt;/div&gt; &lt;script&gt; var canvas = document.querySelector(&#x27;canvas&#x27;); var input = document.querySelector(&#x27;#mask .input&#x27;); var ctx = canvas.getContext(&#x27;2d&#x27;); var mousedown = false; var t = 15; input.onchange = function () &#123; loadimg(); &#125; /** *加载图片 */ function loadimg() &#123; var img = new Image(); img.src = window.URL.createObjectURL(input.files[0]); img.onload = function () &#123; ctx.drawImage(img, 0, 0, 600, 600); &#125; register(); &#125; /** *添加监听 */ function register() &#123; canvas.addEventListener(&#x27;mousedown&#x27;, action) canvas.addEventListener(&#x27;mousemove&#x27;, action) canvas.addEventListener(&#x27;mouseup&#x27;, action) &#125; /** *方法触发 */ function action(e) &#123; var dx = parseInt(((e.offsetX - t / 2) / t) * t) var dy = parseInt(((e.offsetY - t / 2) / t) * t) if (e.type == &quot;mousedown&quot;) &#123; mousedown = true; computeColor(dx, dy); &#125; if (mousedown &amp;&amp; e.type == &quot;mousemove&quot;) &#123; computeColor(dx, dy); &#125; if (e.type == &quot;mouseup&quot;) &#123; mousedown = false; &#125; &#125; /* * 画小方块 */ function rect(x, y, c) &#123; ctx.beginPath(); ctx.fillStyle = c; var dx = parseInt(x / t)*t,dy = parseInt(y / t)*t ctx.rect(dx, dy, t, t); ctx.fill(); &#125; /** 计算颜色 */ function computeColor(x, y) &#123; var arrList = restore(ctx.getImageData(x,y,t,t).data,4); //一维数组 var vr = 0, vg = 0, vb = 0,al = arrList.length; for(var i = 0; i &lt; al; i++)&#123; vr += arrList[i][0]; vg += arrList[i][1]; vb += arrList[i][2]; var color = &#x27;rgb(&#x27; + Math.floor(vr/al) + &#x27;,&#x27; + Math.floor(vg/al) + &#x27;,&#x27; + Math.floor(vb/al) + &#x27;)&#x27;; rect(x,y,color); &#125; &#125; /** *数组升维 [1,2,3,4] =&gt; [[1,2],[3,4]] */ function restore(arr, step) &#123; var list = []; var index = 0; var n = Math.floor(arr.length/step); for(var i = 0; i &lt; n ;i++)&#123; list.push(arr.slice(index,index+step)); index += step; &#125; return list; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 效果图: 是不是特别棒,再也不为女朋友照片的隐私犯愁了.ps:现在就差个女朋友了 源码","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://zhoushaoting.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"前端学习","slug":"前端学习","permalink":"https://zhoushaoting.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"后端学习","slug":"后端学习/后端学习","date":"2018-05-16T05:31:45.000Z","updated":"2018-05-16T05:31:45.000Z","comments":true,"path":"2018/05/16/后端学习/后端学习/","link":"","permalink":"https://zhoushaoting.com/2018/05/16/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/","excerpt":"加紧施工中…","text":"加紧施工中…","categories":[{"name":"后端学习","slug":"后端学习","permalink":"https://zhoushaoting.com/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"后端学习","slug":"后端学习","permalink":"https://zhoushaoting.com/tags/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"react-navigation的基本使用","slug":"移动端学习/react-navigation的基本使用","date":"2018-05-15T18:41:51.000Z","updated":"2023-12-03T06:55:49.705Z","comments":true,"path":"2018/05/16/移动端学习/react-navigation的基本使用/","link":"","permalink":"https://zhoushaoting.com/2018/05/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/react-navigation%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","excerpt":"本文基于npm 5.6.6 react-native-li 2.0.1 react-native 0.54.0 react-navigation ^1.4.0所写.","text":"本文基于npm 5.6.6 react-native-li 2.0.1 react-native 0.54.0 react-navigation ^1.4.0所写. 实现的基本功能 tabBar 导航栏 在static中使用this 回调 跳多级界面 防止连续点击多次跳转界面并且上面这些方法均未修改三方库的源码,原先需要修改源码实现:原版对于react-navigation的使用看官方文档即可.防止连续点击多次跳转界面 通过state判断:先定义个state waiting 为 false ,再定义点击事件的 disabled=&#123;this.state.waiting&#125; ,在响应方法里面先行修改statewaiting 为 true,然后跳转界面,最后在下方定一个计时器,2秒后再次修改 state 为 false 即可.完整代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; Platform, StyleSheet, Text, View, Image, TouchableOpacity&#125; from &#x27;react-native&#x27;;type Props = &#123;&#125;;export default class OneDetails extends Component&lt;Props&gt; &#123; // 构造 constructor(props) &#123; super(props); // 初始状态 this.state = &#123; waiting:false//防止多次重复点击 &#125;; &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;TouchableOpacity onPress=&#123;()=&gt;this.onclickBtn()&#125; disabled=&#123;this.state.waiting&#125;&gt; &lt;Text&gt;点击跳转&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ); &#125; onclickBtn =() =&gt;&#123; this.setState(&#123;waiting: true&#125;); this.props.navigation.navigate(&#x27;OneDetailsFlat&#x27;) setTimeout(()=&gt; &#123; this.setState(&#123;waiting: false&#125;) &#125;, 2000);//2秒后重置state中的waiting状态 &#125;&#125; ### 在static中使用this 先在`componentDidMount `里 1234567//设置在static中使用this componentDidMount()&#123; this.props.navigation.setParams(&#123; navigatePress:this.navigatePress &#125;) &#125; 然后就可以: 123456789static navigationOptions = (&#123; navigation, screenProps &#125;) =&gt; (&#123; title: &#x27;ListView&#x27;, headerStyle:&#123;backgroundColor:&#x27;red&#x27;&#125;, headerRight:( &lt;Text onPress=&#123;()=&gt;navigation.state.params.navigatePress()&#125;&gt; 点击 &lt;/Text&gt; ) &#125;); 使用: 1234//导航条按钮点击 navigatePress = () =&gt; &#123; alert(this.state.text) &#125; 回调 在A push 到 B的时候先行定义个方法,然后在B pop 回A调用即可.A -&gt; B 123456789101112//导航条按钮点击navigatePress = () =&gt; &#123; this.props.navigation.navigate(&#x27;OneDetailsFlatDetails&#x27;,&#123; // 跳转的时候携带一个参数去下个页面 callback: (data)=&gt;&#123; alert(data) &#125; &#125;);&#125; B -&gt; A 1234popTwo =() =&gt;&#123; this.props.navigation.state.params.callback(&#x27;回调参数&#x27;); this.props.navigation.goBack() &#125; 回到首页 this.props.navigation.popToTop()回到相应页 this.props.navigation.pop(2)效果图: 源码","categories":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"移动端学习","slug":"移动端学习","permalink":"https://zhoushaoting.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]}]}